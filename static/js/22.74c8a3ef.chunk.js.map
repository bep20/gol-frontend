{"version":3,"sources":["views/Nft/market/components/BuySellModals/BuyModal/types.ts","views/Nft/market/components/BuySellModals/BuyModal/styles.tsx","views/Nft/market/components/BuySellModals/BuyModal/ReviewStage.tsx","views/Nft/market/components/BuySellModals/BuyModal/index.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/styles.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/MainPancakeBunnyCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/ExpandableCard.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ManagePancakeBunniesCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/PropertiesCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/DetailsCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/MoreFromThisCollection.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/ForSaleTableRows.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/CountdownCircle.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/UpdateIndicator.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/utils.ts","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/MainNFTCard.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/ManageNFTsCard.tsx","views/Nft/market/hooks/useNftOwner.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/OwnerCard.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/index.tsx","views/Nft/market/Collection/IndividualNFTPage/index.tsx","../node_modules/lodash/sum.js","views/Nft/market/hooks/useGetCollectionDistribution.tsx","views/Nft/market/hooks/useAllPancakeBunnyNfts.ts","../node_modules/lodash/_baseSum.js"],"names":["PaymentCurrency","BuyingStage","StyledModal","styled","Modal","stage","theme","APPROVE_AND_CONFIRM","CONFIRM","colors","textSubtle","BorderedBox","Grid","background","cardBorder","radii","default","BnbAmountCell","bnbAmount","isLoading","isInsufficient","bnbBusdPrice","useBNBBusdPrice","flexDirection","justifySelf","width","height","mb","usdAmount","multiplyPriceByAmount","justifyContent","mr","bold","color","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","small","textAlign","ReviewStage","nftToBuy","paymentCurrency","setPaymentCurrency","nftPrice","walletBalance","walletFetchStatus","notEnoughBnbForPurchase","continueToNextStage","t","useTranslation","account","useWeb3React","px","pt","src","image","thumbnail","fontSize","collectionName","name","alignItems","p","as","Link","scale","external","variant","href","getBscScanLinkForNft","collectionAddress","tokenId","activeIndex","onItemClick","index","symbol","BNB","FetchStatus","SUCCESS","ConnectWalletButton","my","BASE_URL","pb","onClick","disabled","style","symbol1","symbol2","modalTitles","REVIEW","TX_CONFIRMED","BuyModal","onDismiss","useState","setStage","confirmedTxHash","setConfirmedTxHash","isPaymentCurrentInitialized","setIsPaymentCurrentInitialized","useTheme","callWithGasPrice","useCallWithGasPrice","wbnbContract","useERC20","tokens","wbnb","address","nftMarketContract","useNftMarketContract","toastSuccess","useToast","dispatch","useAppDispatch","nftPriceWei","parseUnits","marketData","currentAskPrice","parseFloat","useGetBnbBalance","bnbBalance","balance","bnbFetchStatus","fetchStatus","formattedBnbBalance","formatEther","useTokenBalance","wbnbBalance","wbnbFetchStatus","formattedWbnbBalance","getBalanceNumber","lt","ethersToBigNumber","useEffect","gte","WBNB","useApproveConfirmTransaction","onRequiresApproval","a","allowance","currentAllowance","gt","onApprove","ethers","constants","MaxUint256","onApproveSuccess","receipt","Toast","txHash","transactionHash","onConfirm","payAmount","Number","isNaN","BigNumber","from","value","onSuccess","addUserNft","nftLocation","NftLocation","WALLET","isApproving","isApproved","isConfirming","handleApprove","handleConfirm","showBackButton","title","onBack","headerBackground","gradients","cardHeader","ApproveAndConfirmStage","ConfirmStage","TransactionConfirmed","TwoColumnsContainer","Flex","RoundedImage","Image","SmallRoundedImage","Container","CollectionLink","primary","mediaQueries","lg","CollectibleRowContainer","StyledSortButton","button","secondary","ButtonContainer","Box","TableHeading","MainPancakeBunnyCard","cheapestNft","cheapestNftFromOtherSellers","nothingForSaleBunny","nftToDisplay","onlyOwnNftsOnSale","hasListings","priceInUsd","useModal","onPresentBuyModal","SellModal","nftToSell","onPresentAdjustPriceModal","actionButton","minWidth","mt","flex","to","nftsBaseUrl","description","expandAnimation","keyframes","collapseAnimation","ExpandableCardBody","expanded","css","FullWidthCard","Card","ExpandableCard","icon","content","setExpanded","gridTemplateColumns","borderBottom","prev","maxWidth","ScrollableContainer","Divider","div","LocationColors","FORSALE","PROFILE","LocationIcons","SellIcon","WalletFilledIcon","CameraIcon","CollectibleRow","nft","lowestPrice","modalVariant","location","ProfileNftModal","onPresentProfileNftModal","onPresentModal","mx","CollectiblesByLocation","nfts","IconComponent","display","map","ManagePancakeBunniesCard","bunnyId","useUserNfts","userNftsInitializationState","userNfts","useFetchUserNfts","bunniesInWallet","filter","attributes","bunniesForSale","profilePicBunny","loading","UserNftInitializationState","INITIALIZED","useHasNoBunnies","length","KNOWN_TRAITS_TEXT","SingleProperty","rarity","textTransform","toFixed","PropertiesCard","properties","property","traitType","LongTextContainer","Text","DetailsCard","contractAddress","ipfsJson","chainId","useActiveWeb3React","getBscScanLink","SwiperCircle","isActive","textDisabled","StyledSwiper","md","MoreFromThisCollection","currentTokenName","swiperRef","setSwiperRef","setActiveIndex","useMatchBreakpoints","isMobile","isMd","isLg","allPancakeBunnyNfts","useAllPancakeBunnyNfts","collectionNfts","useNftsFromCollection","isPBCollection","isAddress","pancakeBunniesAddress","fetchNftsFromCollections","page","size","nftsToShow","slidesPerView","maxPageIndex","reduce","nftArray","current","find","push","slice","spaceBetween","onSwiper","onActiveIndexChange","newActiveIndex","Math","ceil","slidesPerGroup","initialSlide","slidePrev","Array","keys","slideTo","goToSlide","slideNext","OwnersTableRow","Row","ownNft","currentSeller","toLowerCase","pl","formatNumber","ProfileCell","accountAddress","ForSaleTableRow","nftsForSale","countdownAnimation","CountdownContainer","primaryBright","CountdownCircle","secondsRemaining","isUpdating","lineHeight","r","cx","cy","UpdateIndicator","setSecondsRemaining","isFetchingMorePancakeBunnies","useLoadingState","isUpdatingPancakeBunnies","useTooltip","placement","tooltip","tooltipVisible","targetRef","intervalId","setInterval","clearInterval","ref","StyledCard","hasManyPages","ForSaleTableCard","totalForSale","loadMore","isFetchingMoreNfts","priceSort","togglePriceSort","setPage","itemsPerPage","needsExtraPage","maxPage","floor","nftsOnCurrentPage","switchPage","pageNumber","loadMoreButton","ml","num","py","type","ForSaleTableRows","IndividualPancakeBunnyPage","setNothingForSaleBunny","allBunnies","useGetAllBunniesByBunnyId","setPriceSort","previousPriceSort","usePreviousValue","useFetchByBunnyIdAndUpdate","latestPancakeBunniesUpdateAt","fetchMorePancakeBunnies","fastRefresh","useRefresh","bunniesSortedByPrice","orderBy","allBunniesFromOtherSellers","bunny","cheapestBunny","cheapestBunnyFromOtherSellers","useGetCollectionDistributionPB","distributionData","data","isFetchingDistribution","isFetching","Date","now","PANCAKE_BUNNIES_UPDATE_FREQUENCY","getNftsFromCollectionApi","collection","displayType","fetchBasicBunnyData","sortedNfts","useMemo","sort","nftA","nftB","nftPriceA","nftPriceB","sortNFTsByPriceBuilder","PageLoader","propertyRarity","total","sum","Object","values","getBunnyIdRarity","Page","metadataUrl","currentValue","MainNFTCard","isOwnNft","nftIsProfilePic","currentAskPriceAsNumber","isTradable","onPresentSellModal","EditProfileModal","onEditProfileModal","ownerButtons","CollectibleByLocation","ManageNFTsCard","hasThisNft","useNftOwner","owner","setOwner","isLoadingOwner","setIsLoadingOwner","collectionContract","useContractForCollection","getOwner","ownerOf","tokenOwner","OwnerRow","OwnerCard","IndividualNFTPage","setNft","setIsOwnNft","useGetCollectionDistribution","fetchNftData","getNftApi","metadata","getNftsMarketData","nftOwnedByConnectedUser","userNft","userProfilePicture","rarityMap","nftAttributeValue","attribute","IndividualNFTPageRouter","useParams","baseSum","require","identity","module","exports","array","state","setState","prevState","getCollectionDistributionApi","apiResponse","fetchTokens","setAllPancakeBunnyNfts","bunnyIds","getAllPancakeBunniesLowestPrice","lowestPrices","getAllPancakeBunniesRecentUpdatedAt","latestUpdates","meta","updatedAt","fetchPancakeBunnies","iteratee","result"],"mappings":"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","file":"static/js/22.74c8a3ef.chunk.js","sourcesContent":["import { TokenMarketData, Image } from 'state/nftMarket/types'\n\nexport enum PaymentCurrency {\n  BNB,\n  WBNB,\n}\n\nexport enum BuyingStage {\n  REVIEW,\n  APPROVE_AND_CONFIRM,\n  CONFIRM,\n  TX_CONFIRMED,\n}\n\nexport interface BuyNFT {\n  collection: {\n    address: string\n    name: string\n  }\n  token: TokenMarketData\n  name: string\n  image: Image\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Grid, Flex, Text, BinanceIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { BuyingStage } from './types'\n\nexport const StyledModal = styled(Modal)<{ stage: BuyingStage }>`\n  & > div:last-child {\n    padding: 0;\n  }\n  & h2:first-of-type {\n    ${({ stage, theme }) =>\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\n        ? `color: ${theme.colors.textSubtle}`\n        : null};\n  }\n  & svg:first-of-type {\n    ${({ stage, theme }) =>\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\n        ? `fill: ${theme.colors.textSubtle}`\n        : null};\n  }\n`\n\nexport const BorderedBox = styled(Grid)`\n  margin: 16px 0;\n  padding: 16px;\n  background-color: ${({ theme }) => theme.colors.background};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.default};\n  grid-template-columns: 1fr 1fr;\n  grid-row-gap: 8px;\n`\n\ninterface BnbAmountCellProps {\n  bnbAmount: number\n  isLoading?: boolean\n  isInsufficient?: boolean\n}\n\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount, isLoading, isInsufficient }) => {\n  const bnbBusdPrice = useBNBBusdPrice()\n  if (isLoading) {\n    return (\n      <Flex flexDirection=\"column\" justifySelf=\"flex-end\">\n        <Skeleton width=\"86px\" height=\"20px\" mb=\"6px\" />\n        <Skeleton width=\"86px\" height=\"20px\" />\n      </Flex>\n    )\n  }\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\n  return (\n    <Flex justifySelf=\"flex-end\" flexDirection=\"column\">\n      <Flex justifyContent=\"flex-end\">\n        <BinanceIcon height={16} width={16} mr=\"4px\" />\n        <Text bold color={isInsufficient ? 'failure' : 'text'}>{`${bnbAmount.toLocaleString(undefined, {\n          minimumFractionDigits: 3,\n          maximumFractionDigits: 3,\n        })}`}</Text>\n      </Flex>\n      <Text small color=\"textSubtle\" textAlign=\"right\">\n        {`($${usdAmount.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })})`}\n      </Text>\n    </Flex>\n  )\n}\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { Flex, Text, Button, ButtonMenu, ButtonMenuItem, Message, Link } from '@pancakeswap/uikit'\nimport { FetchStatus } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_URL } from 'config'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getBscScanLinkForNft } from 'utils'\nimport { Divider, RoundedImage } from '../shared/styles'\nimport { BorderedBox, BnbAmountCell } from './styles'\nimport { PaymentCurrency } from './types'\n\ninterface ReviewStageProps {\n  nftToBuy: NftToken\n  paymentCurrency: PaymentCurrency\n  setPaymentCurrency: (index: number) => void\n  nftPrice: number\n  walletBalance: number\n  walletFetchStatus: FetchStatus\n  notEnoughBnbForPurchase: boolean\n  continueToNextStage: () => void\n}\n\nconst ReviewStage: React.FC<ReviewStageProps> = ({\n  nftToBuy,\n  paymentCurrency,\n  setPaymentCurrency,\n  nftPrice,\n  walletBalance,\n  walletFetchStatus,\n  notEnoughBnbForPurchase,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  return (\n    <>\n      <Flex px=\"24px\" pt=\"24px\" flexDirection=\"column\">\n        <Flex>\n          <RoundedImage src={nftToBuy.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Flex flexDirection=\"column\" justifyContent=\"space-evenly\">\n            <Text color=\"textSubtle\" fontSize=\"12px\">\n              {nftToBuy.collectionName}\n            </Text>\n            <Text bold>{nftToBuy.name}</Text>\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n              <Text fontSize=\"12px\" color=\"textSubtle\" p=\"0px\" height=\"16px\" mr=\"4px\">\n                {t('Token ID:')}\n              </Text>\n              <Button\n                as={Link}\n                scale=\"xs\"\n                px=\"0px\"\n                pt=\"2px\"\n                external\n                variant=\"text\"\n                href={getBscScanLinkForNft(nftToBuy.collectionAddress, nftToBuy.tokenId)}\n              >\n                {nftToBuy.tokenId}\n              </Button>\n            </Flex>\n          </Flex>\n        </Flex>\n        <BorderedBox>\n          <Text small color=\"textSubtle\">\n            {t('Pay with')}\n          </Text>\n          <ButtonMenu\n            activeIndex={paymentCurrency}\n            onItemClick={(index) => setPaymentCurrency(index)}\n            scale=\"sm\"\n            variant=\"subtle\"\n          >\n            <ButtonMenuItem>BNB</ButtonMenuItem>\n            <ButtonMenuItem>WBNB</ButtonMenuItem>\n          </ButtonMenu>\n          <Text small color=\"textSubtle\">\n            {t('Total payment')}\n          </Text>\n          <BnbAmountCell bnbAmount={nftPrice} />\n          <Text small color=\"textSubtle\">\n            {t('%symbol% in wallet', { symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB' })}\n          </Text>\n          {!account ? (\n            <Flex justifySelf=\"flex-end\">\n              <ConnectWalletButton scale=\"sm\" />\n            </Flex>\n          ) : (\n            <BnbAmountCell\n              bnbAmount={walletBalance}\n              isLoading={walletFetchStatus !== FetchStatus.SUCCESS}\n              isInsufficient={walletFetchStatus === FetchStatus.SUCCESS && notEnoughBnbForPurchase}\n            />\n          )}\n        </BorderedBox>\n        {walletFetchStatus === FetchStatus.SUCCESS && notEnoughBnbForPurchase && (\n          <Message p=\"8px\" variant=\"danger\">\n            <Text>\n              {t('Not enough %symbol% to purchase this NFT', {\n                symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB',\n              })}\n            </Text>\n          </Message>\n        )}\n        <Flex alignItems=\"center\">\n          <Text my=\"16px\" mr=\"4px\">\n            {t('Convert between BNB and WBNB for free')}:\n          </Text>\n          <Button\n            as={Link}\n            p=\"0px\"\n            height=\"16px\"\n            external\n            variant=\"text\"\n            href={`${BASE_URL}/swap?inputCurrency=BNB&outputCurrency=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c`}\n          >\n            {t('Convert')}\n          </Button>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex px=\"24px\" pb=\"24px\" flexDirection=\"column\">\n        <Button\n          onClick={continueToNextStage}\n          disabled={walletFetchStatus !== FetchStatus.SUCCESS || notEnoughBnbForPurchase}\n          mb=\"8px\"\n        >\n          {t('Checkout')}\n        </Button>\n        <Button\n          as={Link}\n          external\n          style={{ width: '100%' }}\n          href={`${BASE_URL}/swap?outputCurrency=BNB`}\n          variant=\"secondary\"\n        >\n          {t('Get %symbol1% or %symbol2%', { symbol1: 'BNB', symbol2: 'WBNB' })}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default ReviewStage\n","import React, { useEffect, useState } from 'react'\nimport { InjectedModalProps } from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport useTheme from 'hooks/useTheme'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance, { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { ethersToBigNumber } from 'utils/bigNumber'\nimport tokens from 'config/constants/tokens'\nimport { parseUnits, formatEther } from 'ethers/lib/utils'\nimport { useERC20, useNftMarketContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useAppDispatch } from 'state'\nimport { addUserNft } from 'state/nftMarket/reducer'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { StyledModal } from './styles'\nimport ReviewStage from './ReviewStage'\nimport ConfirmStage from '../shared/ConfirmStage'\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\nimport { PaymentCurrency, BuyingStage } from './types'\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\n\nconst modalTitles = {\n  [BuyingStage.REVIEW]: 'Review',\n  [BuyingStage.APPROVE_AND_CONFIRM]: 'Back',\n  [BuyingStage.CONFIRM]: 'Back',\n  [BuyingStage.TX_CONFIRMED]: 'Transaction Confirmed',\n}\n\ninterface BuyModalProps extends InjectedModalProps {\n  nftToBuy: NftToken\n}\n\nconst BuyModal: React.FC<BuyModalProps> = ({ nftToBuy, onDismiss }) => {\n  const [stage, setStage] = useState(BuyingStage.REVIEW)\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\n  const [paymentCurrency, setPaymentCurrency] = useState<PaymentCurrency>(PaymentCurrency.BNB)\n  const [isPaymentCurrentInitialized, setIsPaymentCurrentInitialized] = useState(false)\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const { account } = useWeb3React()\n  const wbnbContract = useERC20(tokens.wbnb.address)\n  const nftMarketContract = useNftMarketContract()\n\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n\n  const nftPriceWei = parseUnits(nftToBuy.marketData.currentAskPrice, 'ether')\n  const nftPrice = parseFloat(nftToBuy.marketData.currentAskPrice)\n\n  // BNB - returns ethers.BigNumber\n  const { balance: bnbBalance, fetchStatus: bnbFetchStatus } = useGetBnbBalance()\n  const formattedBnbBalance = parseFloat(formatEther(bnbBalance))\n  // WBNB - returns BigNumber\n  const { balance: wbnbBalance, fetchStatus: wbnbFetchStatus } = useTokenBalance(tokens.wbnb.address)\n  const formattedWbnbBalance = getBalanceNumber(wbnbBalance)\n\n  const walletBalance = paymentCurrency === PaymentCurrency.BNB ? formattedBnbBalance : formattedWbnbBalance\n  const walletFetchStatus = paymentCurrency === PaymentCurrency.BNB ? bnbFetchStatus : wbnbFetchStatus\n\n  const notEnoughBnbForPurchase =\n    paymentCurrency === PaymentCurrency.BNB\n      ? bnbBalance.lt(nftPriceWei)\n      : wbnbBalance.lt(ethersToBigNumber(nftPriceWei))\n\n  useEffect(() => {\n    if (bnbBalance.lt(nftPriceWei) && wbnbBalance.gte(ethersToBigNumber(nftPriceWei)) && !isPaymentCurrentInitialized) {\n      setPaymentCurrency(PaymentCurrency.WBNB)\n      setIsPaymentCurrentInitialized(true)\n    }\n  }, [bnbBalance, wbnbBalance, nftPriceWei, isPaymentCurrentInitialized])\n\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const currentAllowance = await wbnbContract.allowance(account, nftMarketContract.address)\n        return currentAllowance.gt(0)\n      } catch (error) {\n        return false\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(wbnbContract, 'approve', [nftMarketContract.address, ethers.constants.MaxUint256])\n    },\n    onApproveSuccess: async ({ receipt }) => {\n      toastSuccess(\n        t('Contract approved - you can now buy NFT with WBNB!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n    onConfirm: () => {\n      const payAmount = Number.isNaN(nftPrice)\n        ? ethers.BigNumber.from(0)\n        : parseUnits(nftToBuy.marketData.currentAskPrice)\n      if (paymentCurrency === PaymentCurrency.BNB) {\n        return callWithGasPrice(nftMarketContract, 'buyTokenUsingBNB', [nftToBuy.collectionAddress, nftToBuy.tokenId], {\n          value: payAmount,\n        })\n      }\n      return callWithGasPrice(nftMarketContract, 'buyTokenUsingWBNB', [\n        nftToBuy.collectionAddress,\n        nftToBuy.tokenId,\n        payAmount,\n      ])\n    },\n    onSuccess: async ({ receipt }) => {\n      setConfirmedTxHash(receipt.transactionHash)\n      setStage(BuyingStage.TX_CONFIRMED)\n      dispatch(\n        addUserNft({\n          tokenId: nftToBuy.tokenId,\n          collectionAddress: nftToBuy.collectionAddress,\n          nftLocation: NftLocation.WALLET,\n        }),\n      )\n      toastSuccess(\n        t('Your NFT has been sent to your wallet'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n  })\n\n  const continueToNextStage = () => {\n    if (paymentCurrency === PaymentCurrency.WBNB && !isApproved) {\n      setStage(BuyingStage.APPROVE_AND_CONFIRM)\n    } else {\n      setStage(BuyingStage.CONFIRM)\n    }\n  }\n\n  const goBack = () => {\n    setStage(BuyingStage.REVIEW)\n  }\n\n  const showBackButton = stage === BuyingStage.CONFIRM || stage === BuyingStage.APPROVE_AND_CONFIRM\n\n  return (\n    <StyledModal\n      title={t(modalTitles[stage])}\n      stage={stage}\n      onDismiss={onDismiss}\n      onBack={showBackButton ? goBack : null}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stage === BuyingStage.REVIEW && (\n        <ReviewStage\n          nftToBuy={nftToBuy}\n          paymentCurrency={paymentCurrency}\n          setPaymentCurrency={setPaymentCurrency}\n          nftPrice={nftPrice}\n          walletBalance={walletBalance}\n          walletFetchStatus={walletFetchStatus}\n          notEnoughBnbForPurchase={notEnoughBnbForPurchase}\n          continueToNextStage={continueToNextStage}\n        />\n      )}\n      {stage === BuyingStage.APPROVE_AND_CONFIRM && (\n        <ApproveAndConfirmStage\n          variant=\"buy\"\n          handleApprove={handleApprove}\n          isApproved={isApproved}\n          isApproving={isApproving}\n          isConfirming={isConfirming}\n          handleConfirm={handleConfirm}\n        />\n      )}\n      {stage === BuyingStage.CONFIRM && <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />}\n      {stage === BuyingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\n    </StyledModal>\n  )\n}\n\nexport default BuyModal\n","import styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Box, Flex, Grid, Image } from '@pancakeswap/uikit'\n\nexport const TwoColumnsContainer = styled(Flex)`\n  gap: 22px;\n  align-items: flex-start;\n  & > div:first-child {\n    flex: 1;\n    gap: 20px;\n  }\n  & > div:last-child {\n    flex: 2;\n  }\n`\n\nexport const RoundedImage = styled(Image)`\n  height: max-content;\n  border-radius: ${({ theme }) => theme.radii.default};\n  overflow: hidden;\n  & > img {\n    object-fit: contain;\n  }\n`\n\nexport const SmallRoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\nexport const Container = styled(Flex)`\n  gap: 24px;\n`\n\nexport const CollectionLink = styled(Link)`\n  color: ${({ theme }) => theme.colors.primary};\n  display: block;\n  font-weight: 600;\n  margin-top: 16px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: 50px;\n  }\n`\n\nexport const CollectibleRowContainer = styled(Grid)`\n  &:hover {\n    opacity: 0.5;\n    cursor: pointer;\n  }\n`\n\nexport const StyledSortButton = styled.button`\n  border: none;\n  cursor: pointer;\n  background: none;\n  color: ${({ theme }) => theme.colors.secondary};\n  font-weight: bold;\n`\n\nexport const ButtonContainer = styled(Box)`\n  text-align: right;\n  padding-right: 24px;\n`\n\nexport const TableHeading = styled(Grid)`\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n`\n","import React from 'react'\nimport { Flex, Box, Card, CardBody, Text, Button, BinanceIcon, Skeleton, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport { nftsBaseUrl } from '../../../constants'\nimport { RoundedImage, Container, CollectionLink } from '../shared/styles'\n\ninterface MainPancakeBunnyCardProps {\n  cheapestNft: NftToken\n  cheapestNftFromOtherSellers?: NftToken\n  nothingForSaleBunny?: NftToken\n}\n\nconst MainPancakeBunnyCard: React.FC<MainPancakeBunnyCardProps> = ({\n  cheapestNft,\n  cheapestNftFromOtherSellers,\n  nothingForSaleBunny,\n}) => {\n  const { t } = useTranslation()\n  const bnbBusdPrice = useBNBBusdPrice()\n\n  const nftToDisplay = cheapestNftFromOtherSellers || cheapestNft || nothingForSaleBunny\n\n  const onlyOwnNftsOnSale = !cheapestNftFromOtherSellers\n  const hasListings = cheapestNftFromOtherSellers || cheapestNft\n\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nftToDisplay.marketData?.currentAskPrice))\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nftToDisplay} />)\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={cheapestNft} />)\n\n  const actionButton = onlyOwnNftsOnSale ? (\n    <Button\n      variant=\"danger\"\n      minWidth=\"168px\"\n      width={['100%', null, 'max-content']}\n      mt=\"24px\"\n      onClick={onPresentAdjustPriceModal}\n    >\n      {t('Adjust Sale Price')}\n    </Button>\n  ) : (\n    <Button\n      disabled={onlyOwnNftsOnSale}\n      minWidth=\"168px\"\n      width={['100%', null, 'max-content']}\n      mt=\"24px\"\n      onClick={onPresentBuyModal}\n    >\n      {t('Buy')}\n    </Button>\n  )\n  return (\n    <Card mb=\"40px\">\n      <CardBody>\n        <Container flexDirection={['column-reverse', null, 'row']}>\n          <Flex flex=\"2\">\n            <Box>\n              <CollectionLink to={`${nftsBaseUrl}/collections/${nftToDisplay.collectionAddress}`}>\n                {nftToDisplay.collectionName}\n              </CollectionLink>\n              <Text fontSize=\"40px\" bold mt=\"12px\">\n                {nftToDisplay.name}\n              </Text>\n              <Text mt={['16px', '16px', '48px']}>{t(nftToDisplay.description)}</Text>\n              {(cheapestNft || cheapestNftFromOtherSellers) && (\n                <>\n                  <Text color=\"textSubtle\" mt={['16px', '16px', '48px']}>\n                    {t('Lowest price')}\n                  </Text>\n                  <Flex alignItems=\"center\" mt=\"8px\">\n                    <BinanceIcon width={18} height={18} mr=\"4px\" />\n                    <Text fontSize=\"24px\" bold mr=\"4px\">\n                      {nftToDisplay.marketData.currentAskPrice}\n                    </Text>\n                    {bnbBusdPrice ? (\n                      <Text color=\"textSubtle\">{`(~${priceInUsd.toLocaleString(undefined, {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                      })} USD)`}</Text>\n                    ) : (\n                      <Skeleton width=\"64px\" />\n                    )}\n                  </Flex>\n                </>\n              )}\n              {hasListings && actionButton}\n            </Box>\n          </Flex>\n          <Flex flex=\"2\" justifyContent={['center', null, 'flex-end']} alignItems=\"center\">\n            <RoundedImage src={nftToDisplay.image.thumbnail} width={440} height={440} />\n          </Flex>\n        </Container>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default MainPancakeBunnyCard\n","import React, { useState } from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { Grid, Text, Card, Box, ChevronUpIcon, ChevronDownIcon, IconButton } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 720px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 710px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst ExpandableCardBody = styled(Box)<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n`\n\nconst FullWidthCard = styled(Card)`\n  width: 100%;\n`\n\ninterface ExpandableCardProps {\n  icon: React.ReactNode\n  title: string\n  content: React.ReactNode\n}\n\nconst ExpandableCard: React.FC<ExpandableCardProps> = ({ icon, title, content }) => {\n  const [expanded, setExpanded] = useState(true)\n  const { theme } = useTheme()\n  return (\n    <FullWidthCard>\n      <Grid\n        gridTemplateColumns=\"1fr 8fr 1fr\"\n        alignItems=\"center\"\n        height=\"72px\"\n        px=\"24px\"\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\n      >\n        {icon}\n        <Text bold>{title}</Text>\n        <IconButton\n          onClick={() => {\n            setExpanded((prev) => !prev)\n          }}\n          variant=\"text\"\n          maxWidth=\"32px\"\n        >\n          {expanded ? (\n            <ChevronUpIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n          ) : (\n            <ChevronDownIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n          )}\n        </IconButton>\n      </Grid>\n      <ExpandableCardBody expanded={expanded}>{content}</ExpandableCardBody>\n    </FullWidthCard>\n  )\n}\n\nexport default ExpandableCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Box,\n  Flex,\n  Grid,\n  Text,\n  CogIcon,\n  SellIcon,\n  WalletFilledIcon,\n  CameraIcon,\n  BinanceIcon,\n  Skeleton,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { NftLocation, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableCard from '../shared/ExpandableCard'\nimport useFetchUserNfts from '../../../Profile/hooks/useFetchUserNfts'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport ProfileNftModal from '../../../components/ProfileNftModal'\nimport { SmallRoundedImage, CollectibleRowContainer } from '../shared/styles'\n\nconst ScrollableContainer = styled(Box)`\n  overflow-y: auto;\n  max-height: 224px;\n`\n\nconst Divider = styled.div`\n  margin: 16px 20px;\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n`\n\nconst LocationColors = {\n  [NftLocation.FORSALE]: 'failure',\n  [NftLocation.WALLET]: 'secondary',\n  [NftLocation.PROFILE]: 'textSubtle',\n}\n\nconst LocationIcons = {\n  [NftLocation.FORSALE]: SellIcon,\n  [NftLocation.WALLET]: WalletFilledIcon,\n  [NftLocation.PROFILE]: CameraIcon,\n}\n\ninterface CollectibleRowProps {\n  nft: NftToken\n  lowestPrice: string\n}\n\nconst CollectibleRow: React.FC<CollectibleRowProps> = ({ nft, lowestPrice }) => {\n  const { t } = useTranslation()\n  const modalVariant = nft.location === NftLocation.WALLET ? 'sell' : 'edit'\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={nft} />)\n  const [onPresentModal] = useModal(<SellModal variant={modalVariant} nftToSell={nft} />)\n  return (\n    <CollectibleRowContainer\n      gridTemplateColumns=\"96px 1fr\"\n      px=\"16px\"\n      pb=\"8px\"\n      my=\"16px\"\n      onClick={nft.location === NftLocation.PROFILE ? onPresentProfileNftModal : onPresentModal}\n    >\n      <SmallRoundedImage src={nft.image.thumbnail} width={64} height={64} mx=\"16px\" />\n      <Grid gridTemplateColumns=\"1fr 1fr\">\n        <Text bold>{nft.name}</Text>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n          {nft.collectionName}\n        </Text>\n        {lowestPrice && (\n          <>\n            <Text small color=\"textSubtle\">\n              {t('Lowest price')}\n            </Text>\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\n              <Text small>{lowestPrice}</Text>\n            </Flex>\n          </>\n        )}\n        {nft.location === NftLocation.FORSALE ? (\n          <>\n            <Text small color=\"textSubtle\">\n              {t('Your price')}\n            </Text>\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\n              <Text small>{nft.marketData.currentAskPrice}</Text>\n            </Flex>\n          </>\n        ) : (\n          <Text small color=\"textDisabled\">\n            {t('Not on sale')}\n          </Text>\n        )}\n      </Grid>\n    </CollectibleRowContainer>\n  )\n}\n\ninterface CollectiblesByLocationProps {\n  location: NftLocation\n  nfts: NftToken[]\n  lowestPrice: string\n}\n\nconst CollectiblesByLocation: React.FC<CollectiblesByLocationProps> = ({ location, nfts, lowestPrice }) => {\n  const { t } = useTranslation()\n  const IconComponent = LocationIcons[location]\n  return (\n    <Flex flexDirection=\"column\">\n      <Grid gridTemplateColumns=\"32px 1fr\" px=\"16px\" pb=\"8px\">\n        <IconComponent color={LocationColors[location]} width=\"24px\" height=\"24px\" />\n        <Text display=\"inline\" bold color={LocationColors[location]}>\n          {t(location)}\n        </Text>\n      </Grid>\n      <ScrollableContainer>\n        {nfts.map((nft) => (\n          <CollectibleRow key={nft.tokenId} nft={nft} lowestPrice={lowestPrice} />\n        ))}\n      </ScrollableContainer>\n    </Flex>\n  )\n}\n\ninterface ManagePancakeBunniesCardProps {\n  bunnyId: string\n  lowestPrice?: string\n}\n\nconst ManagePancakeBunniesCard: React.FC<ManagePancakeBunniesCardProps> = ({ bunnyId, lowestPrice }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\n  useFetchUserNfts(account)\n\n  const bunniesInWallet = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.WALLET,\n  )\n  const bunniesForSale = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.FORSALE,\n  )\n  const profilePicBunny = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.PROFILE,\n  )\n\n  const loading = userNftsInitializationState !== UserNftInitializationState.INITIALIZED\n  const useHasNoBunnies =\n    !loading && bunniesInWallet.length === 0 && bunniesForSale.length === 0 && profilePicBunny.length === 0\n\n  const content = (\n    <Box pt=\"16px\">\n      {!account && (\n        <Flex mb=\"16px\" justifyContent=\"center\">\n          <ConnectWalletButton />\n        </Flex>\n      )}\n      {useHasNoBunnies && (\n        <Text px=\"16px\" pb=\"16px\" color=\"textSubtle\">\n          {t('You don’t have any of this item.')}\n        </Text>\n      )}\n      {account && loading && (\n        <Box px=\"16px\" pb=\"8px\">\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n        </Box>\n      )}\n      {bunniesForSale.length > 0 && (\n        <CollectiblesByLocation location={NftLocation.FORSALE} nfts={bunniesForSale} lowestPrice={lowestPrice} />\n      )}\n      {bunniesInWallet.length > 0 && (\n        <>\n          {bunniesForSale.length > 0 && <Divider />}\n          <CollectiblesByLocation location={NftLocation.WALLET} nfts={bunniesInWallet} lowestPrice={lowestPrice} />\n        </>\n      )}\n      {profilePicBunny.length > 0 && (\n        <>\n          {(bunniesForSale.length > 0 || bunniesInWallet.length > 0) && <Divider />}\n          <CollectiblesByLocation location={NftLocation.PROFILE} nfts={profilePicBunny} lowestPrice={lowestPrice} />\n        </>\n      )}\n    </Box>\n  )\n  return <ExpandableCard title={t('Manage Yours')} icon={<CogIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default ManagePancakeBunniesCard\n","import React from 'react'\nimport { Box, Flex, Text, NftIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftAttribute } from 'state/nftMarket/types'\nimport ExpandableCard from './ExpandableCard'\n\ninterface PropertiesCardProps {\n  properties: NftAttribute[]\n  rarity: { [key: string]: number }\n}\n\n// Map of known traits to human-readable text\nconst KNOWN_TRAITS_TEXT = {\n  bunnyId: 'Bunny ID',\n}\n\nconst SingleProperty: React.FC<{ title: string; value: string | number; rarity: number }> = ({\n  title,\n  value,\n  rarity,\n}) => {\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n        {KNOWN_TRAITS_TEXT[title] ?? title}\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text bold textTransform=\"uppercase\" mr=\"4px\">\n          {value}\n        </Text>\n        {rarity && (\n          <Text small color=\"textSubtle\">\n            ({rarity.toFixed(2)}%)\n          </Text>\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nconst PropertiesCard: React.FC<PropertiesCardProps> = ({ properties, rarity }) => {\n  const { t } = useTranslation()\n  const content = (\n    <Box p=\"24px\">\n      {properties.map((property) => (\n        <SingleProperty\n          key={property.traitType}\n          title={property.traitType}\n          value={property.value}\n          rarity={rarity[property.traitType]}\n        />\n      ))}\n    </Box>\n  )\n  return <ExpandableCard title={t('Properties')} icon={<NftIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default PropertiesCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Text, SearchIcon, Link } from '@pancakeswap/uikit'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ExpandableCard from './ExpandableCard'\n\ninterface DetailsCardProps {\n  contractAddress: string\n  ipfsJson: string\n}\n\nconst LongTextContainer = styled(Text)`\n  max-width: 120px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst DetailsCard: React.FC<DetailsCardProps> = ({ contractAddress, ipfsJson }) => {\n  const { t } = useTranslation()\n  const { chainId } = useActiveWeb3React()\n  const content = (\n    <Box p=\"24px\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\n        <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n          {t('Contract address')}\n        </Text>\n        <Link external href={getBscScanLink(contractAddress, 'address', chainId)}>\n          <LongTextContainer bold>{contractAddress}</LongTextContainer>\n        </Link>\n      </Flex>\n      {ipfsJson && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n            IPFS JSON\n          </Text>\n          <Link external href={ipfsJson}>\n            <LongTextContainer bold>{ipfsJson}</LongTextContainer>\n          </Link>\n        </Flex>\n      )}\n    </Box>\n  )\n  return <ExpandableCard title={t('Details')} icon={<SearchIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default DetailsCard\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport SwiperCore from 'swiper'\nimport { ArrowBackIcon, ArrowForwardIcon, Box, IconButton, Text, Flex, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { isAddress } from 'utils'\nimport { useNftsFromCollection } from 'state/nftMarket/hooks'\nimport { fetchNftsFromCollections } from 'state/nftMarket/reducer'\nimport { useAppDispatch } from 'state'\nimport { pancakeBunniesAddress } from '../../../constants'\nimport { CollectibleLinkCard } from '../../../components/CollectibleCard'\nimport useAllPancakeBunnyNfts from '../../../hooks/useAllPancakeBunnyNfts'\n\nimport 'swiper/swiper-bundle.css'\n\nconst INITIAL_SLIDE = 4\n\nconst SwiperCircle = styled.div<{ isActive }>`\n  background-color: ${({ theme, isActive }) => (isActive ? theme.colors.secondary : theme.colors.textDisabled)};\n  width: 12px;\n  height: 12px;\n  margin-right: 8px;\n  border-radius: 50%;\n  cursor: pointer;\n`\n\nconst StyledSwiper = styled.div`\n  ${({ theme }) => theme.mediaQueries.md} {\n    .swiper-wrapper {\n      max-height: 390px;\n    }\n  }\n`\n\ninterface MoreFromThisCollectionProps {\n  collectionAddress: string\n  currentTokenName?: string\n  title?: string\n}\n\nconst MoreFromThisCollection: React.FC<MoreFromThisCollectionProps> = ({\n  collectionAddress,\n  currentTokenName = '',\n  title = 'More from this collection',\n}) => {\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const [swiperRef, setSwiperRef] = useState<SwiperCore>(null)\n  const [activeIndex, setActiveIndex] = useState(1)\n  const { isMobile, isMd, isLg } = useMatchBreakpoints()\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(collectionAddress)\n  const collectionNfts = useNftsFromCollection(collectionAddress)\n\n  const isPBCollection = isAddress(collectionAddress) === pancakeBunniesAddress\n\n  useEffect(() => {\n    if (!isPBCollection) {\n      dispatch(\n        fetchNftsFromCollections({\n          collectionAddress,\n          page: 1,\n          size: 100,\n        }),\n      )\n    }\n  }, [collectionAddress, dispatch, isPBCollection])\n\n  let nftsToShow = allPancakeBunnyNfts\n    ? allPancakeBunnyNfts.filter((nft) => nft.name !== currentTokenName)\n    : collectionNfts?.filter((nft) => nft.name !== currentTokenName)\n\n  if (!nftsToShow || nftsToShow.length === 0) {\n    return null\n  }\n\n  let slidesPerView = 4\n  let maxPageIndex = 3\n\n  if (isMd) {\n    slidesPerView = 2\n    maxPageIndex = 6\n  }\n\n  if (isLg) {\n    slidesPerView = 3\n    maxPageIndex = 4\n  }\n\n  if (isPBCollection) {\n    // PancakeBunnies should display 1 card per bunny id\n    nftsToShow = nftsToShow.reduce((nftArray, current) => {\n      const bunnyId = current.attributes[0].value\n      if (!nftArray.find((nft) => nft.attributes[0].value === bunnyId)) {\n        nftArray.push(current)\n      }\n      return nftArray\n    }, [])\n  }\n  nftsToShow = nftsToShow.slice(0, 12)\n\n  const nextSlide = () => {\n    if (activeIndex < maxPageIndex - 1) {\n      setActiveIndex(activeIndex + 1)\n      swiperRef.slideNext()\n    }\n  }\n\n  const previousSlide = () => {\n    if (activeIndex > 0) {\n      setActiveIndex(activeIndex - 1)\n      swiperRef.slidePrev()\n    }\n  }\n\n  const goToSlide = (index: number) => {\n    setActiveIndex(index / slidesPerView)\n    swiperRef.slideTo(index)\n  }\n\n  const updateActiveIndex = ({ activeIndex: newActiveIndex }) => {\n    if (newActiveIndex !== undefined) setActiveIndex(Math.ceil(newActiveIndex / slidesPerView))\n  }\n\n  return (\n    <Box pt=\"56px\" mb=\"52px\">\n      {title && (\n        <Text bold mb=\"24px\">\n          {t(title)}\n        </Text>\n      )}\n      {isMobile ? (\n        <StyledSwiper>\n          <Swiper spaceBetween={16} slidesPerView={1.5}>\n            {nftsToShow.map((nft) => (\n              <SwiperSlide key={nft.tokenId}>\n                <CollectibleLinkCard nft={nft} />\n              </SwiperSlide>\n            ))}\n          </Swiper>\n        </StyledSwiper>\n      ) : (\n        <StyledSwiper>\n          <Swiper\n            onSwiper={setSwiperRef}\n            onActiveIndexChange={updateActiveIndex}\n            spaceBetween={16}\n            slidesPerView={slidesPerView}\n            slidesPerGroup={slidesPerView}\n            initialSlide={INITIAL_SLIDE}\n          >\n            {nftsToShow.map((nft) => (\n              <SwiperSlide key={nft.tokenId}>\n                <CollectibleLinkCard nft={nft} />\n              </SwiperSlide>\n            ))}\n          </Swiper>\n          <Flex mt=\"16px\" alignItems=\"center\" justifyContent=\"center\">\n            <IconButton variant=\"text\" onClick={previousSlide}>\n              <ArrowBackIcon />\n            </IconButton>\n            {[...Array(maxPageIndex).keys()].map((index) => (\n              <SwiperCircle\n                key={index}\n                onClick={() => goToSlide(index * slidesPerView)}\n                isActive={activeIndex === index}\n              />\n            ))}\n            <IconButton variant=\"text\" onClick={nextSlide}>\n              <ArrowForwardIcon />\n            </IconButton>\n          </Flex>\n        </StyledSwiper>\n      )}\n    </Box>\n  )\n}\n\nexport default MoreFromThisCollection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Price } from 'golswap-sdk'\nimport { Button, Grid, Text, Flex, Box, BinanceIcon, useModal, Skeleton } from '@pancakeswap/uikit'\nimport { formatNumber } from 'utils/formatBalance'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { NftToken } from 'state/nftMarket/types'\nimport BuyModal from 'views/Nft/market/components/BuySellModals/BuyModal'\nimport SellModal from 'views/Nft/market/components/BuySellModals/SellModal'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\nimport { ButtonContainer } from '../../shared/styles'\n\nconst OwnersTableRow = styled(Grid)`\n  grid-template-columns: 2fr 2fr 1fr;\n  grid-row-gap: 16px;\n  margin-top: 16px;\n  align-itmes: center;\n  & > div {\n    padding-bottom: 16px;\n    border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n  }\n`\n\ninterface RowProps {\n  t: ContextApi['t']\n  nft: NftToken\n  bnbBusdPrice: Price\n  account: string\n}\n\nconst Row: React.FC<RowProps> = ({ t, nft, bnbBusdPrice, account }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nft.marketData.currentAskPrice))\n\n  const ownNft = account ? nft.marketData.currentSeller === account.toLowerCase() : false\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={nft} />)\n\n  return (\n    <>\n      <Box pl=\"24px\">\n        <Flex justifySelf=\"flex-start\" alignItems=\"center\" width=\"max-content\">\n          <BinanceIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\n          <Text bold>{formatNumber(parseFloat(nft.marketData.currentAskPrice), 0, 3)}</Text>\n        </Flex>\n        {bnbBusdPrice ? (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`(~${formatNumber(priceInUsd, 2, 2)} USD)`}\n          </Text>\n        ) : (\n          <Skeleton width=\"86px\" height=\"12px\" mt=\"4px\" />\n        )}\n      </Box>\n      <Box>\n        <Flex width=\"max-content\" alignItems=\"center\">\n          <ProfileCell accountAddress={nft.marketData.currentSeller} />\n        </Flex>\n      </Box>\n      <ButtonContainer>\n        {ownNft ? (\n          <Button scale=\"sm\" variant=\"danger\" maxWidth=\"128px\" onClick={onPresentAdjustPriceModal}>\n            {t('Edit')}\n          </Button>\n        ) : (\n          <Button scale=\"sm\" variant=\"secondary\" maxWidth=\"128px\" onClick={onPresentBuyModal}>\n            {t('Buy')}\n          </Button>\n        )}\n      </ButtonContainer>\n    </>\n  )\n}\n\ninterface ForSaleTableRowsProps {\n  nftsForSale: NftToken[]\n}\n\nconst ForSaleTableRow: React.FC<ForSaleTableRowsProps> = ({ nftsForSale }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const bnbBusdPrice = useBNBBusdPrice()\n  return (\n    <OwnersTableRow>\n      {nftsForSale.map((nft) => (\n        <Row key={nft.tokenId} t={t} nft={nft} bnbBusdPrice={bnbBusdPrice} account={account} />\n      ))}\n    </OwnersTableRow>\n  )\n}\n\nexport default ForSaleTableRow\n","import { Spinner, Text } from '@pancakeswap/uikit'\nimport React from 'react'\nimport styled, { keyframes } from 'styled-components'\n\nconst countdownAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0px;\n  }\n  to {\n    stroke-dashoffset: 113px;\n  }\n`\n\nconst CountdownContainer = styled.div`\n  position: relative;\n  margin: auto;\n  height: 40px;\n  width: 40px;\n  text-align: center;\n\n  & svg {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 40px;\n    height: 40px;\n    transform: rotateY(-180deg) rotateZ(-90deg);\n\n    & circle {\n      stroke-dasharray: 113px;\n      stroke-dashoffset: 0px;\n      stroke-linecap: round;\n      stroke-width: 2px;\n      stroke: ${({ theme }) => theme.colors.primaryBright};\n      fill: none;\n      animation: ${countdownAnimation} 10s linear infinite forwards;\n    }\n  }\n`\n\ninterface CountdownCircleProps {\n  secondsRemaining: number\n  isUpdating: boolean\n}\n\nconst CountdownCircle: React.FC<CountdownCircleProps> = ({ secondsRemaining, isUpdating }) => {\n  if (secondsRemaining < 1 || isUpdating) {\n    return <Spinner size={42} />\n  }\n  return (\n    <CountdownContainer>\n      <Text color=\"textSubtle\" lineHeight=\"40px\" display=\"inline-block\">\n        {secondsRemaining}\n      </Text>\n      <svg>\n        <circle r=\"18\" cx=\"20\" cy=\"20\" />\n      </svg>\n    </CountdownContainer>\n  )\n}\n\nexport default CountdownCircle\n","import React, { useEffect, useState } from 'react'\nimport { Flex, useTooltip } from '@pancakeswap/uikit'\nimport { useLoadingState } from 'state/nftMarket/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CountdownCircle from './CountdownCircle'\n\nconst UpdateIndicator = () => {\n  const { t } = useTranslation()\n  const [secondsRemaining, setSecondsRemaining] = useState(10)\n  const { isUpdatingPancakeBunnies: isFetchingMorePancakeBunnies } = useLoadingState()\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(t('Items in the table update every 10 seconds'), {\n    placement: 'auto',\n  })\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setSecondsRemaining((prev) => prev - 1)\n    }, 1000)\n\n    return () => {\n      clearInterval(intervalId)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!isFetchingMorePancakeBunnies) {\n      setSecondsRemaining(10)\n    }\n  }, [isFetchingMorePancakeBunnies])\n\n  return (\n    <Flex justifyContent=\"center\" ref={targetRef}>\n      <CountdownCircle secondsRemaining={secondsRemaining} isUpdating={isFetchingMorePancakeBunnies} />\n      {tooltipVisible && tooltip}\n    </Flex>\n  )\n}\n\nexport default UpdateIndicator\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport {\n  Flex,\n  Card,\n  Grid,\n  SellIcon,\n  Text,\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  useMatchBreakpoints,\n  ArrowUpIcon,\n  ArrowDownIcon,\n  Button,\n  Spinner,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport { NftToken } from 'state/nftMarket/types'\nimport ForSaleTableRows from './ForSaleTableRows'\nimport { StyledSortButton, TableHeading } from '../../shared/styles'\nimport UpdateIndicator from './UpdateIndicator'\nimport { Arrow, PageButtons } from '../../../../components/PaginationButtons'\n\nconst ITEMS_PER_PAGE_DESKTOP = 10\nconst ITEMS_PER_PAGE_MOBILE = 5\n\nconst StyledCard = styled(Card)<{ hasManyPages: boolean }>`\n  width: 100%;\n  & > div:first-child {\n    ${({ hasManyPages }) => (hasManyPages ? 'min-height: 480px;' : null)}\n    display: flex;\n    flex-direction: column;\n    ${({ theme }) => theme.mediaQueries.md} {\n      ${({ hasManyPages }) => (hasManyPages ? 'min-height: 850px;' : null)}\n    }\n  }\n`\n\ninterface ForSaleTableCardProps {\n  nftsForSale: NftToken[]\n  bunnyId: string\n  totalForSale: number\n  priceSort: 'asc' | 'desc'\n  isFetchingMoreNfts: boolean\n  togglePriceSort: () => void\n  loadMore: (orderDirection: 'asc' | 'desc') => void\n}\n\nconst ForSaleTableCard: React.FC<ForSaleTableCardProps> = ({\n  nftsForSale,\n  bunnyId,\n  totalForSale,\n  loadMore,\n  isFetchingMoreNfts,\n  priceSort,\n  togglePriceSort,\n}) => {\n  const [page, setPage] = useState(1)\n  const { isMobile } = useMatchBreakpoints()\n  const itemsPerPage = isMobile ? ITEMS_PER_PAGE_MOBILE : ITEMS_PER_PAGE_DESKTOP\n\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  useEffect(() => {\n    // If user clicks on other NFT at the bottom of the page - load new NFT table starting on page 1\n    // Same for reversing sorting direction\n    setPage(1)\n  }, [bunnyId, priceSort])\n\n  const needsExtraPage = nftsForSale.length % itemsPerPage !== 0\n  let maxPage = Math.floor(nftsForSale.length / itemsPerPage)\n  if (needsExtraPage) {\n    maxPage += 1\n  }\n\n  const nftsOnCurrentPage = nftsForSale.slice((page - 1) * itemsPerPage, page * itemsPerPage)\n\n  const switchPage = (pageNumber: number) => {\n    setPage(pageNumber)\n  }\n\n  const loadMoreHandler = () => {\n    loadMore(priceSort)\n  }\n\n  const loadMoreButton = isFetchingMoreNfts ? (\n    <Flex width=\"96px\" justifyContent=\"center\">\n      <Spinner size={32} />\n    </Flex>\n  ) : (\n    <Button variant=\"primary\" scale=\"xs\" ml=\"12px\" onClick={loadMoreHandler}>\n      {t('Load more')}\n    </Button>\n  )\n\n  return (\n    <StyledCard hasManyPages={maxPage > 1}>\n      <Grid\n        flex=\"0 1 auto\"\n        gridTemplateColumns=\"34px 1fr 48px\"\n        alignItems=\"center\"\n        height=\"72px\"\n        px=\"24px\"\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\n      >\n        <SellIcon width=\"24px\" height=\"24px\" />\n        <Text bold>{t('For Sale (%num%)', { num: totalForSale.toLocaleString() })}</Text>\n        <UpdateIndicator />\n      </Grid>\n      {nftsOnCurrentPage.length > 0 ? (\n        <>\n          <TableHeading flex=\"0 1 auto\" gridTemplateColumns=\"2fr 2fr 1fr\" py=\"12px\">\n            <StyledSortButton type=\"button\" onClick={togglePriceSort}>\n              <Flex alignItems=\"center\">\n                <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\" px=\"24px\">\n                  {t('Price')}\n                </Text>\n                {priceSort === 'asc' ? <ArrowUpIcon color=\"textSubtle\" /> : <ArrowDownIcon color=\"textSubtle\" />}\n              </Flex>\n            </StyledSortButton>\n            <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\">\n              {t('Owner')}\n            </Text>\n          </TableHeading>\n          <Flex flex=\"1 1 auto\" flexDirection=\"column\" justifyContent=\"space-between\" height=\"100%\">\n            <ForSaleTableRows nftsForSale={nftsOnCurrentPage} />\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  switchPage(page === 1 ? page : page - 1)\n                }}\n              >\n                <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n              <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n              {page === maxPage ? (\n                loadMoreButton\n              ) : (\n                <Arrow\n                  onClick={() => {\n                    switchPage(page === maxPage ? page : page + 1)\n                  }}\n                >\n                  <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n                </Arrow>\n              )}\n            </PageButtons>\n          </Flex>\n        </>\n      ) : (\n        <Flex justifyContent=\"center\" alignItems=\"center\" height=\"200px\">\n          <Text>{t('No items for sale')}</Text>\n        </Flex>\n      )}\n    </StyledCard>\n  )\n}\n\nexport default ForSaleTableCard\n","import React, { useState, useEffect, useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport sum from 'lodash/sum'\nimport Page from 'components/Layout/Page'\nimport { useFetchByBunnyIdAndUpdate, useGetAllBunniesByBunnyId } from 'state/nftMarket/hooks'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport PageLoader from 'components/Loader/PageLoader'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport useRefresh from 'hooks/useRefresh'\nimport { PANCAKE_BUNNIES_UPDATE_FREQUENCY } from 'config'\nimport { useGetCollectionDistributionPB } from 'views/Nft/market/hooks/useGetCollectionDistribution'\nimport MainPancakeBunnyCard from './MainPancakeBunnyCard'\nimport ManagePancakeBunniesCard from './ManagePancakeBunniesCard'\nimport PropertiesCard from '../shared/PropertiesCard'\nimport DetailsCard from '../shared/DetailsCard'\nimport MoreFromThisCollection from '../shared/MoreFromThisCollection'\nimport ForSaleTableCard from './ForSaleTableCard'\nimport { pancakeBunniesAddress } from '../../../constants'\nimport { sortNFTsByPriceBuilder } from './ForSaleTableCard/utils'\nimport { SortType } from '../../../types'\nimport { TwoColumnsContainer } from '../shared/styles'\n\ninterface IndividualPancakeBunnyPageProps {\n  bunnyId: string\n}\n\nconst IndividualPancakeBunnyPage: React.FC<IndividualPancakeBunnyPageProps> = ({ bunnyId }) => {\n  const { account } = useWeb3React()\n  const [nothingForSaleBunny, setNothingForSaleBunny] = useState<NftToken>(null)\n  const allBunnies = useGetAllBunniesByBunnyId(bunnyId)\n  const [priceSort, setPriceSort] = useState<SortType>('asc')\n  const previousPriceSort = usePreviousValue(priceSort)\n  const { isUpdatingPancakeBunnies, latestPancakeBunniesUpdateAt, fetchMorePancakeBunnies } =\n    useFetchByBunnyIdAndUpdate(bunnyId)\n  const { fastRefresh } = useRefresh()\n  const bunniesSortedByPrice = orderBy(allBunnies, (nft) => parseFloat(nft.marketData.currentAskPrice))\n  const allBunniesFromOtherSellers = account\n    ? bunniesSortedByPrice.filter((bunny) => bunny.marketData.currentSeller !== account.toLowerCase())\n    : bunniesSortedByPrice\n  const cheapestBunny = bunniesSortedByPrice[0]\n  const cheapestBunnyFromOtherSellers = allBunniesFromOtherSellers[0]\n\n  const { data: distributionData, isFetching: isFetchingDistribution } = useGetCollectionDistributionPB()\n\n  useEffect(() => {\n    // Fetch first 30 NFTs on page load\n    // And then query every FETCH_NEW_NFTS_INTERVAL_MS in case some new (cheaper) NFTs were listed\n    const msSinceLastUpdate = Date.now() - latestPancakeBunniesUpdateAt\n    // Check for last update is here to prevent too many request due to fetchMorePancakeBunnies updating too often\n    // (it can't be reasonably wrapper in useCallback because the tokens are updated every time you call it, which is the whole point)\n    // Since fastRefresh is 10 seconds and FETCH_NEW_NFTS_INTERVAL_MS is 8 seconds it fires every 10 seconds\n    // The difference in 2 seconds is just to prevent some edge cases when request takes too long\n    if (msSinceLastUpdate > PANCAKE_BUNNIES_UPDATE_FREQUENCY && !isUpdatingPancakeBunnies) {\n      fetchMorePancakeBunnies(priceSort)\n    }\n  }, [priceSort, fetchMorePancakeBunnies, isUpdatingPancakeBunnies, latestPancakeBunniesUpdateAt, fastRefresh])\n\n  useEffect(() => {\n    // Fetch most expensive items if user selects other sorting\n    if (previousPriceSort && previousPriceSort !== priceSort) {\n      fetchMorePancakeBunnies(priceSort)\n    }\n  }, [fetchMorePancakeBunnies, priceSort, previousPriceSort])\n\n  useEffect(() => {\n    const fetchBasicBunnyData = async () => {\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      setNothingForSaleBunny({\n        // In this case tokenId doesn't matter, this token can't be bought\n        tokenId: data[bunnyId].name,\n        name: data[bunnyId].name,\n        description: data[bunnyId].description,\n        collectionName: data[bunnyId].collection.name,\n        collectionAddress: pancakeBunniesAddress,\n        image: data[bunnyId].image,\n        attributes: [\n          {\n            traitType: 'bunnyId',\n            value: bunnyId,\n            displayType: null,\n          },\n        ],\n      })\n    }\n    // If bunny id has no listings on the market - get basic bunny info\n    if (!cheapestBunny) {\n      fetchBasicBunnyData()\n    }\n  }, [cheapestBunny, bunnyId])\n\n  const sortedNfts = useMemo(() => allBunnies.sort(sortNFTsByPriceBuilder({ priceSort })), [allBunnies, priceSort])\n\n  if (!cheapestBunny && !nothingForSaleBunny) {\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\n    // That would require tracking loading states and stuff...\n\n    // For now this if is used to show loading spinner while we're getting the data\n    return <PageLoader />\n  }\n\n  const togglePriceSort = () => {\n    setPriceSort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\n  }\n\n  const getBunnyIdRarity = () => {\n    if (distributionData && !isFetchingDistribution) {\n      const total = sum(Object.values(distributionData))\n      return (distributionData[bunnyId] / total) * 100\n    }\n    return null\n  }\n\n  const properties = cheapestBunny?.attributes || nothingForSaleBunny?.attributes\n\n  const propertyRarity = { bunnyId: getBunnyIdRarity() }\n\n  return (\n    <Page>\n      <MainPancakeBunnyCard\n        cheapestNft={cheapestBunny}\n        cheapestNftFromOtherSellers={cheapestBunnyFromOtherSellers}\n        nothingForSaleBunny={nothingForSaleBunny}\n      />\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\n        <Flex flexDirection=\"column\" width=\"100%\">\n          <ManagePancakeBunniesCard bunnyId={bunnyId} lowestPrice={cheapestBunny?.marketData?.currentAskPrice} />\n          <PropertiesCard properties={properties} rarity={propertyRarity} />\n          <DetailsCard contractAddress={pancakeBunniesAddress} ipfsJson={cheapestBunny?.marketData?.metadataUrl} />\n        </Flex>\n        <ForSaleTableCard\n          nftsForSale={sortedNfts}\n          bunnyId={bunnyId}\n          totalForSale={allBunnies.length}\n          loadMore={fetchMorePancakeBunnies}\n          priceSort={priceSort}\n          togglePriceSort={togglePriceSort}\n          isFetchingMoreNfts={isUpdatingPancakeBunnies}\n        />\n      </TwoColumnsContainer>\n      <MoreFromThisCollection\n        collectionAddress={pancakeBunniesAddress}\n        currentTokenName={cheapestBunny?.name || nothingForSaleBunny?.name}\n      />\n    </Page>\n  )\n}\n\nexport default IndividualPancakeBunnyPage\n","type sortBuilder = {\n  priceSort: string\n}\n\nexport const sortNFTsByPriceBuilder =\n  ({ priceSort }: sortBuilder) =>\n  (nftA, nftB) => {\n    const nftPriceA = Number(nftA.marketData.currentAskPrice) ?? 0\n    const nftPriceB = Number(nftB.marketData.currentAskPrice) ?? 0\n\n    return priceSort === 'asc' ? nftPriceA - nftPriceB : nftPriceB - nftPriceA\n  }\n","import React from 'react'\nimport { Flex, Box, Card, CardBody, Text, Button, BinanceIcon, Skeleton, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport { nftsBaseUrl } from '../../../constants'\nimport { RoundedImage, Container, CollectionLink } from '../shared/styles'\n\ninterface MainNFTCardProps {\n  nft: NftToken\n  isOwnNft: boolean\n  nftIsProfilePic: boolean\n}\n\nconst MainNFTCard: React.FC<MainNFTCardProps> = ({ nft, isOwnNft, nftIsProfilePic }) => {\n  const { t } = useTranslation()\n  const bnbBusdPrice = useBNBBusdPrice()\n\n  const currentAskPriceAsNumber = nft.marketData?.currentAskPrice ? parseFloat(nft.marketData.currentAskPrice) : 0\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, currentAskPriceAsNumber)\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\n  const [onPresentSellModal] = useModal(\n    <SellModal variant={nft.marketData?.isTradable ? 'edit' : 'sell'} nftToSell={nft} />,\n  )\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  const ownerButtons = (\n    <Flex>\n      <Button\n        disabled={nftIsProfilePic}\n        minWidth=\"168px\"\n        mr=\"16px\"\n        width={['100%', null, 'max-content']}\n        mt=\"24px\"\n        onClick={onPresentSellModal}\n      >\n        {nft.marketData?.isTradable ? t('Adjust price') : t('List for sale')}\n      </Button>\n      {!nft.marketData?.isTradable && (\n        <Button\n          minWidth=\"168px\"\n          variant=\"secondary\"\n          width={['100%', null, 'max-content']}\n          mt=\"24px\"\n          onClick={onEditProfileModal}\n        >\n          {nftIsProfilePic ? t('Change Profile Pic') : t('Set as Profile Pic')}\n        </Button>\n      )}\n    </Flex>\n  )\n\n  return (\n    <Card mb=\"40px\">\n      <CardBody>\n        <Container flexDirection={['column-reverse', null, 'row']}>\n          <Flex flex=\"2\">\n            <Box>\n              <CollectionLink to={`${nftsBaseUrl}/collections/${nft.collectionAddress}`}>\n                {nft.collectionName}\n              </CollectionLink>\n              <Text fontSize=\"40px\" bold mt=\"12px\">\n                {nft.name}\n              </Text>\n              <Text mt={['16px', '16px', '48px']}>{t(nft.description)}</Text>\n              <Text color=\"textSubtle\" mt={['16px', '16px', '48px']}>\n                {t('Price')}\n              </Text>\n              {currentAskPriceAsNumber > 0 ? (\n                <Flex alignItems=\"center\" mt=\"8px\">\n                  <BinanceIcon width={18} height={18} mr=\"4px\" />\n                  <Text fontSize=\"24px\" bold mr=\"4px\">\n                    {nft.marketData.currentAskPrice}\n                  </Text>\n                  {bnbBusdPrice ? (\n                    <Text color=\"textSubtle\">{`(~${priceInUsd.toLocaleString(undefined, {\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2,\n                    })} USD)`}</Text>\n                  ) : (\n                    <Skeleton width=\"64px\" />\n                  )}\n                </Flex>\n              ) : (\n                <Text>{t('Not for sale')}</Text>\n              )}\n              {nftIsProfilePic && (\n                <Text color=\"failure\">\n                  {t(\n                    'This NFT is your profile picture, you must change it to some other NFT if you want to sell this one.',\n                  )}\n                </Text>\n              )}\n              {isOwnNft && ownerButtons}\n              {!isOwnNft && (\n                <Button\n                  minWidth=\"168px\"\n                  disabled={!nft.marketData?.isTradable}\n                  mr=\"16px\"\n                  width={['100%', null, 'max-content']}\n                  mt=\"24px\"\n                  onClick={onPresentBuyModal}\n                >\n                  {t('Buy')}\n                </Button>\n              )}\n            </Box>\n          </Flex>\n          <Flex flex=\"2\" justifyContent={['center', null, 'flex-end']} alignItems=\"center\">\n            <RoundedImage src={nft.image.thumbnail} width={440} height={440} />\n          </Flex>\n        </Container>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default MainNFTCard\n","import React from 'react'\nimport {\n  Box,\n  Flex,\n  Grid,\n  Text,\n  CogIcon,\n  SellIcon,\n  WalletFilledIcon,\n  CameraIcon,\n  BinanceIcon,\n  Skeleton,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableCard from '../shared/ExpandableCard'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport ProfileNftModal from '../../../components/ProfileNftModal'\nimport { SmallRoundedImage, CollectibleRowContainer } from '../shared/styles'\n\nconst LocationColors = {\n  [NftLocation.FORSALE]: 'failure',\n  [NftLocation.WALLET]: 'secondary',\n  [NftLocation.PROFILE]: 'textSubtle',\n}\n\nconst LocationIcons = {\n  [NftLocation.FORSALE]: SellIcon,\n  [NftLocation.WALLET]: WalletFilledIcon,\n  [NftLocation.PROFILE]: CameraIcon,\n}\n\ninterface CollectibleRowProps {\n  nft: NftToken\n}\n\nconst CollectibleRow: React.FC<CollectibleRowProps> = ({ nft }) => {\n  const { t } = useTranslation()\n  const modalVariant = nft.location === NftLocation.WALLET ? 'sell' : 'edit'\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={nft} />)\n  const [onPresentModal] = useModal(<SellModal variant={modalVariant} nftToSell={nft} />)\n  return (\n    <CollectibleRowContainer\n      gridTemplateColumns=\"96px 1fr\"\n      px=\"16px\"\n      pb=\"8px\"\n      my=\"16px\"\n      onClick={nft.location === NftLocation.PROFILE ? onPresentProfileNftModal : onPresentModal}\n    >\n      <SmallRoundedImage src={nft.image.thumbnail} width={64} height={64} mx=\"16px\" />\n      <Grid gridTemplateColumns=\"1fr 1fr\">\n        <Text bold>{nft.name}</Text>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n          {nft.collectionName}\n        </Text>\n        {nft.location === NftLocation.FORSALE ? (\n          <>\n            <Text small color=\"textSubtle\">\n              {t('Your price')}\n            </Text>\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\n              <Text small>{nft.marketData.currentAskPrice}</Text>\n            </Flex>\n          </>\n        ) : (\n          <Text small color=\"textDisabled\">\n            {t('Not on sale')}\n          </Text>\n        )}\n      </Grid>\n    </CollectibleRowContainer>\n  )\n}\n\ninterface CollectibleByLocationProps {\n  nft: NftToken\n}\n\nconst CollectibleByLocation: React.FC<CollectibleByLocationProps> = ({ nft }) => {\n  const { t } = useTranslation()\n  const IconComponent = LocationIcons[nft.location]\n  return (\n    <Flex flexDirection=\"column\">\n      <Grid gridTemplateColumns=\"32px 1fr\" px=\"16px\" pb=\"8px\">\n        <IconComponent color={LocationColors[nft.location]} width=\"24px\" height=\"24px\" />\n        <Text display=\"inline\" bold color={LocationColors[nft.location]}>\n          {t(nft.location)}\n        </Text>\n      </Grid>\n      <CollectibleRow key={nft.tokenId} nft={nft} />\n    </Flex>\n  )\n}\n\ninterface ManageNFTsCardProps {\n  nft?: NftToken\n  isLoading: boolean\n  isOwnNft: boolean\n}\n\nconst ManageNFTsCard: React.FC<ManageNFTsCardProps> = ({ nft, isLoading, isOwnNft }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const hasThisNft = isOwnNft && nft\n\n  const content = (\n    <Box pt=\"16px\">\n      {!account && (\n        <Flex mb=\"16px\" justifyContent=\"center\">\n          <ConnectWalletButton />\n        </Flex>\n      )}\n      {account && isLoading && (\n        <Box px=\"16px\" pb=\"8px\">\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n        </Box>\n      )}\n      {!isLoading && !hasThisNft && (\n        <Text px=\"16px\" pb=\"16px\" color=\"textSubtle\">\n          {t('You don’t have this item.')}\n        </Text>\n      )}\n      {!isLoading && hasThisNft && <CollectibleByLocation nft={nft} />}\n    </Box>\n  )\n  return <ExpandableCard title={t('Manage Yours')} icon={<CogIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default ManageNFTsCard\n","import { useEffect, useState } from 'react'\nimport { useContractForCollection } from 'hooks/useContract'\nimport { NftToken } from 'state/nftMarket/types'\n\nconst NOT_ON_SALE_SELLER = '0x0000000000000000000000000000000000000000'\n\nconst useNftOwner = (nft: NftToken) => {\n  const [owner, setOwner] = useState(null)\n  const [isLoadingOwner, setIsLoadingOwner] = useState(true)\n  const collectionContract = useContractForCollection(nft.collectionAddress)\n  const currentSeller = nft.marketData?.currentSeller\n  const { tokenId } = nft\n\n  useEffect(() => {\n    const getOwner = async () => {\n      try {\n        const tokenOwner = await collectionContract.ownerOf(tokenId)\n        setOwner(tokenOwner)\n      } catch (error) {\n        setOwner(null)\n      } finally {\n        setIsLoadingOwner(false)\n      }\n    }\n\n    if (currentSeller && currentSeller !== NOT_ON_SALE_SELLER) {\n      setOwner(currentSeller)\n      setIsLoadingOwner(false)\n    } else {\n      getOwner()\n    }\n  }, [currentSeller, collectionContract, tokenId])\n\n  return { owner, isLoadingOwner }\n}\n\nexport default useNftOwner\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Card, Grid, SellIcon, Text, useModal, Box, BinanceIcon, Skeleton, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { formatNumber } from 'utils/formatBalance'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useNftOwner from 'views/Nft/market/hooks/useNftOwner'\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport ProfileCell from '../../../components/ProfileCell'\nimport { ButtonContainer, TableHeading } from '../shared/styles'\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n  & > div:first-child {\n    display: flex;\n    flex-direction: column;\n  }\n`\n\nconst OwnerRow = styled(Grid)`\n  grid-template-columns: 2fr 2fr 1fr;\n  grid-row-gap: 16px;\n  margin-top: 16px;\n  margin-bottom: 8px;\n  align-itmes: center;\n`\n\ninterface OwnerCardProps {\n  nft: NftToken\n  isOwnNft: boolean\n  nftIsProfilePic: boolean\n}\n\nconst OwnerCard: React.FC<OwnerCardProps> = ({ nft, isOwnNft, nftIsProfilePic }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const bnbBusdPrice = useBNBBusdPrice()\n\n  const { owner, isLoadingOwner } = useNftOwner(nft)\n\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nft.marketData?.currentAskPrice))\n\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\n  const [onPresentAdjustPriceModal] = useModal(\n    <SellModal variant={nft.marketData?.isTradable ? 'edit' : 'sell'} nftToSell={nft} />,\n  )\n\n  return (\n    <StyledCard>\n      <Grid\n        flex=\"0 1 auto\"\n        gridTemplateColumns=\"34px 1fr\"\n        alignItems=\"center\"\n        height=\"72px\"\n        px=\"24px\"\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\n      >\n        <SellIcon width=\"24px\" height=\"24px\" />\n        <Text bold>{t('Owner')}</Text>\n      </Grid>\n      {owner && (\n        <>\n          <TableHeading flex=\"0 1 auto\" gridTemplateColumns=\"2fr 2fr 1fr\" py=\"12px\">\n            <Flex alignItems=\"center\">\n              <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\" px=\"24px\">\n                {t('Price')}\n              </Text>\n            </Flex>\n            <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\">\n              {t('Owner')}\n            </Text>\n          </TableHeading>\n          <OwnerRow>\n            <Box pl=\"24px\">\n              {nft.marketData?.isTradable ? (\n                <>\n                  <Flex justifySelf=\"flex-start\" alignItems=\"center\" width=\"max-content\">\n                    <BinanceIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\n                    <Text bold>{formatNumber(parseFloat(nft.marketData.currentAskPrice), 0, 3)}</Text>\n                  </Flex>\n                  {bnbBusdPrice ? (\n                    <Text fontSize=\"12px\" color=\"textSubtle\">\n                      {`(~${formatNumber(priceInUsd, 2, 2)} USD)`}\n                    </Text>\n                  ) : (\n                    <Skeleton width=\"86px\" height=\"12px\" mt=\"4px\" />\n                  )}\n                </>\n              ) : (\n                <Flex alignItems=\"center\" height=\"100%\">\n                  <Text>{t('Not for sale')}</Text>\n                </Flex>\n              )}\n            </Box>\n            <Box>\n              <Flex width=\"max-content\" alignItems=\"center\">\n                <ProfileCell accountAddress={owner.toLowerCase()} />\n              </Flex>\n            </Box>\n            <ButtonContainer>\n              {isOwnNft ? (\n                <Button\n                  disabled={nftIsProfilePic}\n                  scale=\"sm\"\n                  variant=\"secondary\"\n                  maxWidth=\"128px\"\n                  onClick={onPresentAdjustPriceModal}\n                >\n                  {nft.marketData?.isTradable ? t('Manage') : t('Sell')}\n                </Button>\n              ) : (\n                <Button\n                  disabled={!nft.marketData?.isTradable}\n                  scale=\"sm\"\n                  variant=\"secondary\"\n                  maxWidth=\"128px\"\n                  onClick={onPresentBuyModal}\n                >\n                  {t('Buy')}\n                </Button>\n              )}\n            </ButtonContainer>\n          </OwnerRow>\n        </>\n      )}\n      {isLoadingOwner && <Skeleton />}\n      {!isLoadingOwner && !owner && (\n        <Flex justifyContent=\"center\" alignItems=\"center\" height=\"200px\">\n          <Text>{t('Owner information is not available for this item')}</Text>\n        </Flex>\n      )}\n    </StyledCard>\n  )\n}\n\nexport default OwnerCard\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex } from '@pancakeswap/uikit'\nimport sum from 'lodash/sum'\nimport Page from 'components/Layout/Page'\nimport { getNftApi, getNftsMarketData } from 'state/nftMarket/helpers'\nimport { NftLocation, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\nimport PageLoader from 'components/Loader/PageLoader'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport MainNFTCard from './MainNFTCard'\nimport ManageNFTsCard from './ManageNFTsCard'\nimport useFetchUserNfts from '../../../Profile/hooks/useFetchUserNfts'\nimport { TwoColumnsContainer } from '../shared/styles'\nimport PropertiesCard from '../shared/PropertiesCard'\nimport DetailsCard from '../shared/DetailsCard'\nimport useGetCollectionDistribution from '../../../hooks/useGetCollectionDistribution'\nimport OwnerCard from './OwnerCard'\nimport MoreFromThisCollection from '../shared/MoreFromThisCollection'\n\ninterface IndividualNFTPageProps {\n  collectionAddress: string\n  tokenId: string\n}\n\nconst IndividualNFTPage: React.FC<IndividualNFTPageProps> = ({ collectionAddress, tokenId }) => {\n  const [nft, setNft] = useState<NftToken>(null)\n  const [isOwnNft, setIsOwnNft] = useState(false)\n\n  const { data: distributionData, isFetching: isFetchingDistribution } = useGetCollectionDistribution(collectionAddress)\n\n  const { account } = useWeb3React()\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\n  useFetchUserNfts(account)\n\n  useEffect(() => {\n    const fetchNftData = async () => {\n      const metadata = await getNftApi(collectionAddress, tokenId)\n      const [marketData] = await getNftsMarketData({ collection: collectionAddress.toLowerCase(), tokenId }, 1)\n      setNft({\n        tokenId,\n        collectionAddress,\n        collectionName: metadata.collection.name,\n        name: metadata.name,\n        description: metadata.description,\n        image: metadata.image,\n        attributes: metadata.attributes,\n        marketData,\n      })\n    }\n    if (userNftsInitializationState === UserNftInitializationState.INITIALIZED) {\n      const nftOwnedByConnectedUser = userNfts.find(\n        (userNft) =>\n          userNft.collectionAddress.toLowerCase() === collectionAddress.toLowerCase() && userNft.tokenId === tokenId,\n      )\n      if (nftOwnedByConnectedUser) {\n        // If user is the ownerwe already have all needed data available\n        setNft(nftOwnedByConnectedUser)\n        setIsOwnNft(true)\n      } else {\n        // Get metadata and market data separately if connected user is not the owner\n        fetchNftData()\n      }\n    }\n    if (!account) {\n      fetchNftData()\n    }\n  }, [userNfts, collectionAddress, tokenId, userNftsInitializationState, account])\n\n  if (!nft) {\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\n    // That would require tracking loading states and stuff...\n\n    // For now this if is used to show loading spinner while we're getting the data\n    return <PageLoader />\n  }\n\n  const properties = nft.attributes\n\n  const userProfilePicture = userNfts.find((userNft) => userNft.location === NftLocation.PROFILE)\n  const nftIsProfilePic = userProfilePicture\n    ? nft.tokenId === userProfilePicture.tokenId && nft.collectionAddress === userProfilePicture.collectionAddress\n    : false\n\n  const getAttributesRarity = () => {\n    if (distributionData && !isFetchingDistribution) {\n      return Object.keys(distributionData).reduce((rarityMap, traitType) => {\n        const total = sum(Object.values(distributionData[traitType]))\n        const nftAttributeValue = nft.attributes.find((attribute) => attribute.traitType === traitType)?.value\n        const count = distributionData[traitType][nftAttributeValue]\n        const rarity = (count / total) * 100\n        return {\n          ...rarityMap,\n          [traitType]: rarity,\n        }\n      }, {})\n    }\n    return {}\n  }\n\n  return (\n    <Page>\n      <MainNFTCard nft={nft} isOwnNft={isOwnNft} nftIsProfilePic={nftIsProfilePic} />\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\n        <Flex flexDirection=\"column\" width=\"100%\">\n          <ManageNFTsCard\n            nft={nft}\n            isOwnNft={isOwnNft}\n            isLoading={userNftsInitializationState !== UserNftInitializationState.INITIALIZED}\n          />\n          <PropertiesCard properties={properties} rarity={getAttributesRarity()} />\n          <DetailsCard contractAddress={collectionAddress} ipfsJson={nft?.marketData?.metadataUrl} />\n        </Flex>\n        <OwnerCard nft={nft} isOwnNft={isOwnNft} nftIsProfilePic={nftIsProfilePic} />\n      </TwoColumnsContainer>\n      <MoreFromThisCollection collectionAddress={collectionAddress} currentTokenName={nft.name} />\n    </Page>\n  )\n}\n\nexport default IndividualNFTPage\n","import React from 'react'\nimport { useParams } from 'react-router'\nimport { pancakeBunniesAddress } from '../../constants'\nimport IndividualPancakeBunnyPage from './PancakeBunnyPage'\nimport IndividualNFTPage from './OneOfAKindNftPage'\n\nconst IndividualNFTPageRouter = () => {\n  // For PancakeBunnies tokenId in url is really bunnyId\n  const { collectionAddress, tokenId } = useParams<{ collectionAddress: string; tokenId: string }>()\n\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n  if (isPBCollection) {\n    return <IndividualPancakeBunnyPage bunnyId={tokenId} />\n  }\n\n  return <IndividualNFTPage collectionAddress={collectionAddress} tokenId={tokenId} />\n}\n\nexport default IndividualNFTPageRouter\n","var baseSum = require('./_baseSum'),\n    identity = require('./identity');\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n","import { useEffect, useState } from 'react'\nimport { getCollectionDistributionApi } from 'state/nftMarket/helpers'\nimport { ApiCollectionDistribution, ApiCollectionDistributionPB } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\ninterface State {\n  isFetching: boolean\n  data: ApiCollectionDistribution['data']\n}\n\nconst useGetCollectionDistribution = (collectionAddress: string) => {\n  const [state, setState] = useState<State>({ isFetching: false, data: null })\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      setState((prevState) => ({ ...prevState, isFetching: true }))\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistribution>(collectionAddress)\n      setState({\n        isFetching: false,\n        data: apiResponse.data,\n      })\n    }\n\n    fetchTokens()\n  }, [collectionAddress, setState])\n\n  return state\n}\n\ninterface StatePB {\n  isFetching: boolean\n  data: ApiCollectionDistributionPB['data']\n}\n\nexport const useGetCollectionDistributionPB = () => {\n  const [state, setState] = useState<StatePB>({ isFetching: false, data: null })\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      setState((prevState) => ({ ...prevState, isFetching: true }))\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistributionPB>(pancakeBunniesAddress)\n      setState({\n        isFetching: false,\n        data: apiResponse.data,\n      })\n    }\n\n    fetchTokens()\n  }, [setState])\n\n  return state\n}\n\nexport default useGetCollectionDistribution\n","import { useState, useEffect } from 'react'\nimport {\n  getAllPancakeBunniesLowestPrice,\n  getAllPancakeBunniesRecentUpdatedAt,\n  getNftsFromCollectionApi,\n} from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\n\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\n\n  useEffect(() => {\n    const fetchPancakeBunnies = async () => {\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      const bunnyIds = Object.keys(data)\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\n        return {\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\n          tokenId: data[bunnyId].name,\n          name: data[bunnyId].name,\n          description: data[bunnyId].description,\n          collectionAddress: pancakeBunniesAddress,\n          collectionName: data[bunnyId].collection.name,\n          image: data[bunnyId].image,\n          attributes: [\n            {\n              traitType: 'bunnyId',\n              value: bunnyId,\n              displayType: null,\n            },\n          ],\n          meta: {\n            currentAskPrice: lowestPrices[bunnyId],\n            updatedAt: latestUpdates[bunnyId],\n          },\n        }\n      })\n      setAllPancakeBunnyNfts(allBunnies)\n    }\n    if (isPBCollection && !allPancakeBunnyNfts) {\n      fetchPancakeBunnies()\n    }\n  }, [isPBCollection, allPancakeBunnyNfts])\n\n  return allPancakeBunnyNfts\n}\n\nexport default useAllPancakeBunnyNfts\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n"],"sourceRoot":""}