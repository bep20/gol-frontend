{"version":3,"sources":["views/Predictions/components/History/Header.tsx","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollPredictions.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/components/History/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/helpers.ts","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/components/RoundResult/RoundResultHistory.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/v1/helpers.ts","views/Predictions/components/v1/NothingToClaimModal.tsx","views/Predictions/components/v1/V1ClaimCheck.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/RoundProgress.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","views/Predictions/hooks/useCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/hooks/useOnViewChange.ts","views/Predictions/Positions.tsx","views/Predictions/types.ts","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/Mobile.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx","state/predictions/hooks.ts"],"names":["HistoryTabs","useGetLatestOraclePrice","useState","ethers","BigNumber","from","price","setPrice","useLastUpdated","lastUpdated","refresh","setLastUpdated","useEffect","a","contract","getChainlinkOracleContract","latestAnswer","response","fetchPrice","usePollOraclePrice","seconds","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollPredictions","useRef","account","useWeb3React","currentEpoch","useGetCurrentEpoch","earliestEpoch","useGetEarliestEpoch","status","useGetPredictionsStatus","current","PredictionStatus","INITIAL","liveCurrentAndRecent","fetchRounds","fetchMarketData","epochRange","range","fetchLedgerData","epochs","fetchClaimableStatuses","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","predictionStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","TRADING_VIEW_COMPONENT_ID","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","ele","document","getElementById","debouncedOnResize","debounce","resizeObserver","ResizeObserver","observe","unobserve","code","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","getMultiplier","total","amount","getPayout","rewardRate","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getNetPayout","payout","Modal","ModalContainer","CollectRoundWinningsModal","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","callWithGasPrice","useCallWithGasPrice","predictionsContract","usePredictionsContract","bnbBusdPrice","useBNBBusdPrice","isLoadingHistory","useGetIsFetchingHistory","history","useGetHistory","reduce","accum","betPayout","REWARD_RATE","epoch","calculateClaimableRounds","totalBnb","multiplyPriceByAmount","fetchNodeHistory","handleClick","tx","wait","receipt","markAsCollected","Toast","txHash","transactionHash","console","error","data","message","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","fontSize","toFixed","rounds","join","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","handleReclaim","MIN_PRICE_USD_DISPLAYED","MIN_PRICE_BNB_DISPLAYED","formatPriceDifference","minPriceDisplayed","unitPrefix","decimals","sign","isNegative","abs","lt","signedPriceToFormat","mul","formatBigNumberToFixed","formatUsdv2","formatBnbv2","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","minutesSeconds","getHasRoundFailed","buffer","closeTimestampMs","closeTimestamp","now","Date","oracleCalled","getMultiplierV2","FixedNumber","eq","rewardAmountFixed","multiplierAmountFixed","divUnsafe","getPriceDifference","lockPrice","sub","getRoundPosition","closePrice","HOUSE","gt","BEAR","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","useTooltip","bold","placement","targetRef","tooltip","tooltipVisible","fontWeight","getPrizePoolAmount","Row","PrizePoolRow","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","Background","Box","isNext","isLive","hasEntered","success","failure","textDisabled","cardBorder","StyledRoundResultBox","card","background","RoundResultBox","RoundPrice","priceDifference","getTextColor","my","getPrizePoolAmountHistory","PrizePoolHistoryRow","LockPriceHistoryRow","RoundResult","hasFailed","isPositionUp","failed","useIsRefundable","isRefundable","setIsRefundable","getPredictionsContract","refundable","ledger","fetchRefundableStatus","StyledBetResult","Divider","hr","BetResult","result","canClaim","useGetIsClaimable","fee","isWinner","Result","WIN","totalPayout","returned","getHeaderColor","LOSE","CANCELED","handleSuccess","getHeaderText","getHeaderIcon","claimedHash","href","getBscScanLink","getResultColor","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","LIVE","RoundResultHistory","lockBlock","external","closeBlock","StyledBet","attrs","YourResult","HistoricalBet","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","role","scale","Filter","label","StyledHeader","bubblegum","ButtonMenuContainer","Header","activeTab","setActiveTab","historyFilter","useGetHistoryFilter","isFetchingHistory","handleChange","newFilter","setHistoryFilter","switchTab","tabIndex","HistoryFilter","ALL","size","activeIndex","onItemClick","ROUNDS","checked","onChange","COLLECTED","UNCOLLECTED","getV1History","skip","where","request","GRAPH_API_PREDICTION_V1","gql","getAllV1History","reject","getHistoryChunk","betHistory","flatten","values","isFetching","setIsFetching","setHistory","fetchAllHistory","header","rows","hash","totalBets","anchor","createElement","blob","Blob","type","URL","createObjectURL","target","download","body","appendChild","click","removeChild","StyledClaimCheck","ClaimCheck","NothingToClaimModal","onPresentNothingToClaimModal","Loading","RoundsTab","hasBetHistory","hasHistoryLoaded","useGetHasHistoryLoaded","currentHistoryPage","useGetCurrentHistoryPage","V1ClaimCheck","orderBy","map","page","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","summary","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","amountInUsd","flexDirection","toLocaleLowerCase","backgroundDisabled","initialPnlSummary","bestRound","PnlTab","getPnlSummary","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","netResultInUsd","avgBnbWonInUsd","betRoundInUsd","avgPositionEnteredInUsd","pb","pl","roundId","StyledHistory","BetWrapper","SpinnerWrapper","History","results","getFilteredBets","activeTabComponent","PNL","ConnectWalletButton","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","EnteredTag","whiteSpace","outline","ArrowWrapper","Content","EnteredTagWrapper","fallback","isDisabled","isHouse","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","HEADER_HEIGHT","getBorderBackground","gradientStopPoint","cardHeader","warning","getTextColorByStatus","StyledCardHeader","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","CanceledRoundCard","borderBackground","CalculatingCard","hasEnteredUp","hasEnteredDown","StyledExpiredRoundCard","Card","ExpiredRoundCard","hasClaimedUp","hasClaimedDown","bufferSeconds","useGetBufferSeconds","hasRoundFailed","RoundProgress","lockTimestamp","startMs","endMs","rawProgress","progress","primaryStep","LiveRoundCard","useGetLastOraclePrice","isBull","priceColor","priceAsNumber","parseFloat","useCountUp","start","end","duration","countUp","update","updateRef","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","dust","parseUnits","percentShortcuts","getValueAsEthersBn","valueAsFloat","Number","isNaN","SetPositionCard","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","percent","setPercent","bnbBalance","useGetBnbBalance","balance","minBetAmount","useGetMinBetAmount","maxBalance","useMemo","balanceDisplay","formatBigNumber","valueAsBn","showFieldWarning","handlePercentChange","sliderPercent","maxValueAsFn","hundredAsFn","sliderPercentAsFn","balancePercentage","mulUnsafe","formatFixedNumber","minBetAmountBalance","lte","key","getButtonProps","handleEnterPosition","betMethod","inputAmount","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","inputAsBn","inputAsFn","percentageAsFloat","toUnsafeFloat","isWarning","inputProps","name","min","max","onValueChanged","valueLabel","step","percentShortcut","OpenRoundCard","isSettingPosition","state","setState","isBufferPhase","ROUND_BUFFER","positionDisplay","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","getNow","Math","floor","useCountdown","timestamp","secondsRemaining","setSecondsRemaining","isPaused","setIsPaused","isWindowVisible","useIsWindowVisible","pause","useCallback","unpause","setTimeout","prevSecondsRemaining","clearTimeout","SoonRoundCard","intervalSeconds","useGetIntervalSeconds","startTimestamp","countdown","RoundCard","useGetBetByEpoch","formattedBullMultiplier","isZero","formattedBearMultiplier","Token","lg","Title","Text","ClosingTitle","sm","Price","Interval","Label","shadows","level1","dir","radii","PricePairLabel","display","TimerLabel","unit","currentRoundLockTimestamp","useGetCurrentRoundLockTimestamp","pr","StyledPrevNextNav","default","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","LeaderboardButtonWrapper","ButtonWrapper","Menu","rel","Link","to","order","useOnNextRound","previousEpoch","usePreviousValue","useOnViewChange","liveSwiperIndex","view","prevView","usePrevious","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","previousRound","find","swiperIndex","indexOf","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","Ul","ul","ChartDisclaimer","useUserPredictionChartDisclaimerShow","showDisclaimer","setShowDisclaimer","Predictions","isDesktop","useMatchBreakpoints","useUserPredictionAcceptedRisk","hasAcceptedRisk","setHasAcceptedRisk","initialBlock","useInitialBlock","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","initializePredictions","PageLoader","Page","useGetRounds","useSelector","predictions","keys","parseBigNumberObj","roundData","ledgers","claimableStatuses","earliestRound","minBy","lastOraclePrice","currentRound","useGetCurrentRound","useGetLeaderboardLoadingState","leaderboard","loadingState","useGetLeaderboardResults","useGetLeaderboardFilters","filters","useGetLeaderboardSkip","useGetLeaderboardHasMoreResults","hasMoreResults","useGetOrFetchLeaderboardAddressResult","addressResult","addressResults","useGetAddressResult","address","isAddress","fetchAddressResult","useGetSelectedAddress","selectedAddress"],"mappings":"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","file":"static/js/35.7b45f5db.chunk.js","sourcesContent":["import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Radio,\n  Flex,\n  Heading,\n  Text,\n  ButtonMenu,\n  ButtonMenuItem,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { HistoryFilter } from 'state/types'\nimport { setHistoryFilter, setHistoryPaneState } from 'state/predictions'\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\nconst Filter = styled.label`\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  margin-right: 16px;\n`\n\nconst StyledHeader = styled(Box)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  flex: none;\n  padding: 16px;\n`\n\nconst ButtonMenuContainer = styled.div`\n  margin-bottom: 16px;\n  width: 100%;\n  & > div {\n    width: 100%;\n  }\n\n  & button {\n    width: 100%;\n  }\n`\n\ninterface HeaderProps {\n  activeTab: HistoryTabs\n  setActiveTab: (value: HistoryTabs) => void\n}\n\nexport enum HistoryTabs {\n  ROUNDS,\n  PNL,\n}\n\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\n  const historyFilter = useGetHistoryFilter()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(false))\n  }\n\n  const handleChange = (newFilter: HistoryFilter) => async () => {\n    if (newFilter !== historyFilter) {\n      dispatch(setHistoryFilter(newFilter))\n    }\n  }\n\n  const switchTab = async (tabIndex: number) => {\n    setActiveTab(tabIndex)\n    await handleChange(HistoryFilter.ALL)()\n  }\n\n  return (\n    <StyledHeader>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Heading as=\"h3\" size=\"md\">\n          {t('History')}\n        </Heading>\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\n          {t('Close')}\n        </Button>\n      </Flex>\n      <ButtonMenuContainer>\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\n        </ButtonMenu>\n      </ButtonMenuContainer>\n      {activeTab === HistoryTabs.ROUNDS && (\n        <>\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n            {t('Filter')}\n          </Text>\n          <Flex alignItems=\"center\">\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.ALL}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.ALL)}\n              />\n              <Text ml=\"4px\">{t('All')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.COLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.COLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Collected')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\n            </Filter>\n          </Flex>\n        </>\n      )}\n    </StyledHeader>\n  )\n}\n\nexport default Header\n","import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { getChainlinkOracleContract } from 'utils/contractHelpers'\n\nconst useGetLatestOraclePrice = () => {\n  const [price, setPrice] = useState(ethers.BigNumber.from(0))\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchPrice = async () => {\n      const contract = getChainlinkOracleContract()\n      const response = await contract.latestAnswer()\n      setPrice(response)\n    }\n\n    fetchPrice()\n  }, [lastUpdated, setPrice])\n\n  return { price, lastUpdated, refresh }\n}\n\nexport default useGetLatestOraclePrice\n","import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { setLastOraclePrice } from 'state/predictions'\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\n\nconst usePollOraclePrice = (seconds = 10) => {\n  const { price, refresh } = useGetLatestOraclePrice()\n  const dispatch = useAppDispatch()\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh()\n    const timer = setInterval(() => {\n      refresh()\n    }, seconds * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [seconds, refresh])\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()))\n  }, [price, dispatch])\n}\n\nexport default usePollOraclePrice\n","import { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/predictions/hooks'\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { range } from 'lodash'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollPredictions = () => {\n  const timer = useRef<NodeJS.Timeout>(null)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const earliestEpoch = useGetEarliestEpoch()\n  const status = useGetPredictionsStatus()\n\n  useEffect(() => {\n    // Clear old timer\n    if (timer.current) {\n      clearInterval(timer.current)\n    }\n\n    if (status !== PredictionStatus.INITIAL) {\n      timer.current = setInterval(async () => {\n        const liveCurrentAndRecent = [currentEpoch, currentEpoch - 1, currentEpoch - 2]\n\n        dispatch(fetchRounds(liveCurrentAndRecent))\n        dispatch(fetchMarketData())\n\n        if (account) {\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\n        }\n      }, POLL_TIME_IN_SECONDS * 1000)\n    }\n\n    return () => {\n      if (timer.current) {\n        clearInterval(timer.current)\n      }\n    }\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\n}\n\nexport default usePollPredictions\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\n  height: calc(100vh - 64px);\n  min-height: calc(100vh - 64px);\n  overflow: hidden;\n  position: relative;\n`\n\nexport default Container\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { css, keyframes } from 'styled-components'\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { CSSTransition } from 'react-transition-group'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory } from 'state/predictions/helpers'\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\n\n/**\n * @see https://github.com/animate-css/animate.css/tree/main/source\n */\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`\n\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`\n\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`\n\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`\n\nconst Popup = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  border-radius: 32px;\n  color: #ffffff;\n  display: flex;\n  max-width: 320px;\n  padding: 16px 8px;\n`\n\nconst CollectWinningsPopup = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const ref = useRef(null)\n  const timer = useRef(null)\n  const { account } = useWeb3React()\n  const predictionStatus = useGetPredictionsStatus()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  const handleClick = () => {\n    setIsOpen(false)\n    clearInterval(timer.current)\n  }\n\n  // Check user's history for unclaimed winners\n  useEffect(() => {\n    let isCancelled = false\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\n\n        if (!isCancelled) {\n          // Filter out bets that were not winners\n          const winnerBets = bets.filter((bet) => {\n            return bet.position === bet.round.position\n          })\n\n          if (!isHistoryPaneOpen) {\n            setIsOpen(winnerBets.length > 0)\n          }\n        }\n      }, 30000)\n    }\n\n    return () => {\n      clearInterval(timer.current)\n      isCancelled = true\n    }\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\n\n  // Any time the history pane is open make sure the popup closes\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false)\n    }\n  }, [isHistoryPaneOpen, setIsOpen])\n\n  return (\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\n      <Wrapper ref={ref}>\n        <Popup>\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\n            {t('Collect Winnings')}\n          </Button>\n          <IconButton variant=\"text\" onClick={handleClick}>\n            <CloseIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n        </Popup>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default CollectWinningsPopup\n","import React, { createContext, Dispatch, useState } from 'react'\nimport SwiperCore from 'swiper'\n\ninterface Context {\n  swiper: SwiperCore\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\n  destroySwiper: () => void\n}\n\nexport const SwiperContext = createContext<Context>(undefined)\n\nconst SwiperProvider = ({ children }) => {\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\n\n  const destroySwiper = () => {\n    if (swiper) {\n      swiper.destroy()\n      setSwiper(null)\n    }\n  }\n\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\n}\n\nexport default SwiperProvider\n","import React, { useEffect } from 'react'\nimport { Box } from '@pancakeswap/uikit'\nimport { DefaultTheme, useTheme } from 'styled-components'\nimport debounce from 'lodash/debounce'\nimport { useTranslation } from 'contexts/Localization'\nimport useLastUpdated from 'hooks/useLastUpdated'\n\nconst TRADING_VIEW_COMPONENT_ID = 'tradingview_b239c'\n\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\nconst tradingViewListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'TradingView', {\n      configurable: true,\n      set(value) {\n        this.tv = value\n        resolve(value)\n      },\n    }),\n  )\n\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\n  /* eslint-disable new-cap */\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: localeCode,\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: TRADING_VIEW_COMPONENT_ID,\n  })\n}\n\nconst TradingView = () => {\n  const { currentLanguage } = useTranslation()\n  const theme = useTheme()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  useEffect(() => {\n    const ele = document.getElementById(TRADING_VIEW_COMPONENT_ID)\n\n    const debouncedOnResize = debounce(() => {\n      setLastUpdated()\n    }, 500)\n\n    const resizeObserver = new ResizeObserver(() => {\n      debouncedOnResize()\n    })\n\n    resizeObserver.observe(ele)\n\n    return () => {\n      resizeObserver.unobserve(ele)\n    }\n  }, [setLastUpdated])\n\n  useEffect(() => {\n    // @ts-ignore\n    if (window.tv) {\n      // @ts-ignore\n      initializeTradingView(window.tv, theme, currentLanguage.code)\n    } else {\n      tradingViewListener().then((tv) => {\n        initializeTradingView(tv, theme, currentLanguage.code)\n      })\n    }\n  }, [theme, currentLanguage, lastUpdated])\n\n  return (\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\n      <div id={TRADING_VIEW_COMPONENT_ID} />\n    </Box>\n  )\n}\n\nexport default TradingView\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\n\ninterface NotificationProps {\n  title: string\n}\n\n// const BunnyDecoration = styled.div`\n//   position: absolute;\n//   top: -130px; // line up bunny at the top of the modal\n//   left: 0px;\n//   text-align: center;\n//   width: 100%;\n// `\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  height: 100%;\n  justify-content: center;\n`\n\nconst CardWrapper = styled.div`\n  position: relative;\n  width: 320px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -130px;\n  left: 0px;\n  text-align: center;\n  width: 100%;\n  z-index: 5;\n`\n\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <CardWrapper>\n        <BunnyDecoration>\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\n        </BunnyDecoration>\n        <Card>\n          <CardBody>\n            <Heading mb=\"24px\">{title}</Heading>\n            {children}\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst ErrorNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n  return (\n    <Notification title={t('Error')}>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\n      </Text>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default ErrorNotification\n","import React from 'react'\nimport { Box, Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst PauseNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <Notification title={t('Markets Paused')}>\n      <Box mb=\"24px\">\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\n        <Text as=\"p\">\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\n        </Text>\n      </Box>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default PauseNotification\n","import { Bet, BetPosition } from 'state/types'\nimport { formatNumber } from 'utils/formatBalance'\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet, rewardRate = 1) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier * rewardRate\n}\n\nexport const getNetPayout = (bet: Bet, rewardRate = 1): number => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const payout = getPayout(bet, rewardRate)\n  return payout - bet.amount\n}\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  ModalCloseButton,\n  Skeleton,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { fetchNodeHistory, markAsCollected } from 'state/predictions'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useGetHistory, useGetIsFetchingHistory } from 'state/predictions/hooks'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { formatNumber } from 'utils/formatBalance'\nimport { getPayout } from './History/helpers'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  onSuccess?: () => Promise<void>\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\ninterface ClaimableRounds {\n  epochs: number[]\n  total: number\n}\n\nconst calculateClaimableRounds = (history): ClaimableRounds => {\n  if (!history) {\n    return { epochs: [], total: 0 }\n  }\n\n  return history.reduce(\n    (accum: ClaimableRounds, bet: Bet) => {\n      if (!bet.claimed && bet.position === bet.round.position) {\n        const betPayout = getPayout(bet, REWARD_RATE)\n        return {\n          ...accum,\n          epochs: [...accum.epochs, bet.round.epoch],\n          total: accum.total + betPayout,\n        }\n      }\n\n      return accum\n    },\n    { epochs: [], total: 0 },\n  )\n}\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({ onDismiss, onSuccess }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const predictionsContract = usePredictionsContract()\n  const bnbBusdPrice = useBNBBusdPrice()\n  const dispatch = useAppDispatch()\n  const isLoadingHistory = useGetIsFetchingHistory()\n  const history = useGetHistory()\n\n  const { epochs, total } = calculateClaimableRounds(history)\n  const totalBnb = multiplyPriceByAmount(bnbBusdPrice, total)\n\n  useEffect(() => {\n    // Fetch history if they have not opened the history pane yet\n    if (history.length === 0) {\n      dispatch(fetchNodeHistory({ account }))\n    }\n  }, [account, history, dispatch])\n\n  const handleClick = async () => {\n    try {\n      const tx = await callWithGasPrice(predictionsContract, 'claim', [epochs])\n      setIsPendingTx(true)\n      const receipt = await tx.wait()\n\n      // Immediately mark rounds as claimed\n      dispatch(\n        markAsCollected(\n          epochs.reduce((accum, epoch) => {\n            return { ...accum, [epoch]: true }\n          }, {}),\n        ),\n      )\n\n      if (onSuccess) {\n        await onSuccess()\n      }\n\n      onDismiss()\n      setIsPendingTx(false)\n      toastSuccess(\n        t('Winnings collected!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your prizes have been sent to your wallet')}\n        </ToastDescriptionWithTx>,\n      )\n    } catch (error) {\n      console.error('Unable to claim winnings', error)\n      toastError(\n        t('Error'),\n        error?.data?.message || t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n      )\n    } finally {\n      setIsPendingTx(false)\n    }\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text>{t('Collecting')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${formatNumber(total, 0, 4)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${totalBnb.toFixed(2)}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"center\" mb=\"24px\">\n          {isLoadingHistory ? (\n            <Skeleton height=\"21\" width=\"140px\" />\n          ) : (\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {epochs.length === 1\n                ? t('From round %round%', { round: epochs[0] })\n                : t('From rounds %rounds%', { rounds: epochs.join(', ') })}\n            </Text>\n          )}\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx || isLoadingHistory}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React from 'react'\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\n\ninterface CollectWinningsButtonProps extends ButtonProps {\n  hasClaimed: boolean\n  onSuccess?: () => Promise<void>\n}\n\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({ hasClaimed, onSuccess, children, ...props }) => {\n  const [onPresentCollectWinningsModal] = useModal(<CollectRoundWinningsModal onSuccess={onSuccess} />, false)\n\n  return (\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\n      {children}\n    </Button>\n  )\n}\n\nexport default CollectWinningsButton\n","import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const predictionsContract = usePredictionsContract()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = async () => {\n    const tx = await callWithGasPrice(predictionsContract, 'claim', [[epoch]])\n    setIsPendingTx(true)\n\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      if (onSuccess) {\n        await onSuccess()\n      }\n      setIsPendingTx(false)\n      toastSuccess(t('Position reclaimed!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n    } else {\n      setIsPendingTx(false)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || t('Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n","import { BigNumber, ethers } from 'ethers'\nimport { BetPosition, NodeRound } from 'state/types'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nconst MIN_PRICE_USD_DISPLAYED = BigNumber.from(100000)\nconst MIN_PRICE_BNB_DISPLAYED = BigNumber.from('1000000000000000')\nconst DISPLAYED_DECIMALS = 3\n\ntype formatPriceDifferenceProps = {\n  price?: BigNumber\n  minPriceDisplayed: BigNumber\n  unitPrefix: string\n  decimals: number\n}\n\nconst formatPriceDifference = ({\n  price = BigNumber.from(0),\n  minPriceDisplayed,\n  unitPrefix,\n  decimals,\n}: formatPriceDifferenceProps) => {\n  const sign = price.isNegative() ? BigNumber.from(-1) : BigNumber.from(1)\n\n  if (price.abs().lt(minPriceDisplayed)) {\n    const signedPriceToFormat = minPriceDisplayed.mul(sign)\n    return `<${unitPrefix}${formatBigNumberToFixed(signedPriceToFormat, DISPLAYED_DECIMALS, decimals)}`\n  }\n\n  return `${unitPrefix}${formatBigNumberToFixed(price, DISPLAYED_DECIMALS, decimals)}`\n}\n\nexport const formatUsdv2 = (usd: BigNumber) => {\n  return formatPriceDifference({ price: usd, minPriceDisplayed: MIN_PRICE_USD_DISPLAYED, unitPrefix: '$', decimals: 8 })\n}\n\nexport const formatBnbv2 = (bnb: BigNumber) => {\n  return formatPriceDifference({ price: bnb, minPriceDisplayed: MIN_PRICE_BNB_DISPLAYED, unitPrefix: '', decimals: 18 })\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getHasRoundFailed = (round: NodeRound, buffer: number) => {\n  const closeTimestampMs = (round.closeTimestamp + buffer) * 1000\n  const now = Date.now()\n\n  if (closeTimestampMs !== null && now > closeTimestampMs && !round.oracleCalled) {\n    return true\n  }\n\n  return false\n}\n\nexport const getMultiplierV2 = (total: ethers.BigNumber, amount: ethers.BigNumber) => {\n  if (!total) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  if (total.eq(0) || amount.eq(0)) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  const rewardAmountFixed = ethers.FixedNumber.from(total)\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount)\n\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed)\n}\n\nexport const getPriceDifference = (price: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\n  if (!price || !lockPrice) {\n    return ethers.BigNumber.from(0)\n  }\n\n  return price.sub(lockPrice)\n}\n\nexport const getRoundPosition = (lockPrice: ethers.BigNumber, closePrice: ethers.BigNumber) => {\n  if (!closePrice) {\n    return null\n  }\n\n  if (closePrice.eq(lockPrice)) {\n    return BetPosition.HOUSE\n  }\n\n  return closePrice.gt(lockPrice) ? BetPosition.BULL : BetPosition.BEAR\n}\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport {\n  ArrowUpIcon,\n  ArrowDownIcon,\n  Flex,\n  FlexProps,\n  Text,\n  useTooltip,\n  TooltipText,\n  InfoIcon,\n} from '@pancakeswap/uikit'\nimport { BetPosition } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface TagProps extends FlexProps {\n  bg?: string\n  startIcon?: ReactNode\n}\n\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\n  display: inline-flex;\n`\n\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\n\n  return (\n    <StyledTag\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderRadius=\"4px\"\n      bg={bg}\n      py=\"4px\"\n      px=\"8px\"\n      onClick={onClick}\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\n      {...props}\n    >\n      {icon}\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\n        {children}\n      </Text>\n    </StyledTag>\n  )\n}\n\ninterface PositionTagProps extends FlexProps {\n  betPosition: BetPosition\n}\n\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\n  const { t } = useTranslation()\n  const isUpPosition = betPosition === BetPosition.BULL\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Neither side wins this round')}\n      </Text>\n      <Text>\n        {t(\n          'The Locked Price & Closed Price are exactly the same (within 8 decimals), so neither side wins. All funds entered into UP and DOWN positions will go to the weekly CAKE burn.',\n        )}\n      </Text>\n    </>,\n    { placement: 'right' },\n  )\n\n  if (betPosition === BetPosition.HOUSE) {\n    return (\n      <>\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} color=\"secondary\" fontWeight=\"300\" textTransform=\"uppercase\">\n          <Flex alignItems=\"center\">\n            {t('To Burn')}\n            <InfoIcon width=\"16px\" ml=\"4px\" color=\"secondary\" />\n          </Flex>\n        </TooltipText>\n      </>\n    )\n  }\n\n  return (\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default PositionTag\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { ethers } from 'ethers'\nimport { Box, Flex, FlexProps, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition, NodeRound, Round } from 'state/types'\nimport { formatUsdv2, formatBnbv2, getRoundPosition, getPriceDifference } from '../../helpers'\nimport { formatBnb, formatUsd } from '../History/helpers'\nimport PositionTag from '../PositionTag'\n\n// PrizePoolRow\ninterface PrizePoolRowProps extends FlexProps {\n  totalAmount: NodeRound['totalAmount']\n}\n\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnbv2(totalAmount)\n}\n\nconst Row = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\n// Payout Row\ninterface PayoutRowProps extends FlexProps {\n  positionLabel: string\n  multiplier: number\n  amount: number\n}\n\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\n  const { t } = useTranslation()\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\n\n  return (\n    <Row height=\"18px\" {...props}>\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\n        {positionLabel}:\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\n        </Text>\n        <Text mx=\"4px\">|</Text>\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\n      </Flex>\n    </Row>\n  )\n}\n\ninterface LockPriceRowProps extends FlexProps {\n  lockPrice: NodeRound['lockPrice']\n}\n\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsdv2(lockPrice)}</Text>\n    </Row>\n  )\n}\n\n// RoundResultBox\ninterface RoundResultBoxProps {\n  betPosition?: BetPosition\n  isNext?: boolean\n  isLive?: boolean\n  hasEntered?: boolean\n}\n\nconst getBackgroundColor = ({\n  theme,\n  betPosition,\n  isNext,\n  isLive,\n  hasEntered,\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\n  if (isNext) {\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\n  }\n\n  if (hasEntered || isLive) {\n    return theme.colors.secondary\n  }\n\n  switch (betPosition) {\n    case BetPosition.BULL:\n      return theme.colors.success\n    case BetPosition.BEAR:\n      return theme.colors.failure\n    case BetPosition.HOUSE:\n      return theme.colors.textDisabled\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\nconst Background = styled(Box)<RoundResultBoxProps>`\n  background: ${getBackgroundColor};\n  border-radius: 16px;\n  padding: 2px;\n`\n\nconst StyledRoundResultBox = styled.div`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 14px;\n  padding: 16px;\n`\n\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\n  isNext = false,\n  hasEntered = false,\n  isLive = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\n    </Background>\n  )\n}\n\ninterface RoundPriceProps {\n  lockPrice: ethers.BigNumber\n  closePrice: ethers.BigNumber\n}\n\nexport const RoundPrice: React.FC<RoundPriceProps> = ({ lockPrice, closePrice }) => {\n  const betPosition = getRoundPosition(lockPrice, closePrice)\n  const priceDifference = getPriceDifference(closePrice, lockPrice)\n\n  const getTextColor = () => {\n    switch (betPosition) {\n      case BetPosition.BULL:\n        return 'success'\n      case BetPosition.BEAR:\n        return 'failure'\n      case BetPosition.HOUSE:\n      default:\n        return 'textDisabled'\n    }\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n      {closePrice ? (\n        <Text color={getTextColor()} bold fontSize=\"24px\">\n          {formatUsdv2(closePrice)}\n        </Text>\n      ) : (\n        <Skeleton height=\"34px\" my=\"1px\" />\n      )}\n      <PositionTag betPosition={betPosition}>{formatUsdv2(priceDifference)}</PositionTag>\n    </Flex>\n  )\n}\n\n/**\n * TODO: Remove\n *\n * This is a temporary function until we consolidate the data coming from the graph versus the node\n */\ninterface PrizePoolHistoryRowProps extends FlexProps {\n  totalAmount: number\n}\n\nconst getPrizePoolAmountHistory = (totalAmount: PrizePoolHistoryRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnb(totalAmount)\n}\n\nexport const PrizePoolHistoryRow: React.FC<PrizePoolHistoryRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmountHistory(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\ninterface LockPriceHistoryRowProps extends FlexProps {\n  lockPrice: Round['lockPrice']\n}\n\nexport const LockPriceHistoryRow: React.FC<LockPriceHistoryRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\n    </Row>\n  )\n}\n/**\n * END TEMPORARY COMPONENTS\n */\n","import React from 'react'\nimport { BoxProps, Text } from '@pancakeswap/uikit'\nimport { NodeRound } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getRoundPosition } from '../../helpers'\nimport { LockPriceRow, PrizePoolRow, RoundPrice, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: NodeRound\n  hasFailed?: boolean\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, hasFailed = false, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = getRoundPosition(lockPrice, closePrice)\n  const { t } = useTranslation()\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {hasFailed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <RoundPrice lockPrice={lockPrice} closePrice={closePrice} />\n      )}\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n      <PrizePoolRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import React from 'react'\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\nimport { BetPosition, Round } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsd } from '../History/helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceHistoryRow, PrizePoolHistoryRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: Round\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = closePrice - lockPrice\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {round.failed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n            {formatUsd(closePrice)}\n          </Text>\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceHistoryRow lockPrice={lockPrice} />}\n      <PrizePoolHistoryRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { getPredictionsContract } from 'utils/contractHelpers'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const predictionsContract = getPredictionsContract()\n      const refundable = await predictionsContract.refundable(epoch, account)\n\n      if (refundable) {\n        // Double check they have not already claimed\n        const ledger = await predictionsContract.ledger(epoch, account)\n        setIsRefundable(ledger.claimed === false)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { Bet, BetPosition } from 'state/types'\nimport { fetchLedgerData, markAsCollected } from 'state/predictions'\nimport { Result } from 'state/predictions/helpers'\nimport { useGetIsClaimable } from 'state/predictions/hooks'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { getBscScanLink } from 'utils'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport PositionTag from '../PositionTag'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\n\ninterface BetResultProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetResult = styled(Box)`\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 16px;\n  margin-bottom: 24px;\n  padding: 16px;\n`\n\nconst Divider = styled.hr`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\n  const canClaim = useGetIsClaimable(bet.round.epoch)\n  const bnbBusdPrice = useBNBBusdPrice()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <Text as=\"p\">{t('Includes your original position and your winnings, minus the %fee% fee.', { fee: '3%' })}</Text>,\n    { placement: 'auto' },\n  )\n\n  const isWinner = result === Result.WIN\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = isWinner ? getNetPayout(bet, REWARD_RATE) : bet.amount\n  const totalPayout = multiplyPriceByAmount(bnbBusdPrice, payout)\n  const returned = payout + bet.amount\n\n  const getHeaderColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'warning'\n      case Result.LOSE:\n        return 'textSubtle'\n      case Result.CANCELED:\n        return 'textDisabled'\n      case Result.HOUSE:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getHeaderText = () => {\n    switch (result) {\n      case Result.WIN:\n        return t('Win')\n      case Result.LOSE:\n        return t('Lose')\n      case Result.CANCELED:\n        return t('Canceled')\n      case Result.HOUSE:\n        return t('To Burn')\n      default:\n        return ''\n    }\n  }\n\n  const getHeaderIcon = () => {\n    switch (result) {\n      case Result.WIN:\n        return <PrizeIcon color={getHeaderColor()} />\n      case Result.LOSE:\n      case Result.CANCELED:\n        return <BlockIcon color={getHeaderColor()} />\n      default:\n        return null\n    }\n  }\n\n  const getResultColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n      case Result.HOUSE:\n      default:\n        return 'text'\n    }\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markAsCollected({ [bet.round.epoch]: true }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Heading>{t('Your History')}</Heading>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\n            {getHeaderText()}\n          </Heading>\n          {getHeaderIcon()}\n        </Flex>\n      </Flex>\n      <StyledBetResult>\n        {result === Result.WIN && !canClaim && (\n          <CollectWinningsButton hasClaimed={!canClaim} width=\"100%\" mb=\"16px\" onSuccess={handleSuccess}>\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\n          </CollectWinningsButton>\n        )}\n        {bet.claimed && bet.claimedHash && (\n          <Flex justifyContent=\"center\">\n            <LinkExternal href={getBscScanLink(bet.claimedHash, 'transaction')} mb=\"16px\">\n              {t('View on BscScan')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {result === Result.CANCELED && isRefundable && (\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\n        )}\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your direction')}:</Text>\n          <PositionTag betPosition={bet.position}>\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your position')}</Text>\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\n          <Text bold>{isWinner ? t('Your winnings') : t('Your Result')}:</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text bold color={getResultColor()}>{`${isWinner ? '+' : '-'}${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${totalPayout.toFixed(2)}`}\n            </Text>\n          </Box>\n        </Flex>\n        {isWinner && (\n          <>\n            <Divider />\n            <Flex alignItems=\"start\" justifyContent=\"space-between\">\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {t('Amount to collect')}:\n              </Text>\n              <Flex justifyContent=\"end\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">{`${formatBnb(returned)} BNB`}</Text>\n                <span ref={targetRef}>\n                  <InfoIcon color=\"textSubtle\" ml=\"4px\" />\n                </span>\n              </Flex>\n              {tooltipVisible && tooltip}\n            </Flex>\n          </>\n        )}\n      </StyledBetResult>\n    </>\n  )\n}\n\nexport default BetResult\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\nimport { Result } from 'state/predictions/helpers'\nimport { PayoutRow, RoundResultHistory } from '../RoundResult'\nimport BetResult from './BetResult'\nimport { getMultiplier } from './helpers'\n\ninterface BetDetailsProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetDetails = styled.div`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 24px;\n`\n\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const { totalAmount, bullAmount, bearAmount } = bet.round\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  return (\n    <StyledBetDetails>\n      {result === Result.CANCELED && (\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\n          {t(\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\n          )}\n        </Text>\n      )}\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\n      <RoundResultHistory round={bet.round} mb=\"24px\">\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\n      </RoundResultHistory>\n      {bet.round.lockBlock && (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text>{t('Opening Block')}</Text>\n          <Link href={getBscScanLink(bet.round.lockBlock, 'block')} external>\n            {bet.round.lockBlock}\n          </Link>\n        </Flex>\n      )}\n      {bet.round.closeBlock && (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Text>{t('Closing Block')}</Text>\n          <Link href={getBscScanLink(bet.round.closeBlock, 'block')} external>\n            {bet.round.closeBlock}\n          </Link>\n        </Flex>\n      )}\n    </StyledBetDetails>\n  )\n}\n\nexport default BetDetails\n","import React, { useState } from 'react'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  InfoIcon,\n  PlayCircleOutlineIcon,\n  Text,\n  useTooltip,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { useGetCurrentEpoch, useGetIsClaimable, useGetPredictionsStatus } from 'state/predictions/hooks'\nimport { fetchLedgerData, markAsCollected } from 'state/predictions'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Neither side wins this round')}\n      </Text>\n      <Text>\n        {t(\n          'The Locked Price & Closed Price are exactly the same (within 8 decimals), so neither side wins. All funds entered into UP and DOWN positions will go to the weekly CAKE burn.',\n        )}\n      </Text>\n    </>,\n    { placement: 'right' },\n  )\n\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n  const canClaim = useGetIsClaimable(bet.round.epoch)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      case Result.HOUSE:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, REWARD_RATE) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? (\n            t('Canceled')\n          ) : roundResult === Result.HOUSE ? (\n            <>\n              {tooltipVisible && tooltip}\n              <Flex alignItems=\"center\" ref={targetRef}>\n                {t('To Burn')}\n                <InfoIcon width=\"16px\" ml=\"4px\" color=\"secondary\" />\n              </Flex>\n            </>\n          ) : (\n            `${resultTextPrefix}${formatBnb(payout)}`\n          )}\n        </Text>\n      </>\n    )\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markAsCollected({ [bet.round.epoch]: true }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton hasClaimed={!canClaim} onSuccess={handleSuccess} scale=\"sm\" mr=\"8px\">\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n","import request, { gql } from 'graphql-request'\nimport flatten from 'lodash/flatten'\nimport { GRAPH_API_PREDICTION_V1 } from 'config/constants/endpoints'\n\nexport const getV1History = async (skip = 0, where = {}): Promise<Record<string, any>[]> => {\n  const response = await request(\n    GRAPH_API_PREDICTION_V1,\n    gql`\n      query getV1BetHistory($skip: Int!, $where: Bet_filter) {\n        bets(first: 1000, skip: $skip, where: $where, orderBy: createdAt, orderDirection: desc) {\n          hash\n          amount\n          position\n          claimed\n          claimedAmount\n          claimedHash\n          round {\n            epoch\n            position\n            failed\n            totalAmount\n            lockPrice\n            closePrice\n            totalBets\n            totalAmount\n          }\n        }\n      }\n    `,\n    { skip, where },\n  )\n  return response.bets\n}\n\nexport const getAllV1History = (where = {}): Promise<Record<string, any>[]> => {\n  return new Promise((resolve, reject) => {\n    const bets = {}\n\n    const getHistoryChunk = async (skip: number) => {\n      try {\n        const betHistory = await getV1History(skip, where)\n        bets[skip] = betHistory\n\n        if (betHistory.length === 0) {\n          resolve(flatten(Object.values(bets)))\n        } else {\n          getHistoryChunk(skip + 1000)\n        }\n      } catch (error) {\n        reject(error)\n      }\n    }\n\n    getHistoryChunk(0)\n  })\n}\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Text,\n  Heading,\n  ModalCloseButton,\n  Button,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getAllV1History } from './helpers'\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst CollectRoundWinningsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const [isFetching, setIsFetching] = useState(false)\n  const [history, setHistory] = useState([])\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    const header = [\n      'Round',\n      'Result',\n      'Your Position',\n      'Bet Amount',\n      'Transaction',\n      'Claimed Transaction',\n      'Lock Price',\n      'Close Price',\n      'Total Bets',\n      'Total Amount',\n      'Round Failed',\n    ].join(',')\n\n    const rows = history.reduce((accum, bet) => {\n      return [\n        ...accum,\n        [\n          bet.round.epoch,\n          bet.round.position,\n          bet.position,\n          bet.amount,\n          bet.hash,\n          bet.claimedHash || '',\n          bet.round.lockPrice,\n          bet.round.closePrice,\n          bet.round.totalBets,\n          bet.round.totalAmount,\n          bet.round.failed,\n        ].join(','),\n      ]\n    }, [])\n\n    const anchor = document.createElement('a')\n    const blob = new Blob([`${header}\\n${rows.join('\\n')}`], {\n      type: 'text/csv;charset=utf-8;',\n    })\n\n    anchor.href = URL.createObjectURL(blob)\n    anchor.target = '_blank'\n    anchor.download = 'pancakeswap-prediction-v1-history.csv'\n\n    document.body.appendChild(anchor)\n    anchor.click()\n    document.body.removeChild(anchor)\n  }\n\n  useEffect(() => {\n    const fetchAllHistory = async () => {\n      setIsFetching(true)\n\n      try {\n        const response = await getAllV1History({ user: account.toLowerCase() })\n        setHistory(response)\n      } catch (error) {\n        console.error('Unable to fetch history', error)\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    if (account) {\n      fetchAllHistory()\n    }\n  }, [account, setHistory, setIsFetching])\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Nothing to Collect')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <Text as=\"p\" fontSize=\"14px\">\n          {t('You have no unclaimed v0.1 prizes.')}\n        </Text>\n        <Text as=\"p\" fontSize=\"14px\" mb=\"24px\">\n          {t('Download your v0.1 Prediction history below.')}\n        </Text>\n        <Button\n          onClick={handleClick}\n          isLoading={isFetching}\n          endIcon={isFetching ? <AutoRenewIcon spin width=\"24px\" color=\"white\" /> : null}\n        >\n          {t('Download .CSV')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Box, Flex, Text, ChevronRightIcon, useModal } from '@pancakeswap/uikit'\nimport Loading from 'components/Loading'\nimport CollectRoundWinningsModal from '../CollectRoundWinningsModal'\nimport { getAllV1History } from './helpers'\nimport NothingToClaimModal from './NothingToClaimModal'\n\nconst StyledClaimCheck = styled(Flex)`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n  justify-content: space-between;\n  padding: 16px;\n`\n\nconst ClaimCheck = () => {\n  const [isFetching, setIsFetching] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const [onPresentCollectWinningsModal] = useModal(<CollectRoundWinningsModal />, false)\n\n  const [onPresentNothingToClaimModal] = useModal(<NothingToClaimModal />)\n\n  const handleClick = async () => {\n    try {\n      setIsFetching(true)\n      const betHistory = await getAllV1History({ user: account.toLowerCase(), claimed: false })\n\n      // Filter out bets that can be claimed\n      const unclaimedBets = betHistory.filter((bet) => {\n        return bet.round.position === bet.position || bet.round.failed === true\n      })\n\n      if (unclaimedBets.length > 0) {\n        onPresentCollectWinningsModal()\n      } else {\n        onPresentNothingToClaimModal()\n      }\n    } catch (error) {\n      console.error('Unable to check v1 history', error)\n    } finally {\n      setIsFetching(false)\n    }\n  }\n\n  return (\n    <StyledClaimCheck onClick={account ? handleClick : undefined}>\n      <Box style={{ flex: 1 }}>\n        <Text>{t('Showing history for Prediction v0.2')}</Text>\n        <Flex alignItems=\"center\">\n          <Text color=\"primary\">{t('Check for unclaimed v0.1 winnings')}</Text>\n          <ChevronRightIcon color=\"primary\" width=\"24px\" />\n        </Flex>\n      </Box>\n      {isFetching && (\n        <Box px=\"16px\">\n          <Loading />\n        </Box>\n      )}\n    </StyledClaimCheck>\n  )\n}\n\nexport default ClaimCheck\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { orderBy } from 'lodash'\nimport { Box, Button, Flex, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { Bet } from 'state/types'\nimport { fetchNodeHistory } from 'state/predictions'\nimport { useGetCurrentHistoryPage, useGetHasHistoryLoaded, useGetIsFetchingHistory } from 'state/predictions/hooks'\nimport HistoricalBet from './HistoricalBet'\nimport V1ClaimCheck from '../v1/V1ClaimCheck'\n\ninterface RoundsTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const hasHistoryLoaded = useGetHasHistoryLoaded()\n  const currentHistoryPage = useGetCurrentHistoryPage()\n  const isFetchingHistory = useGetIsFetchingHistory()\n\n  const handleClick = () => {\n    dispatch(fetchNodeHistory({ account, page: currentHistoryPage + 1 }))\n  }\n\n  return hasBetHistory ? (\n    <>\n      <V1ClaimCheck />\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\n        <HistoricalBet key={bet.round.epoch} bet={bet} />\n      ))}\n      {hasBetHistory && !hasHistoryLoaded && (\n        <Flex alignItems=\"center\" justifyContent=\"center\" py=\"24px\">\n          <Button variant=\"secondary\" scale=\"sm\" onClick={handleClick} disabled={isFetchingHistory}>\n            {t('View More')}\n          </Button>\n        </Flex>\n      )}\n    </>\n  ) : (\n    <>\n      <V1ClaimCheck />\n      <Box p=\"24px\">\n        <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n          {t('No prediction history available')}\n        </Heading>\n        <Text as=\"p\" textAlign=\"center\">\n          {t(\n            'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n          )}\n        </Text>\n      </Box>\n    </>\n  )\n}\n\nexport default RoundsTab\n","// @ts-nocheck\n/**\n * There is ts-nocheck at the top of this file for the following reasons:\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\n * without also messing prettier.\n *\n * I'll leave TODO: comment here to check back later if there is update to types\n *\n */\nimport styled, { keyframes } from 'styled-components'\n\ninterface SliceProps {\n  length: number\n  offset?: number\n}\n\nexport const DrawAnimation = keyframes`\n  from {\n    stroke-dasharray: 0, 339.292\n  }\n  to {\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\n  }\n`\n\nexport const OffsetAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0\n  }\n  to {\n    stroke-dashoffset: ${(props) => -props.offset};\n  }\n`\n\nexport const SVG = styled.svg`\n  width: 128px;\n  height: 128px;\n  transform: rotate(-90deg);\n`\n\nconst DefaultSlice = styled.circle<SliceProps>`\n  fill: none;\n  stroke-width: 16;\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\n`\n\nexport const LostSlice = styled(DefaultSlice)`\n  stroke: #ed4b9e;\n  animation: ${DrawAnimation} 1s ease;\n`\n\nexport const WonSlice = styled(DefaultSlice)`\n  stroke: #31d0aa;\n  stroke-dashoffset: ${(props) => -props.offset};\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  width: 128px;\n  height: 128px;\n`\n\nexport const Info = styled.div`\n  width: 128px;\n  height: 128px;\n  border-radius: 50%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 2;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\n\n/**\n * Bare minimum chart that doesn't require any external dependencies\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\n */\n\ninterface PnlChartProps {\n  won: number\n  lost: number\n}\n\n// 2 * Pi * R\nconst CIRCUMFERENCE = 339.292\n\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\n  const { t } = useTranslation()\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\n  const paintWon = CIRCUMFERENCE - paintLost\n  return (\n    <Wrapper>\n      <SVG viewBox=\"0 0 128 128\">\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\n      </SVG>\n      <Info>\n        <Text small lineHeight=\"1\">\n          {t('Won')}\n        </Text>\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\n          {won}/{won + lost}\n        </Text>\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\n          {percentageWon}%\n        </Text>\n      </Info>\n    </Wrapper>\n  )\n}\n\nexport default PnlChart\n","import React from 'react'\nimport { Price } from 'golswap-sdk'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb } from '../helpers'\n\ntype SummaryType = 'won' | 'lost' | 'entered'\n\ninterface SummaryRowProps {\n  type: SummaryType\n  summary: any\n  bnbBusdPrice: Price\n}\n\nconst summaryTypeColors = {\n  won: 'success',\n  lost: 'failure',\n  entered: 'text',\n}\n\nconst summaryTypeSigns = {\n  won: '+',\n  lost: '-',\n  entered: '',\n}\n\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\n  const { t } = useTranslation()\n\n  const color = summaryTypeColors[type]\n  const { rounds, amount } = summary[type]\n  const totalRounds = summary.entered.rounds\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\n  const displayAmount = type === 'won' ? summary[type].payout : amount\n  const amountInUsd = multiplyPriceByAmount(bnbBusdPrice, displayAmount)\n\n  return (\n    <>\n      <Text mt=\"16px\" bold color=\"textSubtle\">\n        {t(typeTranslationKey)}\n      </Text>\n      <Flex>\n        <Flex flex=\"2\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {rounds} {t('Rounds').toLocaleLowerCase()}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\n          </Text>\n        </Flex>\n        <Flex flex=\"3\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`~$${amountInUsd.toFixed(2)}`}\n          </Text>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nexport default SummaryRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { getBscScanLink } from 'utils'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { useGetCurrentEpoch } from 'state/predictions/hooks'\nimport { Bet, BetPosition } from 'state/types'\nimport { formatBnb, getMultiplier, getNetPayout } from '../helpers'\nimport PnlChart from './PnlChart'\nimport SummaryRow from './SummaryRow'\n\ninterface PnlTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\ninterface PnlCategory {\n  rounds: number\n  amount: number\n}\n\ninterface PnlSummary {\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\n  lost: PnlCategory\n  entered: PnlCategory\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 24px auto;\n  width: 100%;\n`\n\nconst initialPnlSummary: PnlSummary = {\n  won: {\n    rounds: 0,\n    amount: 0,\n    payout: 0, // net payout after all deductions\n    bestRound: {\n      id: '0',\n      payout: 0, // net payout after all deductions\n      multiplier: 0,\n    },\n  },\n  lost: {\n    rounds: 0,\n    amount: 0,\n  },\n  entered: {\n    rounds: 0,\n    amount: 0,\n  },\n}\n\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\n  return bets.reduce((summary: PnlSummary, bet) => {\n    const roundResult = getRoundResult(bet, currentEpoch)\n    if (roundResult === Result.WIN) {\n      const payout = getNetPayout(bet, REWARD_RATE)\n      let { bestRound } = summary.won\n      if (payout > bestRound.payout) {\n        const { bullAmount, bearAmount, totalAmount } = bet.round\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n        bestRound = { id: bet.round.epoch.toString(), payout, multiplier }\n      }\n      return {\n        won: {\n          rounds: summary.won.rounds + 1,\n          amount: summary.won.amount + bet.amount,\n          payout: summary.won.payout + payout,\n          bestRound,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        lost: summary.lost,\n      }\n    }\n    if (roundResult === Result.LOSE || roundResult === Result.HOUSE) {\n      return {\n        lost: {\n          rounds: summary.lost.rounds + 1,\n          amount: summary.lost.amount + bet.amount,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        won: summary.won,\n      }\n    }\n    // Ignore Canceled and Live rounds\n    return summary\n  }, initialPnlSummary)\n}\n\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const bnbBusdPrice = useBNBBusdPrice()\n\n  const summary = getPnlSummary(bets, currentEpoch)\n\n  const netResultAmount = summary.won.payout - summary.lost.amount\n  const netResultIsPositive = netResultAmount > 0\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\n\n  // Guard in case user has only lost rounds\n  const hasBestRound = summary.won.bestRound.payout !== 0\n\n  const netResultInUsd = multiplyPriceByAmount(bnbBusdPrice, netResultAmount)\n  const avgBnbWonInUsd = multiplyPriceByAmount(bnbBusdPrice, avgBnbWonPerRound)\n  const betRoundInUsd = multiplyPriceByAmount(bnbBusdPrice, summary.won.bestRound.payout)\n  const avgPositionEnteredInUsd = multiplyPriceByAmount(bnbBusdPrice, avgPositionEntered)\n\n  return hasBetHistory ? (\n    <Box p=\"16px\">\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\n        {t('Your history')}\n      </Text>\n      <Flex>\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\n          <Text bold color=\"textSubtle\">\n            {t('Net results')}\n          </Text>\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {`~$${netResultInUsd.toFixed(2)}`}\n          </Text>\n        </Flex>\n      </Flex>\n      <Box pl=\"8px\">\n        <Text mt=\"24px\" bold color=\"textSubtle\">\n          {t('Average return / round')}\n        </Text>\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\n        </Text>\n        <Text small color=\"textSubtle\">\n          {`~$${avgBnbWonInUsd.toFixed(2)}`}\n        </Text>\n\n        {hasBestRound && (\n          <>\n            <Text mt=\"16px\" bold color=\"textSubtle\">\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\n            </Text>\n            <Flex alignItems=\"flex-end\">\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\n              <Text ml=\"4px\" small color=\"textSubtle\">\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\n              </Text>\n            </Flex>\n            <Text small color=\"textSubtle\">\n              {`~$${betRoundInUsd.toFixed(2)}`}\n            </Text>\n          </>\n        )}\n\n        <Text mt=\"16px\" bold color=\"textSubtle\">\n          {t('Average position entered / round')}\n        </Text>\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\n        <Text small color=\"textSubtle\">\n          {`~$${avgPositionEnteredInUsd.toFixed(2)}`}\n        </Text>\n\n        <Divider />\n\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          <Link href={`${getBscScanLink(account, 'address')}#internaltx`} mb=\"16px\" external>\n            <Button mt=\"8px\" width=\"100%\">\n              {t('View Reclaimed & Won')}\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\n            </Button>\n          </Link>\n        </Flex>\n      </Box>\n    </Box>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default PnlTab\n","import React, { useEffect, useState } from 'react'\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchNodeHistory } from 'state/predictions'\nimport { getFilteredBets } from 'state/predictions/helpers'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetCurrentEpoch,\n  useGetCurrentHistoryPage,\n  useGetHistory,\n  useGetHistoryFilter,\n  useGetIsFetchingHistory,\n  useIsHistoryPaneOpen,\n} from 'state/predictions/hooks'\nimport { Header, HistoryTabs } from './components/History'\nimport RoundsTab from './components/History/RoundsTab'\nimport PnlTab from './components/History/PnlTab/PnlTab'\n\nconst StyledHistory = styled.div`\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst BetWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n  overflow-y: auto;\n  position: relative;\n`\n\nconst SpinnerWrapper = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst History = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const historyFilter = useGetHistoryFilter()\n  const currentEpoch = useGetCurrentEpoch()\n  const currentHistoryPage = useGetCurrentHistoryPage()\n  const { t } = useTranslation()\n  const bets = useGetHistory()\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\n\n  useEffect(() => {\n    if (account && isHistoryPaneOpen) {\n      dispatch(fetchNodeHistory({ account }))\n    }\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\n\n  const results = getFilteredBets(bets, historyFilter)\n  const hasBetHistory = results && results.length > 0\n\n  let activeTabComponent = null\n\n  switch (activeTab) {\n    case HistoryTabs.PNL:\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n    case HistoryTabs.ROUNDS:\n    default:\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n  }\n\n  if (!account) {\n    activeTabComponent = (\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\n        <ConnectWalletButton />\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\n      </Flex>\n    )\n  }\n\n  return (\n    <StyledHistory>\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\n      <BetWrapper>\n        {isFetchingHistory && currentHistoryPage === 1 ? (\n          <SpinnerWrapper>\n            <Spinner size={72} />\n          </SpinnerWrapper>\n        ) : (\n          activeTabComponent\n        )}\n      </BetWrapper>\n    </StyledHistory>\n  )\n}\n\nexport default History\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\ninterface MultiplierProps extends SvgProps {\n  isActive: boolean\n}\n\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1.03125\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport { CheckmarkCircleIcon, CheckmarkCircleFillIcon, Tag, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnbv2 } from '../../helpers'\n\ninterface EnteredTagProps {\n  amount?: ethers.BigNumber\n  hasClaimed?: boolean\n}\n\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount, hasClaimed = false }) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(amount)} BNB`}</div>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <span ref={targetRef}>\n        <Tag\n          variant=\"secondary\"\n          fontWeight=\"bold\"\n          textTransform=\"uppercase\"\n          outline={!hasClaimed}\n          startIcon={hasClaimed ? <CheckmarkCircleFillIcon width=\"18px\" /> : <CheckmarkCircleIcon width=\"18px\" />}\n        >\n          {hasClaimed ? t('Claimed') : t('Entered')}\n        </Tag>{' '}\n      </span>{' '}\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default EnteredTag\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport styled, { CSSProperties } from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition } from 'state/types'\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\nimport EnteredTag from './EnteredTag'\n\ninterface MultiplierArrowProps {\n  betAmount?: ethers.BigNumber\n  multiplier?: string\n  hasEntered?: boolean\n  hasClaimed?: boolean\n  betPosition?: BetPosition\n  isDisabled?: boolean\n  isActive?: boolean\n  isHouse?: boolean\n}\n\nconst ArrowWrapper = styled.div`\n  height: 65px;\n  margin: 0 auto;\n  width: 240px;\n`\n\nconst Content = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst EnteredTagWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n`\n\nconst getTextColor =\n  (fallback = 'textSubtle') =>\n  (isActive: boolean, isDisabled: boolean, isHouse: boolean) => {\n    if (isDisabled || isHouse) {\n      return 'textDisabled'\n    }\n\n    if (isActive) {\n      return 'white'\n    }\n\n    return fallback\n  }\n\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\n  betAmount,\n  multiplier,\n  hasEntered = false,\n  hasClaimed = false,\n  betPosition = BetPosition.BULL,\n  isDisabled = false,\n  isActive = false,\n  isHouse = false,\n}) => {\n  const { t } = useTranslation()\n  const upColor = getTextColor('success')(isActive, isDisabled, isHouse)\n  const downColor = getTextColor('failure')(isActive, isDisabled, isHouse)\n  const textColor = getTextColor()(isActive, isDisabled, isHouse)\n  const multiplierText = (\n    <Box>\n      <Flex justifyContent=\"center\" height=\"14px\">\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\n          {multiplier !== undefined ? `${multiplier}x` : '-'}\n        </Text>\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\n          {t('Payout')}\n        </Text>\n      </Flex>\n    </Box>\n  )\n\n  const getEnteredTag = (position: CSSProperties) => {\n    if (!hasEntered) {\n      return null\n    }\n\n    return (\n      <EnteredTagWrapper style={position}>\n        <EnteredTag amount={betAmount} hasClaimed={hasClaimed} />\n      </EnteredTagWrapper>\n    )\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return (\n      <Box mt=\"-1px\" position=\"relative\">\n        <ArrowWrapper>\n          <RoundMultiplierDownArrow isActive={isActive} />\n          {getEnteredTag({ bottom: 0, right: 0 })}\n          <Content>\n            {!isDisabled && multiplierText}\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\n              {t('Down')}\n            </Text>\n          </Content>\n        </ArrowWrapper>\n      </Box>\n    )\n  }\n\n  return (\n    <Box mb=\"-1px\" position=\"relative\">\n      <ArrowWrapper>\n        <RoundMultiplierUpArrow isActive={isActive} />\n        {getEnteredTag({ top: 0, left: 0 })}\n        <Content>\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\n            {t('Up')}\n          </Text>\n          {!isDisabled && multiplierText}\n        </Content>\n      </ArrowWrapper>\n    </Box>\n  )\n}\n\nexport default MultiplierArrow\n","import React, { ReactElement } from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled, { DefaultTheme } from 'styled-components'\n\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\n\ninterface CardHeaderProps {\n  status: Status\n  title: string\n  epoch: number\n  icon?: ReactElement\n}\n\nconst HEADER_HEIGHT = '37px'\n\n// Used to get the gradient for the card border, which depends on the header color to create the illusion\n// that header is overlapping the 1px card border.\n// 'live' is not included into the switch case because it has isActive border style\nexport const getBorderBackground = (theme: DefaultTheme, status: Status) => {\n  const gradientStopPoint = `calc(${HEADER_HEIGHT} + 1px)`\n  switch (status) {\n    case 'calculating':\n      return `linear-gradient(transparent ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint}), ${theme.colors.gradients.cardHeader}`\n    case 'canceled':\n      return `linear-gradient(${theme.colors.warning} ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint})`\n    case 'next':\n      return `linear-gradient(${theme.colors.secondary} ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint})`\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\n  switch (status) {\n    case 'calculating':\n      return theme.colors.gradients.cardHeader\n    case 'live':\n      return 'transparent'\n    case 'canceled':\n      return theme.colors.warning\n    case 'next':\n      return theme.colors.secondary\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\ntype FallbackColor = 'text' | 'textSubtle'\n\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\n  switch (status) {\n    case 'expired':\n      return 'textDisabled'\n    case 'next':\n      return 'white'\n    case 'live':\n      return 'secondary'\n    case 'canceled':\n    case 'calculating':\n      return 'text'\n    default:\n      return fallback\n  }\n}\n\nconst StyledCardHeader = styled.div<{ status: Status }>`\n  align-items: center;\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\n  display: flex;\n  justify-content: space-between;\n  height: ${HEADER_HEIGHT};\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\n`\n\nconst Round = styled.div`\n  justify-self: center;\n`\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\n  const textColor = getTextColorByStatus(status, 'text')\n  const isLive = status === 'live'\n\n  return (\n    <StyledCardHeader status={status}>\n      <Flex alignItems=\"center\">\n        {icon}\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\n          {title}\n        </Text>\n      </Flex>\n      <Round>\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\n          {`#${epoch}`}\n        </Text>\n      </Round>\n    </StyledCardHeader>\n  )\n}\n\nexport default CardHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { useGetIsClaimable } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CollectWinningsButton from '../CollectWinningsButton'\n\ninterface CollectWinningsOverlayProps {\n  epoch: number\n  isBottom?: boolean\n}\n\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\n  background-color: ${({ theme }) => theme.colors.secondary};\n  left: 0;\n  position: absolute;\n  width: 100%;\n  z-index: 30;\n\n  ${({ isBottom }) => {\n    return isBottom\n      ? `\n      border-radius: 0 0 16px 16px;\n      bottom: 0;\n    `\n      : `\n      top: 37px; // Card header height\n    `\n  }}\n`\n\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({ epoch, isBottom = false, ...props }) => {\n  const { t } = useTranslation()\n  const isClaimable = useGetIsClaimable(epoch)\n\n  if (!isClaimable) {\n    return null\n  }\n\n  return (\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n      <CollectWinningsButton hasClaimed={false} width=\"100%\">\n        {t('Collect Winnings')}\n      </CollectWinningsButton>\n    </Wrapper>\n  )\n}\n\nexport default CollectWinningsOverlay\n","import React from 'react'\nimport { Card, CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport useTheme from 'hooks/useTheme'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\n\ninterface CanceledRoundCardProps {\n  round: NodeRound\n}\n\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\n  const { epoch } = round\n\n  const handleSuccess = async () => {\n    setIsRefundable(false)\n  }\n\n  return (\n    <Card borderBackground={getBorderBackground(theme, 'canceled')}>\n      <CardHeader\n        status=\"canceled\"\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Canceled')}\n        epoch={round.epoch}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\n              {t('Round Canceled')}\n            </Text>\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\n              {t('Learn More')}\n            </LinkExternal>\n          </Flex>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CanceledRoundCard\n","import React from 'react'\nimport { Card, CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport useTheme from 'hooks/useTheme'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\n\ninterface CalculatingCardProps {\n  round: NodeRound\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n}\n\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round, hasEnteredUp, hasEnteredDown }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <Card borderBackground={getBorderBackground(theme, 'calculating')}>\n        <CardHeader\n          status=\"calculating\"\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n          title={t('Calculating')}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow isDisabled hasEntered={hasEnteredUp} />\n          <RoundResultBox>\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n              <Spinner size={96} />\n              <Flex mt=\"8px\" ref={targetRef}>\n                <TooltipText>{t('Calculating')}</TooltipText>\n                <InfoIcon ml=\"4px\" />\n              </Flex>\n            </Flex>\n          </RoundResultBox>\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled hasEntered={hasEnteredDown} />\n        </CardBody>\n      </Card>\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default CalculatingCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition, NodeLedger } from 'state/types'\nimport { useGetBufferSeconds } from 'state/predictions/hooks'\nimport useTheme from 'hooks/useTheme'\nimport { getHasRoundFailed, getRoundPosition } from '../../helpers'\nimport { RoundResult } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface ExpiredRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  hasClaimedUp: boolean\n  hasClaimedDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\nconst StyledExpiredRoundCard = styled(Card)`\n  opacity: 0.7;\n  transition: opacity 300ms;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  hasClaimedUp,\n  hasClaimedDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { epoch, lockPrice, closePrice } = round\n  const betPosition = getRoundPosition(lockPrice, closePrice)\n  const bufferSeconds = useGetBufferSeconds()\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\n\n  if (hasRoundFailed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (!closePrice) {\n    return <CalculatingCard round={round} hasEnteredDown={hasEnteredDown} hasEnteredUp={hasEnteredUp} />\n  }\n\n  return (\n    <Box position=\"relative\">\n      <StyledExpiredRoundCard borderBackground={getBorderBackground(theme, 'expired')}>\n        <CardHeader\n          status=\"expired\"\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\n          title={t('Expired')}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            isActive={betPosition === BetPosition.BULL}\n            hasEntered={hasEnteredUp}\n            hasClaimed={hasClaimedUp}\n            isHouse={betPosition === BetPosition.HOUSE}\n          />\n          <RoundResult round={round} hasFailed={hasRoundFailed} />\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            isActive={betPosition === BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n            hasClaimed={hasClaimedDown}\n            isHouse={betPosition === BetPosition.HOUSE}\n          />\n        </CardBody>\n      </StyledExpiredRoundCard>\n      <CollectWinningsOverlay epoch={epoch} isBottom={hasEnteredDown} />\n    </Box>\n  )\n}\n\nexport default ExpiredRoundCard\n","import React from 'react'\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\n\ninterface RoundProgressProps extends ProgressProps {\n  lockTimestamp: number\n  closeTimestamp: number\n}\n\nconst RoundProgress: React.FC<RoundProgressProps> = ({ lockTimestamp, closeTimestamp, ...props }) => {\n  const startMs = lockTimestamp * 1000\n  const endMs = closeTimestamp * 1000\n  const now = Date.now()\n  const rawProgress = ((now - startMs) / (endMs - startMs)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  return <Progress primaryStep={progress} {...props} />\n}\n\nexport default RoundProgress\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport {\n  Card,\n  CardBody,\n  Flex,\n  PlayCircleOutlineIcon,\n  Skeleton,\n  Text,\n  TooltipText,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetLastOraclePrice, useGetBufferSeconds } from 'state/predictions/hooks'\nimport RoundProgress from 'components/RoundProgress'\nimport { formatUsdv2, getHasRoundFailed, getPriceDifference } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader from './CardHeader'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface LiveRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, totalAmount, lockTimestamp, closeTimestamp } = round\n  const price = useGetLastOraclePrice()\n  const bufferSeconds = useGetBufferSeconds()\n\n  const isBull = lockPrice && price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n\n  const priceDifference = getPriceDifference(price, lockPrice)\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\n\n  const now = Date.now()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom',\n  })\n\n  const updateRef = useRef(update)\n\n  useEffect(() => {\n    updateRef.current(priceAsNumber)\n  }, [priceAsNumber, updateRef])\n\n  if (hasRoundFailed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (now > closeTimestamp * 1000) {\n    return <CalculatingCard round={round} hasEnteredDown={hasEnteredDown} hasEnteredUp={hasEnteredUp} />\n  }\n\n  return (\n    <Card isActive>\n      <CardHeader\n        status=\"live\"\n        icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n        title={t('Live')}\n        epoch={round.epoch}\n      />\n      <RoundProgress variant=\"flat\" scale=\"sm\" lockTimestamp={lockTimestamp} closeTimestamp={closeTimestamp} />\n      <CardBody p=\"16px\">\n        <MultiplierArrow\n          betAmount={betAmount}\n          multiplier={bullMultiplier}\n          hasEntered={hasEnteredUp}\n          isActive={isBull}\n        />\n        <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n          <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n            {t('Last Price')}\n          </Text>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n            <div ref={targetRef}>\n              <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n              </TooltipText>\n            </div>\n            <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n              {formatUsdv2(priceDifference)}\n            </PositionTag>\n          </Flex>\n          {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n          <PrizePoolRow totalAmount={totalAmount} />\n        </RoundResultBox>\n        <MultiplierArrow\n          betAmount={betAmount}\n          multiplier={bearMultiplier}\n          betPosition={BetPosition.BEAR}\n          hasEntered={hasEnteredDown}\n          isActive={!isBull}\n        />\n      </CardBody>\n      {tooltipVisible && tooltip}\n    </Card>\n  )\n}\n\nexport default LiveRoundCard\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface CardFlipProps {\n  isFlipped: boolean\n  height: string\n  children: [ReactNode, ReactNode]\n}\n\nconst Front = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transition: z-index 600ms;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Back = styled(Front)`\n  transform: rotateY(180deg);\n`\n\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\n  height: 100%;\n  position: relative;\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\n  transform-style: preserve-3d;\n  transition: transform 600ms;\n\n  ${Front} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\n  }\n\n  ${Back} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\n  }\n`\n\nconst StyledCardFlip = styled.div`\n  perspective: 1000px;\n  z-index: auto;\n`\n\nconst getComponents = (children: CardFlipProps['children']) => {\n  if (children.length !== 2) {\n    throw new Error('CardFlip: Two children are required')\n  }\n\n  return children\n}\n\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\n  const [front, back] = getComponents(children)\n\n  return (\n    <StyledCardFlip style={{ height }}>\n      <Inner isFlipped={isFlipped}>\n        <Front>{front}</Front>\n        <Back>{back}</Back>\n      </Inner>\n    </StyledCardFlip>\n  )\n}\n\nexport default CardFlip\n","import { useContext } from 'react'\nimport { SwiperContext } from '../context/SwiperProvider'\n\nconst useSwiper = () => {\n  const swiperContext = useContext(SwiperContext)\n\n  if (swiperContext === undefined) {\n    throw new Error('Swiper not found')\n  }\n\n  return swiperContext\n}\n\nexport default useSwiper\n","import styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\n\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n`\n\nexport default FlexRow\n","import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  Card,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  BinanceIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { BetPosition } from 'state/types'\nimport { formatBigNumber, formatFixedNumber } from 'utils/formatBalance'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport PositionTag from '../PositionTag'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  epoch: number\n  onBack: () => void\n  onSuccess: (hash: string) => Promise<void>\n}\n\nconst dust = parseUnits('0.01', 18)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getButtonProps = (\n  value: ethers.BigNumber,\n  bnbBalance: ethers.BigNumber,\n  minBetAmountBalance: ethers.BigNumber,\n) => {\n  const hasSufficientBalance = () => {\n    if (value.gt(0)) {\n      return value.lte(bnbBalance)\n    }\n    return bnbBalance.gt(0)\n  }\n\n  if (!hasSufficientBalance()) {\n    return { key: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0)) {\n    return { key: 'Enter an amount', disabled: true }\n  }\n\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst getValueAsEthersBn = (value: string) => {\n  const valueAsFloat = parseFloat(value)\n  return Number.isNaN(valueAsFloat) ? ethers.BigNumber.from(0) : parseUnits(value)\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, epoch, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [percent, setPercent] = useState(0)\n\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: bnbBalance } = useGetBnbBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const predictionsContract = usePredictionsContract()\n\n  const maxBalance = useMemo(() => {\n    return bnbBalance.gt(dust) ? bnbBalance.sub(dust) : dust\n  }, [bnbBalance])\n  const balanceDisplay = formatBigNumber(bnbBalance)\n\n  const valueAsBn = getValueAsEthersBn(value)\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n\n  const handleInputChange = (input: string) => {\n    const inputAsBn = getValueAsEthersBn(input)\n\n    if (inputAsBn.eq(0)) {\n      setPercent(0)\n    } else {\n      const inputAsFn = ethers.FixedNumber.from(inputAsBn)\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\n      const hundredAsFn = ethers.FixedNumber.from(100)\n      const percentage = inputAsFn.divUnsafe(maxValueAsFn).mulUnsafe(hundredAsFn)\n      const percentageAsFloat = percentage.toUnsafeFloat()\n\n      setPercent(percentageAsFloat > 100 ? 100 : percentageAsFloat)\n    }\n    setValue(input)\n  }\n\n  const handlePercentChange = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\n      const hundredAsFn = ethers.FixedNumber.from(100)\n      const sliderPercentAsFn = ethers.FixedNumber.from(sliderPercent.toFixed(18)).divUnsafe(hundredAsFn)\n      const balancePercentage = maxValueAsFn.mulUnsafe(sliderPercentAsFn)\n      setValue(formatFixedNumber(balancePercentage))\n    } else {\n      setValue('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    setPercent(0)\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmount)\n\n  const handleEnterPosition = async () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n\n    try {\n      const tx = await callWithGasPrice(predictionsContract, betMethod, [epoch], { value: valueAsBn.toString() })\n      setIsTxPending(true)\n      const receipt = await tx.wait()\n      onSuccess(receipt.transactionHash)\n    } catch {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setIsTxPending(false)\n    }\n  }\n\n  // Warnings\n  useEffect(() => {\n    const inputAmount = getValueAsEthersBn(value)\n    const hasSufficientBalance = inputAmount.gt(0) && inputAmount.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ key: 'Insufficient BNB balance' })\n    } else if (inputAmount.gt(0) && inputAmount.lt(minBetAmount)) {\n      setErrorMessage({\n        key: 'A minimum amount of %num% %token% is required',\n        data: { num: formatBigNumber(minBetAmount), token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmount, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <BinanceIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              BNB\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleInputChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.key, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handlePercentChange}\n          valueLabel={account ? `${percent.toFixed(percent > 0 ? 1 : 0)}%` : ''}\n          step={0.01}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percentShortcut) => {\n            const handleClick = () => {\n              handlePercentChange(percentShortcut)\n            }\n\n            return (\n              <Button\n                key={percentShortcut}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percentShortcut}%`}\n              </Button>\n            )\n          })}\n          <Button\n            scale=\"xs\"\n            variant=\"tertiary\"\n            onClick={() => handlePercentChange(100)}\n            disabled={!account || isTxPending}\n          >\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {t(key)}\n            </Button>\n          ) : (\n            <ConnectWalletButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t('You won’t be able to remove or change your position once you enter it.')}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Card,\n  CardBody,\n  PlayCircleOutlineIcon,\n  Button,\n  useTooltip,\n  ArrowUpIcon,\n  ArrowDownIcon,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\nimport { fetchLedgerData } from 'state/predictions'\nimport { ROUND_BUFFER } from 'state/predictions/config'\nimport useToast from 'hooks/useToast'\nimport useTheme from 'hooks/useTheme'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport CardFlip from '../CardFlip'\nimport { formatBnbv2 } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = Date.now() > (round.lockTimestamp + ROUND_BUFFER) * 1000\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  const getHasEnteredPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getHasEnteredPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async (hash: string) => {\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\n\n    handleBack()\n\n    toastSuccess(\n      t('Success!'),\n      <ToastDescriptionWithTx txHash={hash}>\n        {t('%position% position entered', {\n          position: positionDisplay,\n        })}\n      </ToastDescriptionWithTx>,\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card borderBackground={getBorderBackground(theme, 'next')}>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n        epoch={round.epoch}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n","import { useCallback, useEffect, useState } from 'react'\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\n\nconst getNow = () => Math.floor(Date.now() / 1000)\n\n/**\n * Consider this moving up to the global level\n */\nconst useCountdown = (timestamp: number) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(() => {\n    return timestamp - getNow()\n  })\n  const [isPaused, setIsPaused] = useState(false)\n  const isWindowVisible = useIsWindowVisible()\n\n  const pause = useCallback(() => setIsPaused(true), [setIsPaused])\n  const unpause = useCallback(() => setIsPaused(false), [setIsPaused])\n\n  useEffect(() => {\n    let timer: ReturnType<typeof setTimeout>\n\n    if (!isPaused && secondsRemaining > 0) {\n      timer = setTimeout(() => {\n        setSecondsRemaining((prevSecondsRemaining) => prevSecondsRemaining - 1)\n      }, 1000)\n    }\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [secondsRemaining, isPaused, setSecondsRemaining])\n\n  useEffect(() => {\n    setSecondsRemaining(timestamp - getNow())\n  }, [timestamp, setSecondsRemaining])\n\n  // Pause the timer if the tab becomes inactive to avoid it becoming out of sync\n  useEffect(() => {\n    if (isWindowVisible) {\n      setSecondsRemaining(timestamp - getNow())\n      unpause()\n    } else {\n      pause()\n    }\n  }, [pause, unpause, timestamp, setSecondsRemaining, isWindowVisible])\n\n  return { secondsRemaining, pause, unpause }\n}\n\nexport default useCountdown\n","import React from 'react'\nimport { Card, CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport useTheme from 'hooks/useTheme'\nimport { useGetIntervalSeconds } from 'state/predictions/hooks'\nimport { ROUND_BUFFER } from 'state/predictions/config'\nimport { formatRoundTime } from '../../helpers'\nimport useCountdown from '../../hooks/useCountdown'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\n\ninterface SoonRoundCardProps {\n  round: NodeRound\n}\n\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\n  const intervalSeconds = useGetIntervalSeconds()\n  const { secondsRemaining } = useCountdown(round.startTimestamp + intervalSeconds + ROUND_BUFFER)\n  const countdown = formatRoundTime(secondsRemaining)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Card borderBackground={getBorderBackground(theme, 'soon')}>\n      <CardHeader status=\"soon\" icon={<WaitIcon mr=\"4px\" width=\"21px\" />} title={t('Later')} epoch={round.epoch} />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Text textAlign=\"center\">\n            <Text bold>{t('Entry starts')}</Text>\n            <Text fontSize=\"24px\" bold>\n              {`~${countdown}`}\n            </Text>\n          </Text>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SoonRoundCard\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetBetByEpoch, useGetCurrentEpoch } from 'state/predictions/hooks'\nimport { BetPosition, NodeRound } from 'state/types'\nimport { getMultiplierV2 } from '../../helpers'\nimport ExpiredRoundCard from './ExpiredRoundCard'\nimport LiveRoundCard from './LiveRoundCard'\nimport OpenRoundCard from './OpenRoundCard'\nimport SoonRoundCard from './SoonRoundCard'\n\ninterface RoundCardProps {\n  round: NodeRound\n}\n\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\n  const { epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\n  const currentEpoch = useGetCurrentEpoch()\n  const { account } = useWeb3React()\n  const ledger = useGetBetByEpoch(account, epoch)\n  const hasEntered = ledger ? ledger.amount.gt(0) : false\n  const hasEnteredUp = hasEntered && ledger.position === BetPosition.BULL\n  const hasEnteredDown = hasEntered && ledger.position === BetPosition.BEAR\n  const hasClaimedUp = hasEntered && ledger.claimed && ledger.position === BetPosition.BULL\n  const hasClaimedDown = hasEntered && ledger.claimed && ledger.position === BetPosition.BEAR\n\n  const bullMultiplier = getMultiplierV2(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplierV2(totalAmount, bearAmount)\n\n  const formattedBullMultiplier = bullMultiplier.toUnsafeFloat().toFixed(bullMultiplier.isZero() ? 0 : 2)\n  const formattedBearMultiplier = bearMultiplier.toUnsafeFloat().toFixed(bearMultiplier.isZero() ? 0 : 2)\n\n  // Next (open) round\n  if (epoch === currentEpoch && lockPrice === null) {\n    return (\n      <OpenRoundCard\n        round={round}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        betAmount={ledger?.amount}\n        bullMultiplier={formattedBullMultiplier}\n        bearMultiplier={formattedBearMultiplier}\n      />\n    )\n  }\n\n  // Live round\n  if (closePrice === null && epoch === currentEpoch - 1) {\n    return (\n      <LiveRoundCard\n        betAmount={ledger?.amount}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        round={round}\n        bullMultiplier={formattedBullMultiplier}\n        bearMultiplier={formattedBearMultiplier}\n      />\n    )\n  }\n\n  // Fake future rounds\n  if (epoch > currentEpoch) {\n    return <SoonRoundCard round={round} />\n  }\n\n  // Past rounds\n  return (\n    <ExpiredRoundCard\n      round={round}\n      hasEnteredDown={hasEnteredDown}\n      hasEnteredUp={hasEnteredUp}\n      hasClaimedDown={hasClaimedDown}\n      hasClaimedUp={hasClaimedUp}\n      betAmount={ledger?.amount}\n      bullMultiplier={formattedBullMultiplier}\n      bearMultiplier={formattedBearMultiplier}\n    />\n  )\n}\n\nexport default RoundCard\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport styled from 'styled-components'\nimport { BnbUsdtPairTokenIcon, Box, Flex, PocketWatchIcon, Text } from '@pancakeswap/uikit'\nimport { ROUND_BUFFER } from 'state/predictions/config'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetCurrentRoundLockTimestamp, useGetLastOraclePrice } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatRoundTime } from '../helpers'\nimport useCountdown from '../hooks/useCountdown'\n\nconst Token = styled(Box)`\n  margin-top: -24px;\n  position: absolute;\n  top: 50%;\n  z-index: 30;\n\n  & > svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: -32px;\n\n    & > svg {\n      height: 64px;\n      width: 64px;\n    }\n  }\n`\n\nconst Title = styled(Text)`\n  font-size: 16px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst ClosingTitle = styled(Text)`\n  font-size: 9px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 16px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst Price = styled(Text)`\n  height: 18px;\n  justify-self: start;\n  width: 70px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n  }\n`\n\nconst Interval = styled(Text)`\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n    width: 32px;\n  }\n`\n\nconst Label = styled(Flex)<{ dir: 'left' | 'right' }>`\n  background-color: ${({ theme }) => theme.card.background};\n  box-shadow: ${({ theme }) => theme.shadows.level1};\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\n  flex-direction: column;\n  overflow: initial;\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    align-items: center;\n    border-radius: ${({ theme }) => theme.radii.card};\n    flex-direction: row;\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\n  }\n`\n\nexport const PricePairLabel: React.FC = () => {\n  const price = useGetLastOraclePrice()\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3,\n  })\n\n  const updateRef = useRef(update)\n\n  useEffect(() => {\n    updateRef.current(priceAsNumber)\n  }, [priceAsNumber, updateRef])\n\n  return (\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\n      <Token left={0}>\n        <BnbUsdtPairTokenIcon />\n      </Token>\n      <Label dir=\"left\">\n        <Title bold textTransform=\"uppercase\">\n          BNBUSDT\n        </Title>\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\n      </Label>\n    </Box>\n  )\n}\n\ninterface TimerLabelProps {\n  interval: string\n  unit: 'm' | 'h' | 'd'\n}\n\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\n  const currentRoundLockTimestamp = useGetCurrentRoundLockTimestamp()\n  const { secondsRemaining } = useCountdown(currentRoundLockTimestamp + ROUND_BUFFER)\n  const countdown = formatRoundTime(secondsRemaining)\n  const { t } = useTranslation()\n\n  return (\n    <Box pr=\"24px\" position=\"relative\">\n      <Label dir=\"right\">\n        {secondsRemaining !== 0 ? (\n          <Title bold color=\"secondary\">\n            {countdown}\n          </Title>\n        ) : (\n          <ClosingTitle bold color=\"secondary\">\n            {t('Closing')}\n          </ClosingTitle>\n        )}\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\n      </Label>\n      <Token right={0}>\n        <PocketWatchIcon />\n      </Token>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Flex, IconButton } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\nimport useSwiper from '../hooks/useSwiper'\n\nconst StyledPrevNextNav = styled(Flex)`\n  align-items: center;\n  display: none;\n  justify-content: space-between;\n  overflow: initial;\n  position: relative;\n  width: 128px;\n\n  box-shadow: ${({ theme }) => theme.shadows.level1};\n  border-radius: ${({ theme }) => theme.radii.default};\n  background-color: ${({ theme }) => theme.card.background};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n  }\n`\n\nconst Icon = styled.div`\n  cursor: pointer;\n  left: 50%;\n  margin-left: -32px;\n  position: absolute;\n`\n\nconst PrevNextNav = () => {\n  const { swiper } = useSwiper()\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n\n  const handlePrevSlide = () => {\n    swiper.slidePrev()\n  }\n\n  const handleNextSlide = () => {\n    swiper.slideNext()\n  }\n\n  const handleSlideToLive = () => {\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n    swiper.slideTo(currentEpochIndex - 1)\n    swiper.update()\n  }\n\n  return (\n    <StyledPrevNextNav>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n      <Icon onClick={handleSlideToLive}>\n        <BunnyCardsIcon width=\"64px\" />\n      </Icon>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n    </StyledPrevNextNav>\n  )\n}\n\nexport default PrevNextNav\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport { useGetIsFetchingHistory } from 'state/predictions/hooks'\n\nconst HistoryButton = () => {\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <IconButton\n      id=\"prediction-history-button\"\n      variant=\"subtle\"\n      onClick={handleClick}\n      isLoading={isFetchingHistory}\n      disabled={!account}\n    >\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\n    </IconButton>\n  )\n}\n\nexport default HistoryButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Flex, HelpIcon, Button, PrizeIcon } from '@pancakeswap/uikit'\nimport FlexRow from './FlexRow'\nimport { PricePairLabel, TimerLabel } from './Label'\nimport PrevNextNav from './PrevNextNav'\nimport HistoryButton from './HistoryButton'\n\nconst SetCol = styled.div`\n  flex: none;\n  width: auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 270px;\n  }\n`\n\nconst HelpButtonWrapper = styled.div`\n  order: 1;\n  margin: 0 2px 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    order: 2;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst TimerLabelWrapper = styled.div`\n  order: 3;\n  width: 100px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    order: 1;\n    width: auto;\n  }\n`\n\nconst LeaderboardButtonWrapper = styled.div`\n  display: block;\n\n  order: 2;\n  margin: 0 8px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    order: 3;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst ButtonWrapper = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: block;\n    margin-left: 8px;\n  }\n`\n\nconst Menu = () => {\n  return (\n    <FlexRow alignItems=\"center\" p=\"16px\">\n      <SetCol>\n        <PricePairLabel />\n      </SetCol>\n      <FlexRow justifyContent=\"center\">\n        <PrevNextNav />\n      </FlexRow>\n      <SetCol>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <TimerLabelWrapper>\n            <TimerLabel interval=\"5\" unit=\"m\" />\n          </TimerLabelWrapper>\n          <HelpButtonWrapper>\n            <Button\n              variant=\"subtle\"\n              as=\"a\"\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n              width=\"48px\"\n            >\n              <HelpIcon width=\"24px\" color=\"white\" />\n            </Button>\n          </HelpButtonWrapper>\n          <LeaderboardButtonWrapper>\n            <Button as={Link} variant=\"subtle\" to=\"/prediction/leaderboard\" width=\"48px\">\n              <PrizeIcon color=\"white\" />\n            </Button>\n          </LeaderboardButtonWrapper>\n          <ButtonWrapper style={{ order: 4 }}>\n            <HistoryButton />\n          </ButtonWrapper>\n        </Flex>\n      </SetCol>\n    </FlexRow>\n  )\n}\n\nexport default Menu\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\nimport useSwiper from './useSwiper'\n\n/**\n * Hooks for actions to be performed when the round changes\n */\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const { account } = useWeb3React()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\n}\n\nexport default useOnNextRound\n","import { useEffect } from 'react'\nimport usePrevious from 'hooks/usePreviousValue'\nimport useSwiper from './useSwiper'\nimport { PageView } from '../types'\n\n/**\n * Hooks for actions to be performed when the view changes (mobile)\n */\nconst useOnViewChange = (liveSwiperIndex: number, view?: PageView) => {\n  const { swiper } = useSwiper()\n  const prevView = usePrevious(view)\n\n  useEffect(() => {\n    if (swiper && view !== prevView && swiper.activeIndex !== liveSwiperIndex) {\n      swiper.slideTo(liveSwiperIndex, 0.1)\n    }\n  }, [swiper, prevView, view, liveSwiperIndex])\n}\n\nexport default useOnViewChange\n","import React from 'react'\nimport styled from 'styled-components'\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport { Box } from '@pancakeswap/uikit'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\nimport 'swiper/swiper.min.css'\nimport RoundCard from './components/RoundCard'\nimport Menu from './components/Menu'\nimport useSwiper from './hooks/useSwiper'\nimport useOnNextRound from './hooks/useOnNextRound'\nimport useOnViewChange from './hooks/useOnViewChange'\nimport { PageView } from './types'\n\nSwiperCore.use([Keyboard, Mousewheel])\n\nconst StyledSwiper = styled.div`\n  .swiper-wrapper {\n    align-items: center;\n    display: flex;\n  }\n\n  .swiper-slide {\n    width: 320px;\n  }\n`\nconst Positions: React.FC<{ view?: PageView }> = ({ view }) => {\n  const { setSwiper } = useSwiper()\n  const rounds = useGetSortedRounds()\n  const currentEpoch = useGetCurrentEpoch()\n  const previousEpoch = currentEpoch > 0 ? currentEpoch - 1 : currentEpoch\n  const previousRound = rounds.find((round) => round.epoch === previousEpoch)\n  const swiperIndex = rounds.indexOf(previousRound)\n\n  useOnNextRound()\n  useOnViewChange(swiperIndex, view)\n\n  return (\n    <Box overflow=\"hidden\">\n      <Menu />\n      <StyledSwiper>\n        <Swiper\n          initialSlide={swiperIndex}\n          onSwiper={setSwiper}\n          spaceBetween={16}\n          slidesPerView=\"auto\"\n          freeMode\n          freeModeSticky\n          centeredSlides\n          freeModeMomentumRatio={0.25}\n          freeModeMomentumVelocityRatio={0.5}\n          mousewheel\n          keyboard\n          resizeObserver\n        >\n          {rounds.map((round) => (\n            <SwiperSlide key={round.epoch}>\n              <RoundCard round={round} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </StyledSwiper>\n    </Box>\n  )\n}\n\nexport default Positions\n","export enum PageView {\n  POSITIONS = 'positions',\n  HISTORY = 'history',\n  CHART = 'chart',\n}\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Split from 'split-grid'\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\nimport debounce from 'lodash/debounce'\nimport delay from 'lodash/delay'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { setChartPaneState } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\n\n// The value to set the chart when the user clicks the chart tab at the bottom\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\n\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  bottom: 12px;\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({ theme }) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 12px 0;\n  flex: 1;\n  overflow: hidden;\n`\n\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`\n\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`\n\nconst Gutter = styled.div`\n  background: ${({ theme }) => theme.colors.dropdown};\n  cursor: row-resize;\n  height: 12px;\n  position: relative;\n\n  &:before {\n    background-color: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 4px;\n    width: 64px;\n  }\n`\n\nconst Desktop: React.FC = () => {\n  const splitWrapperRef = useRef<HTMLDivElement>()\n  const chartRef = useRef<HTMLDivElement>()\n  const gutterRef = useRef<HTMLDivElement>()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const status = useGetPredictionsStatus()\n\n  const toggleChartPane = () => {\n    const newChartPaneState = !isChartPaneOpen\n\n    if (newChartPaneState) {\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\n\n      // Purely comedic: We only want to animate if we are clicking the open chart button\n      // If we keep the transition on the resizing becomes very choppy\n      delay(() => {\n        splitWrapperRef.current.style.transition = ''\n      }, 150)\n    }\n\n    dispatch(setChartPaneState(newChartPaneState))\n  }\n\n  useEffect(() => {\n    const threshold = 100\n    const handleDrag = debounce(() => {\n      const { height } = chartRef.current.getBoundingClientRect()\n\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n      dispatch(setChartPaneState(height > threshold))\n    }, 50)\n\n    const split = Split({\n      dragInterval: 1,\n      snapOffset: threshold,\n      onDrag: handleDrag,\n      rowGutters: [\n        {\n          track: 1,\n          element: gutterRef.current,\n        },\n      ],\n    })\n\n    return () => {\n      split.destroy()\n    }\n  }, [gutterRef, chartRef, dispatch])\n\n  return (\n    <>\n      {!isChartPaneOpen && (\n        <ExpandChartButton\n          variant=\"tertiary\"\n          scale=\"sm\"\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\n          onClick={toggleChartPane}\n        >\n          {isChartPaneOpen ? t('Close') : t('Charts')}\n        </ExpandChartButton>\n      )}\n      <StyledDesktop>\n        <SplitWrapper ref={splitWrapperRef}>\n          <PositionPane>\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </PositionPane>\n          <Gutter ref={gutterRef} />\n          <ChartPane ref={chartRef}>\n            <TradingView />\n          </ChartPane>\n        </SplitWrapper>\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n          <History />\n        </HistoryPane>\n      </StyledDesktop>\n    </>\n  )\n}\n\nexport default Desktop\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  Cards,\n  ChartIcon,\n  HistoryIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { PredictionStatus } from 'state/types'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\nimport useSwiper from '../hooks/useSwiper'\n\nconst ButtonNav = styled.div`\n  flex: none;\n`\n\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\n  if (isHistoryOpen) {\n    return 2\n  }\n\n  if (isChartOpen) {\n    return 1\n  }\n\n  return 0\n}\n\nconst MobileMenu = () => {\n  const { swiper } = useSwiper()\n  const isHistoryOpen = useIsHistoryPaneOpen()\n  const isChartOpen = useIsChartPaneOpen()\n  const status = useGetPredictionsStatus()\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleItemClick = (index: number) => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true))\n        break\n      case 1:\n        dispatch(setChartPaneState(true))\n        dispatch(setHistoryPaneState(false))\n        break\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false))\n        dispatch(setChartPaneState(false))\n    }\n  }\n\n  return (\n    <StyledMobileMenu>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n      <TabNav>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\n          <ButtonMenuItem>\n            <Cards color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem>\n            <ChartIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem disabled={!account}>\n            <HistoryIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </TabNav>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n    </StyledMobileMenu>\n  )\n}\n\nexport default MobileMenu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport Menu from './components/Menu'\nimport TradingView from './components/TradingView'\n\nconst MenuWrapper = styled.div`\n  flex: none;\n`\n\nconst ChartWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n`\n\nconst Chart = () => {\n  return (\n    <Flex flexDirection=\"column\" height=\"100%\">\n      <MenuWrapper>\n        <Menu />\n      </MenuWrapper>\n      <ChartWrapper>\n        <TradingView />\n      </ChartWrapper>\n    </Flex>\n  )\n}\n\nexport default Chart\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex } from '@pancakeswap/uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { PredictionStatus } from 'state/types'\nimport MobileMenu from './components/MobileMenu'\nimport History from './History'\nimport Positions from './Positions'\nimport Chart from './Chart'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport { PageView } from './types'\n\nconst StyledMobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: none;\n  }\n`\n\nconst View = styled.div<{ isVisible: boolean }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n`\n\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\n  if (isHistoryPaneOpen) {\n    return PageView.HISTORY\n  }\n\n  if (isChartPaneOpen) {\n    return PageView.CHART\n  }\n\n  return PageView.POSITIONS\n}\n\nconst Mobile: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\n  const status = useGetPredictionsStatus()\n\n  return (\n    <StyledMobile>\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\n        <View isVisible={view === PageView.POSITIONS}>\n          <Flex alignItems=\"center\" height=\"100%\">\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions view={view} />}\n          </Flex>\n        </View>\n        <View isVisible={view === PageView.CHART}>\n          <Chart />\n        </View>\n        <View isVisible={view === PageView.HISTORY}>\n          <History />\n        </View>\n      </Box>\n      <MobileMenu />\n    </StyledMobile>\n  )\n}\n\nexport default Mobile\n","import React, { useState } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\n  const { t } = useTranslation()\n\n  const handleSetAcknowledgeRisk = () => {\n    setAcknowledgeRisk(!acknowledgeRisk)\n  }\n\n  const handleSetAcknowledgeBeta = () => {\n    setAcknowledgeBeta(!acknowledgeBeta)\n  }\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\" id=\"predictions-risk-disclaimer\">\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {t('This Product is in beta.')}\n          </Heading>\n\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\n          </Text>\n\n          <label\n            htmlFor=\"responsibility-checkbox\"\n            style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}\n          >\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox\n                  id=\"responsibility-checkbox\"\n                  scale=\"sm\"\n                  checked={acknowledgeRisk}\n                  onChange={handleSetAcknowledgeRisk}\n                />\n              </div>\n              <Text ml=\"8px\">\n                {t(\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\n                )}\n              </Text>\n            </Flex>\n          </label>\n          <label htmlFor=\"beta-checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"beta-checkbox\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\n              </div>\n              <Text ml=\"8px\">\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\n              </Text>\n            </Flex>\n          </label>\n        </Box>\n        <Button\n          id=\"prediction-disclaimer-continue\"\n          width=\"100%\"\n          onClick={handleConfirm}\n          disabled={!acknowledgeRisk || !acknowledgeBeta}\n        >\n          {t('Continue')}\n        </Button>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default RiskDisclaimer\n","import React from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  InjectedModalProps,\n  LinkExternal,\n  Flex,\n  Image,\n  Heading,\n  Checkbox,\n  Box,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { useUserPredictionChartDisclaimerShow } from 'state/user/hooks'\n\nconst Ul = styled.ul`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  list-style-position: outside;\n  margin-left: 16px;\n\n  & > li {\n    font-size: 14px;\n    line-height: 1.5;\n  }\n`\n\nconst ChartDisclaimer: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const [showDisclaimer, setShowDisclaimer] = useUserPredictionChartDisclaimerShow()\n  const { t } = useTranslation()\n\n  const handleConfirm = () => {\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer minWidth=\"320px\">\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Flex justifyContent=\"center\" mb=\"32px\">\n          <Image src=\"/images/chartwarning.svg\" width={190} height={118} />\n        </Flex>\n        <Heading as=\"h3\" size=\"sm\">\n          {t('Warning')}:\n        </Heading>\n        <Heading as=\"h4\" size=\"sm\" mb=\"24px\">\n          {t('Prices shown on cards and charts are different')}:\n        </Heading>\n        <Text as=\"p\" fontSize=\"14px\" color=\"textSubtle\">\n          {t('The price you see come from difference places')}:\n        </Text>\n        <Ul>\n          <li>{t('Prices on cards come from Chainlink’s verifiable price oracle.')}</li>\n          <li>{t(\"Prices on charts come from Binance.com. Chart's are provided for your reference only.\")}</li>\n        </Ul>\n        <Text as=\"p\" mb=\"16px\" fontSize=\"14px\" color=\"textSubtle\">\n          {t(\"Only the price from Chainlink (shown on the cards) determines the round's result.\")}\n        </Text>\n        <LinkExternal\n          href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\n          external\n          mb=\"24px\"\n        >\n          {t('Learn More')}\n        </LinkExternal>\n        <Box>\n          <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\n            {t('I understand')}\n          </Button>\n        </Box>\n        <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n          <Flex alignItems=\"center\">\n            <div style={{ flex: 'none' }}>\n              <Checkbox\n                id=\"checkbox\"\n                scale=\"sm\"\n                checked={!showDisclaimer}\n                onChange={() => setShowDisclaimer(!showDisclaimer)}\n              />\n            </div>\n            <Text ml=\"8px\">{t(\"Don't show this again\")}</Text>\n          </Flex>\n        </label>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ChartDisclaimer\n","import React, { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen } from 'state/predictions/hooks'\nimport { useInitialBlock } from 'state/block/hooks'\nimport { initializePredictions } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { useUserPredictionAcceptedRisk, useUserPredictionChartDisclaimerShow } from 'state/user/hooks'\nimport PageLoader from 'components/Loader/PageLoader'\nimport { PageMeta } from 'components/Layout/Page'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollPredictions from './hooks/usePollPredictions'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport ChartDisclaimer from './components/ChartDisclaimer'\n\nconst Predictions = () => {\n  const { isDesktop } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = useUserPredictionAcceptedRisk()\n  const [showDisclaimer] = useUserPredictionChartDisclaimerShow()\n  const { account } = useWeb3React()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (isChartPaneOpen && showDisclaimer) {\n      onPresentChartDisclaimerRef.current()\n    }\n  }, [onPresentChartDisclaimerRef, isChartPaneOpen, showDisclaimer])\n\n  useEffect(() => {\n    if (initialBlock > 0) {\n      // Do not start initialization until the first block has been retrieved\n      dispatch(initializePredictions(account))\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollPredictions()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <PageMeta />\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n","import { useEffect, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { ethers } from 'ethers'\nimport { minBy, orderBy } from 'lodash'\nimport { isAddress } from 'utils'\nimport { useAppDispatch } from 'state'\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from '../types'\nimport { parseBigNumberObj } from './helpers'\nimport { fetchAddressResult } from '.'\n\nexport const useGetRounds = () => {\n  const rounds = useSelector((state: State) => state.predictions.rounds)\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n}\n\nexport const useGetRound = (epoch: number) => {\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const bets = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][epoch]) {\n    return null\n  }\n\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\n  return claimableStatuses[epoch] || false\n}\n\n/**\n * Used to get the range of rounds to poll for\n */\nexport const useGetEarliestEpoch = () => {\n  return useSelector((state: State) => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\n    return earliestRound?.epoch\n  })\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalSeconds = () => {\n  return useSelector((state: State) => state.predictions.intervalSeconds)\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetRounds()\n  return rounds[currentEpoch]\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetHasHistoryLoaded = () => {\n  return useSelector((state: State) => state.predictions.hasHistoryLoaded)\n}\n\nexport const useGetCurrentHistoryPage = () => {\n  return useSelector((state: State) => state.predictions.currentHistoryPage)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\n}\n\nexport const useGetBufferSeconds = () => {\n  return useSelector((state: State) => state.predictions.bufferSeconds)\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetLastOraclePrice = () => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice)\n  }, [lastOraclePrice])\n}\n\n/**\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\n */\nexport const useGetCurrentRoundLockTimestamp = () => {\n  const currentRound = useGetCurrentRound()\n  const intervalSeconds = useGetIntervalSeconds()\n\n  if (!currentRound.lockTimestamp) {\n    return currentRound.startTimestamp + intervalSeconds\n  }\n\n  return currentRound.lockTimestamp\n}\n\n// Leaderboard\nexport const useGetLeaderboardLoadingState = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.loadingState)\n}\n\nexport const useGetLeaderboardResults = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.results)\n}\n\nexport const useGetLeaderboardFilters = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.filters)\n}\n\nexport const useGetLeaderboardSkip = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.skip)\n}\n\nexport const useGetLeaderboardHasMoreResults = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.hasMoreResults)\n}\n\nexport const useGetAddressResult = (account: string) => {\n  return useSelector((state: State) => state.predictions.leaderboard.addressResults[account])\n}\n\nexport const useGetOrFetchLeaderboardAddressResult = (account: string) => {\n  const addressResult = useGetAddressResult(account)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    const address = isAddress(account)\n\n    // If address result is null it means we already tried fetching the results and none came back\n    if (!addressResult && addressResult !== null && address) {\n      dispatch(fetchAddressResult(account))\n    }\n  }, [dispatch, account, addressResult])\n\n  return addressResult\n}\n\nexport const useGetSelectedAddress = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.selectedAddress)\n}\n"],"sourceRoot":""}