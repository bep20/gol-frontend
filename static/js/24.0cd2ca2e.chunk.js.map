{"version":3,"sources":["views/Predictions/Leaderboard/components/Crumbs.tsx","views/Predictions/Leaderboard/components/Hero.tsx","views/Predictions/Leaderboard/components/Results/styles.tsx","views/Predictions/Leaderboard/components/PositionLabel.tsx","views/Predictions/Leaderboard/components/PreviousBetsTable.tsx","views/Predictions/Leaderboard/components/MobileBetsTable.tsx","views/Predictions/Leaderboard/components/Results/DesktopBetsTable.tsx","views/Predictions/Leaderboard/components/WalletStatsModal.tsx","views/Predictions/Leaderboard/components/Results/ResultAvatar.tsx","views/Predictions/Leaderboard/components/Results/DesktopRow.tsx","views/Predictions/Leaderboard/components/Results/DesktopResults.tsx","views/Predictions/Leaderboard/components/Results/MobileRow.tsx","views/Predictions/Leaderboard/components/Results/MobileResults.tsx","views/Predictions/Leaderboard/components/Results/RankingCard.tsx","views/Predictions/Leaderboard/components/Results/index.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray.js","views/Predictions/Leaderboard/components/Results/ConnectedWalletResult.tsx","views/Predictions/Leaderboard/components/AddressSearch.tsx","views/Predictions/Leaderboard/components/Filters/index.tsx","views/Predictions/Leaderboard/index.tsx","state/predictions/hooks.ts","../node_modules/lodash/times.js","../node_modules/lodash/toInteger.js","../node_modules/lodash/_castFunction.js","components/AddressInputSelect/index.tsx"],"names":["Crumbs","t","useTranslation","mb","to","Hero","PageHeader","as","scale","color","Row","children","props","alignItems","justifyContent","NetWinnings","amount","textPrefix","textColor","bnbBusdPrice","useBNBBusdPrice","value","multiplyPriceByAmount","Math","abs","flexDirection","fontWeight","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","fontSize","lineHeight","NetWinningsRow","StyledPositionLabel","styled","div","theme","bgColor","colors","Label","mediaQueries","lg","PositionLabel","position","isBull","BetPosition","BULL","icon","width","PreviousBetsTable","numberOfBets","account","useState","isFetching","setIsFetching","bets","setBets","orderedBets","orderBy","useEffect","a","getBetHistory","user","toLowerCase","response","map","transformBetResponse","fetchBetHistory","textAlign","times","num","height","bet","isWinner","round","epoch","claimedNetBNB","id","MobileBetsTable","isOpen","setIsOpen","px","py","borderBottom","borderColor","style","cursor","onClick","textTransform","DesktopBetsTable","p","ExternalLink","LinkExternal","text","WalletStatsModal","onDismiss","onBeforeDismiss","useTheme","selectedAddress","useGetSelectedAddress","address","result","useGetOrFetchLeaderboardAddressResult","profileAvatar","useGetProfileAvatar","isLoading","useGetLeaderboardLoadingState","LeaderboardLoadingState","LOADING","isDesktop","useMatchBreakpoints","minWidth","background","gradients","bubblegum","flex","mr","src","nft","image","thumbnail","username","href","getBscScanLink","truncateHash","variant","maxHeight","overflowY","gridTemplateColumns","gridGap","netBNB","winRate","totalBetsClaimed","totalBets","AvatarWrapper","Box","UsernameWrapper","ResultAvatar","useModal","onPresentWalletStatsModal","component","options","placement","Link","bold","external","DesktopRow","rank","DesktopResults","results","Container","index","StyledMobileRow","card","cardBorder","MobileRow","MobileResults","RotatedLaurelLeftIcon","LaurelLeftIcon","RotatedLaurelRightIcon","LaurelRightIcon","RankingCard","rankColor","getRankingColor","ribbon","variantColor","ribbonPosition","Results","arr","useGetLeaderboardResults","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","first","second","third","rest","currentSkip","useGetLeaderboardSkip","hasMoreResults","useGetLeaderboardHasMoreResults","dispatch","useAppDispatch","endIcon","spin","filterNextPageLeaderboard","LEADERBOARD_RESULTS_PER_PAGE","ConnectedWalletResult","useWeb3React","accountResult","fetchProfileAvatar","fetchAddressResult","isActive","AddressSearch","setSelectedAddress","handleValidAddress","useCallback","payload","data","handleAddressClick","AddressInputSelect","onAddressClick","onValidAddress","SearchWrapper","FilterWrapper","Filters","orderByOptions","label","Select","onOptionChange","option","setLeaderboardFilter","Leaderboard","leaderboardLoadingState","filters","useGetLeaderboardFilters","filterLeaderboard","INITIAL","PageLoader","Page","useGetRounds","rounds","useSelector","state","predictions","Object","keys","reduce","accum","parseBigNumberObj","useGetSortedRounds","roundData","values","useGetBetByEpoch","ledgers","useGetIsClaimable","claimableStatuses","useGetEarliestEpoch","earliestRound","minBy","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetIntervalSeconds","intervalSeconds","useGetPredictionsStatus","status","useGetHistoryFilter","historyFilter","useGetHasHistoryLoaded","hasHistoryLoaded","useGetCurrentHistoryPage","currentHistoryPage","useGetMinBetAmount","minBetAmount","useMemo","ethers","BigNumber","from","useGetBufferSeconds","bufferSeconds","useGetIsFetchingHistory","isFetchingHistory","useGetHistory","history","useGetLastOraclePrice","lastOraclePrice","useGetCurrentRoundLockTimestamp","currentRound","useGetCurrentRound","lockTimestamp","startTimestamp","leaderboard","loadingState","skip","addressResult","addressResults","useGetAddressResult","isAddress","baseTimes","require","castFunction","toInteger","MAX_ARRAY_LENGTH","nativeMin","min","module","exports","n","iteratee","length","toFinite","remainder","identity","ResultStatus","SubMenu","input","inputSecondary","radii","default","AddressLink","Text","initialState","resultFound","NOT_VALID","defaultValidAddressHandler","Promise","resolve","setState","prevState","hasResults","FOUND","NOT_FOUND","validAddressHandler","placeholder","subject","onChange","evt","newValue","target","zIndex","paddingRight","top","right"],"mappings":"mPAmBeA,EAdA,WACb,IAAQC,EAAMC,cAAND,EAER,OACE,cAAC,IAAD,CAAKE,GAAG,OAAR,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAMC,GAAG,IAAT,SAAcH,EAAE,UAChB,cAAC,IAAD,CAAMG,GAAG,cAAT,SAAwBH,EAAE,gBAC1B,cAAC,KAAD,UAAOA,EAAE,uBCMFI,EAbF,WACX,IAAQJ,EAAMC,cAAND,EAER,OACE,eAACK,EAAA,EAAD,WACE,cAAC,EAAD,IACA,cAAC,KAAD,CAASC,GAAG,KAAKC,MAAM,MAAMC,MAAM,YAAnC,SACGR,EAAE,qB,yNCPES,EAA2B,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAaC,EAAY,iBAClE,OACE,cAAC,KAAD,yBAAMC,WAAW,SAASC,eAAe,iBAAoBF,GAA7D,aACGD,MAWMI,EAA0C,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,OAA4D,IAApDC,kBAAoD,MAAvC,GAAuC,MAAnCC,iBAAmC,MAAvB,OAAuB,EAAZN,EAAY,iBAC9GO,EAAeC,cACfC,EAAQC,YAAsBH,EAAcI,KAAKC,IAAIR,IAE3D,OAAKA,EAKH,eAAC,KAAD,yBAAMS,cAAc,SAASZ,WAAW,YAAeD,GAAvD,cACE,cAAC,KAAD,CAAMc,WAAW,OAAOjB,MAAOS,EAA/B,mBACMD,GADN,OACmBD,EAAOW,oBAAeC,EAAW,CAAEC,sBAAuB,EAAGC,sBAAuB,OAEvG,cAAC,KAAD,CAAMC,SAAS,OAAOtB,MAAM,aAAauB,WAAY,EAArD,qBACQX,EAAMM,oBAAeC,EAAW,CAAEC,sBAAuB,EAAGC,sBAAuB,WATtF,MAeEG,EAA+C,SAAC,GAAgB,IAAdjB,EAAa,EAAbA,OACrDf,EAAMC,cAAND,EAER,OACE,eAAC,EAAD,CAAKE,GAAG,MAAR,UACE,cAAC,KAAD,CAAM4B,SAAS,OAAOtB,MAAM,aAA5B,SACGR,EAAE,wBAEL,cAAC,EAAD,CAAae,OAAQA,EAAQC,WAAYD,EAAS,EAAI,IAAM,GAAIE,UAAWF,EAAS,EAAI,UAAY,gB,gECtCpGkB,GAAsBC,IAAOC,IAAV,4OAEH,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OAAwBD,EAAME,OAAOD,MAUrDE,GAAQL,IAAOC,IAAV,wJAKP,qBAAGC,MAAkBI,aAAaC,MAoBvBC,GAdqC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7C3C,EAAMC,cAAND,EACF4C,EAASD,IAAaE,IAAYC,KAClCT,EAAUO,EAAS,UAAY,UAC/BG,EAAOH,EAAS,cAAC,IAAD,CAAaI,MAAM,OAAOxC,MAAM,UAAa,cAAC,IAAD,CAAewC,MAAM,OAAOxC,MAAM,UAErG,OACE,eAACyB,GAAD,CAAqBI,QAASA,EAA9B,UACGU,EACD,cAACR,GAAD,UAAiBvC,EAAT4C,EAAW,KAAU,cCiDpBK,GA5E6C,SAAC,GAAmC,IAAD,IAAhCC,oBAAgC,MAAjB,EAAiB,EAAdC,EAAc,EAAdA,QAC/E,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwBF,mBAAgB,IAAxC,mBAAOG,EAAP,KAAaC,EAAb,KACQxD,EAAMC,cAAND,EACFyD,EAAcC,KAAQH,EAAM,CAAC,eAAgB,CAAC,SAsBpD,OApBAI,qBAAU,YACa,uCAAG,4BAAAC,EAAA,6DACtBN,GAAc,GADQ,kBAGGO,YACrB,CACEC,KAAMX,EAAQY,eAEhBb,GAPkB,OAGdc,EAHc,OAUpBR,EAAQQ,EAASC,IAAIC,MAVD,uBAYpBZ,GAAc,GAZM,uEAAH,qDAgBrBa,KACC,CAAChB,EAASD,EAAcI,EAAeE,IAGxC,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,UAAKxD,EAAE,WACP,cAAC,KAAD,UAAKA,EAAE,eACP,cAAC,KAAD,CAAIoE,UAAU,QAAd,SAAuBpE,EAAE,yBAG7B,gCACGqD,EACGgB,KAAMnB,GAAce,KAAI,SAACK,GAAD,OACtB,+BACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAUtB,MAAM,WAElB,cAAC,KAAD,UACE,cAAC,KAAD,CAAUA,MAAM,OAAOuB,OAAO,WAEhC,cAAC,KAAD,UACE,cAAC,KAAD,CAAUvB,MAAM,aARXsB,MAYXb,EAAYQ,KAAI,SAACO,GACf,IAAMC,EAAWD,EAAI7B,WAAa6B,EAAIE,MAAM/B,SAE5C,OACE,+BACE,cAAC,KAAD,CAAIyB,UAAU,SAAS3C,WAAW,OAAlC,SACG+C,EAAIE,MAAMC,MAAMjD,mBAEnB,cAAC,KAAD,CAAI0C,UAAU,SAAd,SACE,cAAC,GAAD,CAAezB,SAAU6B,EAAI7B,aAE/B,cAAC,KAAD,CAAIyB,UAAU,QAAd,SACE,cAAC,EAAD,CACErD,OAAQ0D,EAAWD,EAAII,cAAgBJ,EAAIzD,OAC3CC,WAAYyD,EAAW,IAAM,IAC7BxD,UAAWwD,EAAW,UAAY,gBAX/BD,EAAIK,aChCdC,GA5ByC,SAAC,GAAiB,IAAf3B,EAAc,EAAdA,QACjDnD,EAAMC,cAAND,EACR,EAA4BoD,oBAAS,GAArC,mBAAO2B,EAAP,KAAeC,EAAf,KAIA,OACE,qCACE,eAAC,KAAD,CACEpE,WAAW,SACXC,eAAe,gBACfoE,GAAG,OACHC,GAAG,OACHC,aAAa,YACbC,YAAY,aACZC,MAAO,CAAEC,OAAQ,WACjBC,QAZe,kBAAMP,GAAWD,IAIlC,UAUE,cAAC,KAAD,CAAMzE,GAAG,KAAKE,MAAM,YAAYiB,WAAW,OAAO+D,cAAc,YAAY1D,SAAS,OAArF,SACG9B,EAAE,kBAAmB,CAAEsE,IAAK,MAE9BS,EAAS,cAAC,IAAD,IAAsB,cAAC,IAAD,OAEjCA,GAAU,cAAC,GAAD,CAAmB5B,QAASA,QCR9BsC,GAf2C,SAAC,GAAiB,IAAftC,EAAc,EAAdA,QACnDnD,EAAMC,cAAND,EAER,OACE,eAAC,IAAD,CAAK0F,EAAE,OAAP,UACE,cAAC,KAAD,CAAMpF,GAAG,KAAKE,MAAM,YAAYiB,WAAW,OAAO+D,cAAc,YAAY1D,SAAS,OAAO5B,GAAG,OAA/F,SACGF,EAAE,kBAAmB,CAAEsE,IAAK,MAE/B,cAAC,IAAD,UACE,cAAC,GAAD,CAAmBnB,QAASA,UCoB9BwC,GAAezD,YAAO0D,KAAP1D,CAAH,2EACP,qBAAGE,MAAkBE,OAAOuD,QAG3B,qBAAGzD,MAAkBE,OAAOuD,QAwGzBC,GApG2C,SAAC,GAA6C,IAAD,UAA1C3C,EAA0C,EAA1CA,QAAS4C,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,gBACvEhG,EAAMC,cAAND,EACAoC,EAAU6D,cAAV7D,MACF8D,EAAkBC,cAClBC,EAAUjD,GAAW+C,EACrBG,EAASC,YAAsCF,GAC/CG,EAAgBC,YAAoBJ,GAEpCK,EAD0BC,gBACcC,IAAwBC,QAC9DC,EAAcC,eAAdD,UAUR,OACE,eAAC,KAAD,CAAgBE,SAAS,QAAzB,UACE,eAAC,KAAD,CAAaC,WAAY5E,EAAME,OAAO2E,UAAUC,UAAhD,UACE,eAAC,KAAD,CAAMtG,WAAW,SAASyE,MAAO,CAAE8B,KAAM,GAAzC,UACE,cAAC,IAAD,CAAKnE,MAAO,CAAC,OAAQ,KAAM,KAAM,KAAM,KAAM,KAAM,QAASoE,GAAG,OAA/D,SACE,cAAC,KAAD,CAAeC,IAAG,UAAEd,EAAce,WAAhB,iBAAE,EAAmBC,aAArB,aAAE,EAA0BC,UAAWjD,OAAQ,GAAIvB,MAAO,OAE9E,eAAC,IAAD,WACGuD,EAAckB,UACb,cAAC,KAAD,CAASlH,MAAM,KAAKL,GAAG,MAAvB,SACGqG,EAAckB,WAGnB,cAAC9B,GAAD,CAAc+B,KAAMC,YAAevB,EAAS,WAA5C,SAAyDwB,YAAaxB,WAG1E,cAAC,KAAD,CAAYyB,QAAQ,OAAOtC,QAxBX,WAChBS,GACFA,IAGFD,KAmBuD,aAAW,mBAA9D,SACE,cAAC,IAAD,CAAWvF,MAAM,OAAOwC,MAAM,cAGtB,OAAXqD,EACC,cAAC,KAAD,CAAMX,EAAE,OAAOtB,UAAU,SAAS3C,WAAW,OAA7C,SACGzB,EAAE,uBAGL,eAAC,IAAD,CAAK8H,UAAW,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,QAASC,UAAU,OAA3E,UACE,eAAC,KAAD,CACEC,oBAAqB,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,kBAC3DC,QAAQ,OACRvC,EAAE,OACFP,aAAa,YACbC,YAAY,aALd,UAOE,eAAC,IAAD,WACE,cAAC,KAAD,CAAM9E,GAAG,KAAKwB,SAAS,OAAO0D,cAAc,YAAYhF,MAAM,aAAaiB,WAAW,OAAOvB,GAAG,MAAhG,SACGF,EAAE,kBAEJyG,EACC,cAAC,KAAD,IAEA,cAAC,EAAD,CACE1F,OAAM,OAAEsF,QAAF,IAAEA,OAAF,EAAEA,EAAQ6B,OAChBlH,YAAkB,OAANqF,QAAM,IAANA,OAAA,EAAAA,EAAQ6B,QAAS,EAAI,IAAM,GACvCjH,WAAiB,OAANoF,QAAM,IAANA,OAAA,EAAAA,EAAQ6B,QAAS,EAAI,UAAY,UAC5CtH,WAAW,gBAIjB,eAAC,IAAD,WACE,cAAC,KAAD,CAAMN,GAAG,KAAKwB,SAAS,OAAO0D,cAAc,YAAYhF,MAAM,aAAaiB,WAAW,OAAOvB,GAAG,MAAhG,SACGF,EAAE,cAEJyG,EACC,cAAC,KAAD,IAEA,cAAC,KAAD,CAAMhF,WAAW,OAAjB,0BAA4B4E,QAA5B,IAA4BA,GAA5B,UAA4BA,EAAQ8B,eAApC,aAA4B,EAAiBzG,oBAAeC,EAAW,CACrEC,sBAAuB,EACvBC,sBAAuB,IAFzB,UAMJ,eAAC,IAAD,WACE,cAAC,KAAD,CAAMvB,GAAG,KAAKwB,SAAS,OAAO0D,cAAc,YAAYhF,MAAM,aAAaiB,WAAW,OAAOvB,GAAG,MAAhG,SACGF,EAAE,gBAEJyG,EAAY,cAAC,KAAD,IAAe,cAAC,KAAD,CAAMhF,WAAW,OAAjB,gBAAyB4E,QAAzB,IAAyBA,GAAzB,UAAyBA,EAAQ+B,wBAAjC,aAAyB,EAA0B1G,sBAEjF,eAAC,IAAD,WACE,cAAC,KAAD,CAAMpB,GAAG,KAAKwB,SAAS,OAAO0D,cAAc,YAAYhF,MAAM,aAAaiB,WAAW,OAAOvB,GAAG,MAAhG,SACGF,EAAE,mBAEJyG,EAAY,cAAC,KAAD,IAAe,cAAC,KAAD,CAAMhF,WAAW,OAAjB,gBAAyB4E,QAAzB,IAAyBA,GAAzB,UAAyBA,EAAQgC,iBAAjC,aAAyB,EAAmB3G,yBAG3EmF,EAAY,cAAC,GAAD,CAAkB1D,QAASiD,IAAc,cAAC,GAAD,CAAiBjD,QAASiD,W,YC7HpFkC,GAAgBpG,YAAOqG,IAAPrG,CAAH,0IAIf,qBAAGE,MAAkBI,aAAaC,MAOhC+F,GAAkBtG,YAAOqG,IAAPrG,CAAH,wEAGjB,qBAAGE,MAAkBI,aAAaC,MAqCvBgG,GAhCmC,SAAC,GAAwB,IAAD,IAArB3E,EAAqB,EAArBA,KAASnD,EAAY,kBAChEX,EAAMC,cAAND,EACFuG,EAAgBC,YAAoB1C,EAAKe,IAC/C,EAAoC6D,aAAS,cAAC,GAAD,CAAkBvF,QAASW,EAAKe,MAAtE8D,EAAP,oBAEA,OACE,eAAC,KAAD,CACEC,UACE,eAAC,KAAD,yBAAMhI,WAAW,UAAaD,GAA9B,cACE,eAAC6H,GAAD,WACE,cAAC,KAAD,CAAMhI,MAAM,UAAUiB,WAAW,OAAjC,SACG8E,EAAckB,UAAYG,YAAa9D,EAAKe,MACvC,OAEV,cAACyD,GAAD,CACEtF,MAAO,CAAC,OAAQ,KAAM,KAAM,KAAM,KAAM,QACxCuB,OAAQ,CAAC,OAAQ,KAAM,KAAM,KAAM,KAAM,QAF3C,SAIE,cAAC,KAAD,CAAe8C,IAAG,UAAEd,EAAce,WAAhB,iBAAE,EAAmBC,aAArB,aAAE,EAA0BC,UAAWjD,OAAQ,GAAIvB,MAAO,WAIlF6F,QAAS,CAAEC,UAAW,gBAhBxB,UAkBE,cAAC,KAAD,CAAavD,QAASoD,EAAtB,SAAkD3I,EAAE,gBACpD,cAAC,KAAD,CAAaM,GAAIyI,KAAMrB,KAAMC,YAAe7D,EAAKe,GAAI,WAAYmE,MAAM,EAAOxI,MAAM,OAAOyI,UAAQ,EAAnG,SACGjJ,EAAE,yB,mBChBIkJ,GAhC+B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMrF,EAAT,EAASA,KAASnD,EAAlB,yBAC5C,+CAAQA,GAAR,cACGwI,EACC,cAAC,KAAD,UACE,cAAC,KAAD,CAAM/E,UAAU,SAAS3C,WAAW,OAAOjB,MAAM,YAAjD,oBAAkE2I,OAGpE,cAAC,KAAD,IAEF,cAAC,KAAD,UACE,cAAC,GAAD,CAAcrF,KAAMA,MAEtB,cAAC,KAAD,UACE,cAAC,EAAD,CACE/C,OAAQ+C,EAAKoE,OACblH,WAAY8C,EAAKoE,OAAS,EAAI,IAAM,GACpCjH,UAAW6C,EAAKoE,OAAS,EAAI,UAAY,cAG7C,cAAC,KAAD,CAAI9D,UAAU,SAAd,mBACMN,EAAKqE,QAAQzG,oBAAeC,EAAW,CACzCC,sBAAuB,EACvBC,sBAAuB,IAH3B,OAMA,cAAC,KAAD,CAAIuC,UAAU,SAAd,SACE,iCAASN,EAAKsE,iBAAiB1G,qBAEjC,cAAC,KAAD,CAAI0C,UAAU,SAAd,SAAwBN,EAAKuE,UAAU3G,wBCA5B0H,GA5BuC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC/CrJ,EAAMC,cAAND,EAER,OACE,cAACsJ,EAAA,EAAD,CAAWpJ,GAAG,OAAd,SACE,cAAC,IAAD,UACE,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,CAAI8C,MAAM,OAAV,kBACA,cAAC,KAAD,CAAIoB,UAAU,OAAd,SAAsBpE,EAAE,UACxB,cAAC,KAAD,CAAIoE,UAAU,QAAd,SAAuBpE,EAAE,wBACzB,cAAC,KAAD,UAAKA,EAAE,cACP,cAAC,KAAD,UAAKA,EAAE,gBACP,cAAC,KAAD,UAAKA,EAAE,wBAGX,gCACGqJ,EAAQpF,KAAI,SAACoC,EAAQkD,GAAT,OACX,cAAC,GAAD,CAA4BJ,KAAMI,EAAQ,EAAGzF,KAAMuC,GAAlCA,EAAOxB,iBCjBhC2E,GAAkBtH,YAAOqG,IAAPrG,CAAH,iJACC,qBAAGE,MAAkBqH,KAAKzC,cACnB,qBAAG5E,MAAkBE,OAAOoH,cAG7B,qBAAGtH,MAAkBE,OAAOoH,cAgCzCC,GA5B6B,SAAC,GAAoB,IAAlBR,EAAiB,EAAjBA,KAAMrF,EAAW,EAAXA,KAC3C9D,EAAMC,cAAND,EAER,OACE,eAACwJ,GAAD,CAAiB9D,EAAE,OAAnB,UACE,eAAC,EAAD,CAAKxF,GAAG,OAAR,UACGiJ,EAAO,cAAC,KAAD,CAAM1H,WAAW,OAAOjB,MAAM,YAA9B,oBAA+C2I,KAAiB,wBACxE,cAAC,GAAD,CAAcrF,KAAMA,OAEtB,eAAC,EAAD,CAAK5D,GAAG,MAAR,UACE,cAAC,KAAD,CAAM4B,SAAS,OAAOtB,MAAM,aAA5B,SACGR,EAAE,cAEL,cAAC,KAAD,CAAMyB,WAAW,OAAjB,mBACMqC,EAAKqE,QAAQzG,oBAAeC,EAAW,CAAEC,sBAAuB,EAAGC,sBAAuB,IADhG,UAIF,cAAC,EAAD,CAAgBd,OAAQ+C,EAAKoE,SAC7B,eAAC,EAAD,WACE,cAAC,KAAD,CAAMpG,SAAS,OAAOtB,MAAM,aAA5B,SACGR,EAAE,gBAEL,cAAC,KAAD,CAAMyB,WAAW,OAAjB,mBAA4BqC,EAAKsE,iBAAiB1G,iBAAlD,YAAsEoC,EAAKuE,UAAU3G,2BCzB9EkI,GAVqC,SAAC,GAAiB,IAAfP,EAAc,EAAdA,QACrD,OACE,cAAC,IAAD,CAAKnJ,GAAG,OAAR,SACGmJ,EAAQpF,KAAI,SAACoC,EAAQkD,GAAT,OACX,cAAC,GAAD,CAA2BJ,KAAMI,EAAQ,EAAGzF,KAAMuC,GAAlCA,EAAOxB,UCiBzBgF,GAAwB3H,YAAO4H,KAAP5H,CAAH,yDAIrB6H,GAAyB7H,YAAO8H,KAAP9H,CAAH,0DAqEb+H,GArDiC,SAAC,GAAoB,IAAD,IAAjBd,EAAiB,EAAjBA,KAAMrF,EAAW,EAAXA,KAC/C9D,EAAMC,cAAND,EACFkK,EAdgB,SAACf,GACvB,OAAa,IAATA,EACK,SAGI,IAATA,EACK,SAGF,OAKWgB,CAAgBhB,GAC5B5C,EAAgBC,YAAoB1C,EAAKe,IAC/C,EAAoC6D,aAAS,cAAC,GAAD,CAAkBvF,QAASW,EAAKe,MAAtE8D,EAAP,oBAEA,OACE,cAAC,IAAD,CAAMyB,OAAQ,cAAC,IAAD,CAAYC,aAAcH,EAAWrE,KAAI,WAAMsD,GAAQmB,eAAe,SAApF,SACE,eAAC,IAAD,CAAU5E,EAAE,OAAZ,UACE,cAAC,KAAD,CAAM9E,WAAW,SAASC,eAAe,SAASW,cAAc,SAAStB,GAAG,OAA5E,SACE,eAAC,KAAD,CACE0I,UACE,qCACE,eAAC,KAAD,CAAM1I,GAAG,MAAT,UACE,cAAC2J,GAAD,CAAuBrJ,MAAO0J,EAAWlH,MAAM,SAC/C,cAAC,IAAD,CAAKA,MAAO,CAAC,OAAQ,KAAM,KAAM,QAASuB,OAAQ,CAAC,OAAQ,KAAM,KAAM,QAAvE,SACE,cAAC,KAAD,CAAe8C,IAAG,UAAEd,EAAce,WAAhB,iBAAE,EAAmBC,aAArB,aAAE,EAA0BC,UAAWjD,OAAQ,GAAIvB,MAAO,OAE9E,cAAC+G,GAAD,CAAwBvJ,MAAO0J,EAAWlH,MAAM,YAElD,cAAC,KAAD,CAAMxC,MAAM,UAAUiB,WAAW,OAAO2C,UAAU,SAAlD,SACGmC,EAAckB,UAAYG,YAAa9D,EAAKe,SAInDgE,QAAS,CAAEC,UAAW,UAfxB,UAiBE,cAAC,KAAD,CAAavD,QAASoD,EAAtB,SAAkD3I,EAAE,gBACpD,cAAC,KAAD,CAAaM,GAAIyI,KAAMrB,KAAMC,YAAe7D,EAAKe,GAAI,WAAYmE,MAAM,EAAOxI,MAAM,OAAOyI,UAAQ,EAAnG,SACGjJ,EAAE,0BAIT,eAAC,EAAD,CAAKE,GAAG,MAAR,UACE,cAAC,KAAD,CAAM4B,SAAS,OAAOtB,MAAM,aAA5B,SACGR,EAAE,cAEL,cAAC,KAAD,CAAMyB,WAAW,OAAjB,mBACMqC,EAAKqE,QAAQzG,oBAAeC,EAAW,CAAEC,sBAAuB,EAAGC,sBAAuB,IADhG,UAIF,cAAC,EAAD,CAAgBd,OAAQ+C,EAAKoE,SAC7B,eAAC,EAAD,WACE,cAAC,KAAD,CAAMpG,SAAS,OAAOtB,MAAM,aAA5B,SACGR,EAAE,gBAEL,cAAC,KAAD,CAAMyB,WAAW,OAAjB,mBAA4BqC,EAAKsE,iBAAiB1G,iBAAlD,YAAsEoC,EAAKuE,UAAU3G,6BCnChF6I,GA3CC,WACd,ICf+BC,EDevB3D,EAAcC,eAAdD,UACA7G,EAAMC,cAAND,EACR,EAAwCyK,cAAxC,GCjB+BD,EDiB/B,EChBO,OAAAE,EAAA,GAAeF,IAAQ,OAAAG,EAAA,GAAgBH,IAAQ,OAAAI,EAAA,GAA2BJ,IAAQ,OAAAK,EAAA,MDgBlFC,EAAP,KAAcC,EAAd,KAAsBC,EAAtB,KAAgCC,EAAhC,WAEMxE,EAD0BC,gBACcC,IAAwBC,QAChEsE,EAAcC,cACdC,EAAiBC,cACjBC,EAAWC,cAMjB,OACE,eAAC,IAAD,WACE,cAACjC,EAAA,EAAD,CAAWpJ,GAAG,OAAd,SACE,eAAC,KAAD,CACE+H,QAAS,CAAC,OAAQ,KAAM,KAAM,KAAM,KAAM,QAC1CD,oBAAqB,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,kBAFvD,UAIE,cAAC,GAAD,CAAamB,KAAM,EAAGrF,KAAMgH,IAC5B,cAAC,GAAD,CAAa3B,KAAM,EAAGrF,KAAMiH,IAC5B,cAAC,GAAD,CAAa5B,KAAM,EAAGrF,KAAMkH,SAG/BnE,EAAY,cAAC,GAAD,CAAgBwC,QAAS4B,IAAW,cAAC,GAAD,CAAe5B,QAAS4B,IACzE,cAAC,KAAD,CAAM/K,GAAG,OAAOW,eAAe,SAA/B,SACGuK,GACC,cAAC,IAAD,CACEvD,QAAQ,YACRpB,UAAWA,EACX+E,QAAS/E,EAAY,cAAC,IAAD,CAAegF,MAAI,EAACjL,MAAM,sBAAoBmB,EACnE4D,QAvBU,WAClB+F,EAASI,YAA0BR,EAAcS,OAkB3C,SAMe3L,EAAZyG,EAAc,aAAkB,qB,UES9BmF,GAlDe,WAC5B,IAAQzI,EAAY0I,cAAZ1I,QACAnD,EAAMC,cAAND,EACFsL,EAAWC,cACXO,EAAgBxF,YAAsCnD,GACpD0D,EAAcC,eAAdD,UASR,OAPAlD,qBAAU,WACJR,IACFmI,EAASS,aAAmB5I,IAC5BmI,EAASU,YAAmB7I,OAE7B,CAACA,EAASmI,IAERnI,GAAY2I,EAKf,eAACxC,EAAA,EAAD,CAAWpJ,GAAG,OAAd,UACE,cAAC,KAAD,CAASI,GAAG,KAAKC,MAAM,KAAKC,MAAM,YAAYN,GAAG,OAAjD,SACGF,EAAE,iBAEJ6G,EACC,cAAC,IAAD,CAAMoF,UAAQ,EAAd,SACE,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,CAAIjJ,MAAM,OAAV,kBACA,cAAC,KAAD,CAAIoB,UAAU,OAAd,kBACA,cAAC,KAAD,CAAIA,UAAU,QAAd,SAAuBpE,EAAE,wBACzB,cAAC,KAAD,CAAIoE,UAAU,SAAd,SAAwBpE,EAAE,cAC1B,cAAC,KAAD,UAAKA,EAAE,gBACP,cAAC,KAAD,UAAKA,EAAE,wBAGX,gCACE,cAAC,GAAD,CAAY8D,KAAMgI,WAKxB,cAAC,IAAD,CAAMG,UAAQ,EAAd,SACE,cAAC,GAAD,CAAWnI,KAAMgI,SA5BhB,M,oBCIII,GAxBO,WACpB,IAAMZ,EAAWC,cAMjB,EAAoC7C,aAAS,cAAC,GAAD,CAAkB1C,gBAJnC,WAC1BsF,EAASa,YAAmB,WAGvBxD,EAAP,oBACMyD,EAAqBC,sBAAW,uCACpC,WAAOjL,GAAP,iBAAAwC,EAAA,sEAC8B0H,EAASU,YAAmB5K,IAD1D,cACQ4C,EADR,8BAEoCrC,KAA3B,UAAAqC,EAASsI,eAAT,eAAkBC,OAF3B,2CADoC,sDAKpC,CAACjB,IAGGkB,EAAkB,uCAAG,WAAOpL,GAAP,SAAAwC,EAAA,sEACnB0H,EAASa,YAAmB/K,IADT,OAEzBuH,IAFyB,2CAAH,sDAKxB,OAAO,cAAC8D,GAAA,EAAD,CAAoBC,eAAgBF,EAAoBG,eAAgBP,KClB3EQ,GAAgB1K,YAAOqG,IAAPrG,CAAH,yJAKf,qBAAGE,MAAkBI,aAAaC,MAMhCoK,GAAgB3K,YAAOqG,IAAPrG,CAAH,0GAIf,qBAAGE,MAAkBI,aAAaC,MAyCvBqK,GAnCC,WACd,IAAQ9M,EAAMC,cAAND,EACFsL,EAAWC,cACXwB,EAAiB,CACrB,CAAEC,MAAOhN,EAAE,gBAAiBoB,MAAO,UACnC,CAAE4L,MAAOhN,EAAE,aAAcoB,MAAO,YAChC,CAAE4L,MAAOhN,EAAE,iBAAkBoB,MAAO,aACpC,CAAE4L,MAAOhN,EAAE,YAAaoB,MAAO,YAOjC,OACE,eAACkI,EAAA,EAAD,CAAWpE,GAAG,OAAd,UACE,cAAC,KAAD,CAAMM,cAAc,YAAY1D,SAAS,OAAOtB,MAAM,aAAaiB,WAAW,OAAOvB,GAAG,MAAxF,SACGF,EAAE,aAEL,eAAC,KAAD,CACEwB,cAAe,CAAC,SAAU,KAAM,KAAM,KAAM,KAAM,OAClDZ,WAAY,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,UAC9CC,eAAgB,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,iBAHpD,UAKE,cAACgM,GAAD,UACE,cAACI,GAAA,EAAD,CAAQpE,QAASkE,EAAgBG,eAfnB,SAACC,GACrB7B,EAAS8B,YAAqB,CAAE1J,QAASyJ,EAAO/L,cAgB5C,cAACwL,GAAD,UACE,cAAC,GAAD,aCrBKS,UAzBK,WAClB,IAAMC,EAA0B5G,cAC1B6G,EAAUC,cACRrK,EAAY0I,cAAZ1I,QACFmI,EAAWC,cAMjB,OAJA5H,qBAAU,WACR2H,EAASmC,YAAkB,CAAEF,eAC5B,CAACpK,EAASoK,EAASjC,IAElBgC,IAA4B3G,IAAwB+G,QAC/C,cAACC,EAAA,EAAD,IAIP,qCACE,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,S,u8BCvBOC,EAAe,WAC1B,IAAMC,EAASC,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYH,UAC/D,OAAOI,OAAOC,KAAKL,GAAQM,QAAO,SAACC,EAAO1J,GACxC,OAAO,2BACF0J,GADL,kBAEG1J,EAAQ2J,YAA6CR,EAAOnJ,QAE9D,KAQQ4J,EAAqB,WAChC,IAAMC,EAAYX,IAClB,OAAOnK,kBAAQwK,OAAOO,OAAOD,GAAY,CAAC,SAAU,CAAC,SAG1CE,EAAmB,SAACvL,EAAiBwB,GAChD,IAAMpB,EAAOwK,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYU,WAE7D,OAAKpL,EAAKJ,IAILI,EAAKJ,GAASwB,GAIZ2J,YAA+C/K,EAAKJ,GAASwB,IAP3D,MAUEiK,EAAoB,SAACjK,GAEhC,OAD0BoJ,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYY,qBACjDlK,KAAU,GAMxBmK,EAAsB,WACjC,OAAOf,aAAY,SAACC,GAClB,IAAMe,EAAgBC,gBAAMd,OAAOO,OAAOT,EAAMC,YAAYH,QAAS,SACrE,cAAOiB,QAAP,IAAOA,OAAP,EAAOA,EAAepK,UAIbsK,EAAuB,WAClC,OAAOlB,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYiB,sBAG5CC,EAAqB,WAChC,OAAOpB,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYmB,oBAG5CC,EAAqB,WAChC,OAAOtB,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYqB,iBAG5CC,EAAwB,WACnC,OAAOxB,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYuB,oBAS5CC,EAA0B,WACrC,OAAO1B,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYyB,WAG5CC,EAAsB,WACjC,OAAO5B,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAY2B,kBAG5CC,EAAyB,WACpC,OAAO9B,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAY6B,qBAG5CC,EAA2B,WACtC,OAAOhC,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAY+B,uBAG5CC,EAAqB,WAChC,IAAMC,EAAenC,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYiC,gBACrE,OAAOC,mBAAQ,kBAAMC,IAAOC,UAAUC,KAAKJ,KAAe,CAACA,KAGhDK,EAAsB,WACjC,OAAOxC,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYuC,kBAG5CC,EAA0B,WACrC,OAAO1C,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYyC,sBAG5CC,EAAgB,WAC3B,OAAO5C,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAY2C,YAG5CC,EAAwB,WACnC,IAAMC,EAAkB/C,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAY6C,mBACxE,OAAOX,mBAAQ,WACb,OAAOC,IAAOC,UAAUC,KAAKQ,KAC5B,CAACA,KAMOC,EAAkC,WAC7C,IAAMC,EAlD0B,WAChC,IAAM1B,EAAeD,IAErB,OADexB,IACDyB,GA+CO2B,GACfzB,EAAkBD,IAExB,OAAKyB,EAAaE,cAIXF,EAAaE,cAHXF,EAAaG,eAAiB3B,GAO5B9I,EAAgC,WAC3C,OAAOqH,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYmD,YAAYC,iBAGxD5G,EAA2B,WACtC,OAAOsD,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYmD,YAAY/H,YAGxDmE,EAA2B,WACtC,OAAOO,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYmD,YAAY7D,YAGxDpC,EAAwB,WACnC,OAAO4C,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYmD,YAAYE,SAGxDjG,EAAkC,WAC7C,OAAO0C,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYmD,YAAYhG,mBAOxD9E,EAAwC,SAACnD,GACpD,IAAMoO,EAL2B,SAACpO,GAClC,OAAO4K,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYmD,YAAYI,eAAerO,MAI5DsO,CAAoBtO,GACpCmI,EAAWC,cAWjB,OATA5H,qBAAU,WACR,IAAMyC,EAAUsL,YAAUvO,IAGrBoO,GAAmC,OAAlBA,GAA0BnL,GAC9CkF,EAASU,YAAmB7I,MAE7B,CAACmI,EAAUnI,EAASoO,IAEhBA,GAGIpL,EAAwB,WACnC,OAAO4H,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYmD,YAAYlL,qB,oBCjLrE,IAAIyL,EAAYC,EAAQ,KACpBC,EAAeD,EAAQ,KACvBE,EAAYF,EAAQ,KAMpBG,EAAmB,WAGnBC,EAAY1Q,KAAK2Q,IAuCrBC,EAAOC,QAlBP,SAAeC,EAAGC,GAEhB,IADAD,EAAIN,EAAUM,IACN,GAAKA,EA7BQ,iBA8BnB,MAAO,GAET,IAAI7I,EAAQwI,EACRO,EAASN,EAAUI,EAAGL,GAE1BM,EAAWR,EAAaQ,GACxBD,GAAKL,EAGL,IADA,IAAI1L,EAASsL,EAAUW,EAAQD,KACtB9I,EAAQ6I,GACfC,EAAS9I,GAEX,OAAOlD,I,oBC/CT,IAAIkM,EAAWX,EAAQ,KAmCvBM,EAAOC,QAPP,SAAmB/Q,GACjB,IAAIiF,EAASkM,EAASnR,GAClBoR,EAAYnM,EAAS,EAEzB,OAAOA,IAAWA,EAAUmM,EAAYnM,EAASmM,EAAYnM,EAAU,I,oBChCzE,IAAIoM,EAAWb,EAAQ,KAavBM,EAAOC,QAJP,SAAsB/Q,GACpB,MAAuB,mBAATA,EAAsBA,EAAQqR,I,yCCHzCC,E,0JAAAA,O,yBAAAA,I,iBAAAA,I,0BAAAA,M,KAWL,IAAMC,EAAUzQ,IAAOC,IAAV,wXAEG,qBAAGC,MAAkBE,OAAOsQ,SACtB,qBAAGxQ,MAAkBE,OAAOuQ,kBAC3B,qBAAGzQ,MAAkB0Q,MAAMC,WAAW,qBAAG3Q,MAAkB0Q,MAAMC,WAYpF,qBAAGhO,QACG,yEAQJiO,EAAc9Q,YAAO+Q,KAAP/Q,CAAH,mJAQXgR,EAAe,CACnB7P,YAAY,EACZ8P,YAAaT,EAAaU,UAC1BhS,MAAO,IAGHiS,EAA6B,kBAAMC,QAAQC,SAAQ,IA4E1C9G,IA1E+C,SAAC,GAIxD,IAAD,IAHJE,sBAGI,MAHa0G,EAGb,EAFJ3G,EAEI,EAFJA,eACG/L,EACC,iBACJ,EAA0ByC,mBAAS8P,GAAnC,mBAAOlF,EAAP,KAAcwF,EAAd,KACQxT,EAAMC,cAAND,EACAqD,EAAmC2K,EAAnC3K,WAAY8P,EAAuBnF,EAAvBmF,YAAa/R,EAAU4M,EAAV5M,MAyCjC,OAzBAuC,qBAAU,YACoC,IAArB+N,YAAUtQ,GAER,uCAAG,4BAAAwC,EAAA,sEAExB4P,GAAS,SAACC,GAAD,mBAAC,eAAoBA,GAArB,IAAgCpQ,YAAY,OAF7B,SAGCsJ,EAAevL,GAHhB,OAGlBsS,EAHkB,OAKxBF,GAAS,SAACC,GAAD,mBAAC,eACLA,GADI,IAEPpQ,YAAY,EACZ8P,YAAaO,EAAahB,EAAaiB,MAAQjB,EAAakB,eARtC,gDAWxBJ,GAAS,SAACC,GAAD,mBAAC,eAAoBA,GAArB,IAAgCpQ,YAAY,OAX7B,yDAAH,oDAgBvBwQ,GAEAL,GAAS,SAACC,GAAD,mBAAC,eAAoBA,GAArB,IAAgCN,YAAaT,EAAaU,iBAEpE,CAAChS,EAAOuL,EAAgB6G,IAGzB,eAAC,IAAD,yBAAK7Q,SAAS,YAAehC,GAA7B,cACE,cAAC,KAAD,CACEmT,YAAa9T,EAAE,mBAAoB,CAAE+T,QAAS/T,EAAE,WAAW+D,gBAC3D3C,MAAO4M,EAAM5M,MACb4S,SA5Ce,SAACC,GACpB,IAAeC,EAAaD,EAAIE,OAAxB/S,MACRoS,GAAS,SAACC,GAAD,mBAAC,eACLA,GADI,IAEPrS,MAAO8S,QAyCL7O,MAAO,CAAE1C,SAAU,WAAYyR,OAAQ,GAAIC,aAAc,UAE1DhR,GACC,cAAC,IAAD,CAAKV,SAAS,WAAW2R,IAAI,OAAOC,MAAM,OAAOlP,MAAO,CAAE+O,OAAQ,IAAlE,SACE,cAAC,IAAD,MAGJ,cAACzB,EAAD,CAAS5N,OAAQoO,IAAgBT,EAAaU,UAA9C,SACGD,IAAgBT,EAAaiB,MAC5B,cAACX,EAAD,CAAazN,QA9CD,WAClBiO,EAASN,GACTxG,EAAesB,EAAM5M,QA4Cf,SAAoC4M,EAAM5M,QAE1C,cAAC,KAAD,CAAM6D,GAAG,OAAOxD,WAAW,OAA3B,SACGzB,EAAE","file":"static/js/24.0cd2ca2e.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Box, Breadcrumbs, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst Crumbs = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Box mb=\"24px\">\n      <Breadcrumbs>\n        <Link to=\"/\">{t('Home')}</Link>\n        <Link to=\"/prediction\">{t('Prediction')}</Link>\n        <Text>{t('Leaderboard')}</Text>\n      </Breadcrumbs>\n    </Box>\n  )\n}\n\nexport default Crumbs\n","import React from 'react'\nimport { Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport PageHeader from 'components/PageHeader'\nimport Crumbs from './Crumbs'\n\nconst Hero = () => {\n  const { t } = useTranslation()\n\n  return (\n    <PageHeader>\n      <Crumbs />\n      <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\">\n        {t('Leaderboard')}\n      </Heading>\n    </PageHeader>\n  )\n}\n\nexport default Hero\n","import React from 'react'\nimport { Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\n\nexport const Row: React.FC<FlexProps> = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\ninterface NetWinningsProps extends FlexProps {\n  amount: number\n  textPrefix?: string\n  textColor?: string\n}\n\nexport const NetWinnings: React.FC<NetWinningsProps> = ({ amount, textPrefix = '', textColor = 'text', ...props }) => {\n  const bnbBusdPrice = useBNBBusdPrice()\n  const value = multiplyPriceByAmount(bnbBusdPrice, Math.abs(amount))\n\n  if (!amount) {\n    return null\n  }\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\" {...props}>\n      <Text fontWeight=\"bold\" color={textColor}>\n        {`${textPrefix}${amount.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 6 })}`}\n      </Text>\n      <Text fontSize=\"12px\" color=\"textSubtle\" lineHeight={1}>\n        {`~$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\n      </Text>\n    </Flex>\n  )\n}\n\nexport const NetWinningsRow: React.FC<{ amount: number }> = ({ amount }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row mb=\"4px\">\n      <Text fontSize=\"12px\" color=\"textSubtle\">\n        {t('Net Winnings (BNB)')}\n      </Text>\n      <NetWinnings amount={amount} textPrefix={amount > 0 ? '+' : ''} textColor={amount > 0 ? 'success' : 'failure'} />\n    </Row>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ArrowDownIcon, ArrowUpIcon } from '@pancakeswap/uikit'\nimport { BetPosition } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface PositionLabelProps {\n  position: BetPosition\n}\n\nconst StyledPositionLabel = styled.div<{ bgColor: string }>`\n  align-items: center;\n  background-color: ${({ theme, bgColor }) => theme.colors[bgColor]};\n  border-radius: 4px;\n  display: inline-flex;\n  justify-content: center;\n  height: 32px;\n  min-width: 16px;\n  padding-left: 8px;\n  padding-right: 8px;\n`\n\nconst Label = styled.div`\n  color: #fff;\n  display: none;\n  text-transform: uppercase;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: block;\n    margin-left: 4px;\n  }\n`\n\nconst PositionLabel: React.FC<PositionLabelProps> = ({ position }) => {\n  const { t } = useTranslation()\n  const isBull = position === BetPosition.BULL\n  const bgColor = isBull ? 'success' : 'failure'\n  const icon = isBull ? <ArrowUpIcon width=\"24px\" color=\"white\" /> : <ArrowDownIcon width=\"24px\" color=\"white\" />\n\n  return (\n    <StyledPositionLabel bgColor={bgColor}>\n      {icon}\n      <Label>{isBull ? t('Up') : t('Down')}</Label>\n    </StyledPositionLabel>\n  )\n}\n\nexport default PositionLabel\n","import React, { useEffect, useState } from 'react'\nimport times from 'lodash/times'\nimport orderBy from 'lodash/orderBy'\nimport { Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory, transformBetResponse } from 'state/predictions/helpers'\nimport { Bet } from 'state/types'\nimport PositionLabel from './PositionLabel'\nimport { NetWinnings } from './Results/styles'\n\ninterface PreviousBetsTableProps {\n  numberOfBets?: number\n  account: string\n}\n\nconst PreviousBetsTable: React.FC<PreviousBetsTableProps> = ({ numberOfBets = 5, account }) => {\n  const [isFetching, setIsFetching] = useState(false)\n  const [bets, setBets] = useState<Bet[]>([])\n  const { t } = useTranslation()\n  const orderedBets = orderBy(bets, ['round.epoch'], ['desc'])\n\n  useEffect(() => {\n    const fetchBetHistory = async () => {\n      setIsFetching(true)\n      try {\n        const response = await getBetHistory(\n          {\n            user: account.toLowerCase(),\n          },\n          numberOfBets,\n        )\n\n        setBets(response.map(transformBetResponse))\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    fetchBetHistory()\n  }, [account, numberOfBets, setIsFetching, setBets])\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <Th>{t('Round')}</Th>\n          <Th>{t('Direction')}</Th>\n          <Th textAlign=\"right\">{t('Winnings (BNB)')}</Th>\n        </tr>\n      </thead>\n      <tbody>\n        {isFetching\n          ? times(numberOfBets).map((num) => (\n              <tr key={num}>\n                <Td>\n                  <Skeleton width=\"80px\" />\n                </Td>\n                <Td>\n                  <Skeleton width=\"60px\" height=\"32px\" />\n                </Td>\n                <Td>\n                  <Skeleton width=\"80px\" />\n                </Td>\n              </tr>\n            ))\n          : orderedBets.map((bet) => {\n              const isWinner = bet.position === bet.round.position\n\n              return (\n                <tr key={bet.id}>\n                  <Td textAlign=\"center\" fontWeight=\"bold\">\n                    {bet.round.epoch.toLocaleString()}\n                  </Td>\n                  <Td textAlign=\"center\">\n                    <PositionLabel position={bet.position} />\n                  </Td>\n                  <Td textAlign=\"right\">\n                    <NetWinnings\n                      amount={isWinner ? bet.claimedNetBNB : bet.amount}\n                      textPrefix={isWinner ? '+' : '-'}\n                      textColor={isWinner ? 'success' : 'failure'}\n                    />\n                  </Td>\n                </tr>\n              )\n            })}\n      </tbody>\n    </Table>\n  )\n}\n\nexport default PreviousBetsTable\n","import React, { useState } from 'react'\nimport { Flex, Text, ChevronUpIcon, ChevronDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport PreviousBetsTable from './PreviousBetsTable'\n\ninterface MobileBetsTableProps {\n  account: string\n}\n\nconst MobileBetsTable: React.FC<MobileBetsTableProps> = ({ account }) => {\n  const { t } = useTranslation()\n  const [isOpen, setIsOpen] = useState(false)\n\n  const handleToggle = () => setIsOpen(!isOpen)\n\n  return (\n    <>\n      <Flex\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        px=\"24px\"\n        py=\"32px\"\n        borderBottom=\"1px solid\"\n        borderColor=\"cardBorder\"\n        style={{ cursor: 'pointer' }}\n        onClick={handleToggle}\n      >\n        <Text as=\"h5\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\" fontSize=\"12px\">\n          {t('Last %num% Bets', { num: 5 })}\n        </Text>\n        {isOpen ? <ChevronDownIcon /> : <ChevronUpIcon />}\n      </Flex>\n      {isOpen && <PreviousBetsTable account={account} />}\n    </>\n  )\n}\n\nexport default MobileBetsTable\n","import React from 'react'\nimport { Box, Card, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport PreviousBetsTable from '../PreviousBetsTable'\n\ninterface DesktopBetsTableProps {\n  account: string\n}\n\nconst DesktopBetsTable: React.FC<DesktopBetsTableProps> = ({ account }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Box p=\"24px\">\n      <Text as=\"h5\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\" fontSize=\"12px\" mb=\"16px\">\n        {t('Last %num% Bets', { num: 5 })}\n      </Text>\n      <Card>\n        <PreviousBetsTable account={account} />\n      </Card>\n    </Box>\n  )\n}\n\nexport default DesktopBetsTable\n","import React from 'react'\nimport {\n  Box,\n  CloseIcon,\n  Flex,\n  Grid,\n  Text,\n  IconButton,\n  InjectedModalProps,\n  LinkExternal,\n  ModalContainer,\n  ModalHeader,\n  ProfileAvatar,\n  useMatchBreakpoints,\n  Skeleton,\n  Heading,\n} from '@pancakeswap/uikit'\nimport { useGetProfileAvatar } from 'state/profile/hooks'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport { LeaderboardLoadingState } from 'state/types'\nimport {\n  useGetOrFetchLeaderboardAddressResult,\n  useGetLeaderboardLoadingState,\n  useGetSelectedAddress,\n} from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { NetWinnings } from './Results/styles'\nimport MobileBetsTable from './MobileBetsTable'\nimport DesktopBetsTable from './Results/DesktopBetsTable'\n\ninterface WalletStatsModalProps extends InjectedModalProps {\n  account?: string\n  onBeforeDismiss?: () => void\n}\n\nconst ExternalLink = styled(LinkExternal)`\n  color: ${({ theme }) => theme.colors.text};\n\n  svg {\n    fill: ${({ theme }) => theme.colors.text};\n  }\n`\n\nconst WalletStatsModal: React.FC<WalletStatsModalProps> = ({ account, onDismiss, onBeforeDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const selectedAddress = useGetSelectedAddress()\n  const address = account || selectedAddress\n  const result = useGetOrFetchLeaderboardAddressResult(address)\n  const profileAvatar = useGetProfileAvatar(address)\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\n  const isLoading = leaderboardLoadingState === LeaderboardLoadingState.LOADING\n  const { isDesktop } = useMatchBreakpoints()\n\n  const handleDismiss = () => {\n    if (onBeforeDismiss) {\n      onBeforeDismiss()\n    }\n\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer minWidth=\"320px\">\n      <ModalHeader background={theme.colors.gradients.bubblegum}>\n        <Flex alignItems=\"center\" style={{ flex: 1 }}>\n          <Box width={['64px', null, null, null, null, null, '96px']} mr=\"16px\">\n            <ProfileAvatar src={profileAvatar.nft?.image?.thumbnail} height={96} width={96} />\n          </Box>\n          <Box>\n            {profileAvatar.username && (\n              <Heading scale=\"lg\" mb=\"8px\">\n                {profileAvatar.username}\n              </Heading>\n            )}\n            <ExternalLink href={getBscScanLink(address, 'address')}>{truncateHash(address)}</ExternalLink>\n          </Box>\n        </Flex>\n        <IconButton variant=\"text\" onClick={handleDismiss} aria-label=\"Close the dialog\">\n          <CloseIcon color=\"text\" width=\"24px\" />\n        </IconButton>\n      </ModalHeader>\n      {result === null ? (\n        <Text p=\"32px\" textAlign=\"center\" fontWeight=\"bold\">\n          {t('No results found.')}\n        </Text>\n      ) : (\n        <Box maxHeight={['500px', null, null, null, null, null, 'none']} overflowY=\"auto\">\n          <Grid\n            gridTemplateColumns={['1fr', null, null, null, null, null, 'repeat(4, 1fr)']}\n            gridGap=\"16px\"\n            p=\"24px\"\n            borderBottom=\"1px solid\"\n            borderColor=\"cardBorder\"\n          >\n            <Box>\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\n                {t('Net Winnings')}\n              </Text>\n              {isLoading ? (\n                <Skeleton />\n              ) : (\n                <NetWinnings\n                  amount={result?.netBNB}\n                  textPrefix={result?.netBNB > 0 ? '+' : ''}\n                  textColor={result?.netBNB > 0 ? 'success' : 'failure'}\n                  alignItems=\"flex-end\"\n                />\n              )}\n            </Box>\n            <Box>\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\n                {t('Win Rate')}\n              </Text>\n              {isLoading ? (\n                <Skeleton />\n              ) : (\n                <Text fontWeight=\"bold\">{`${result?.winRate?.toLocaleString(undefined, {\n                  minimumFractionDigits: 0,\n                  maximumFractionDigits: 2,\n                })}%`}</Text>\n              )}\n            </Box>\n            <Box>\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\n                {t('Rounds Won')}\n              </Text>\n              {isLoading ? <Skeleton /> : <Text fontWeight=\"bold\">{result?.totalBetsClaimed?.toLocaleString()}</Text>}\n            </Box>\n            <Box>\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\n                {t('Rounds Played')}\n              </Text>\n              {isLoading ? <Skeleton /> : <Text fontWeight=\"bold\">{result?.totalBets?.toLocaleString()}</Text>}\n            </Box>\n          </Grid>\n          {isDesktop ? <DesktopBetsTable account={address} /> : <MobileBetsTable account={address} />}\n        </Box>\n      )}\n    </ModalContainer>\n  )\n}\n\nexport default WalletStatsModal\n","import React from 'react'\nimport { Box, Flex, FlexProps, Link, ProfileAvatar, SubMenu, SubMenuItem, useModal, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport { PredictionUser } from 'state/types'\nimport { useGetProfileAvatar } from 'state/profile/hooks'\nimport truncateHash from 'utils/truncateHash'\nimport { useTranslation } from 'contexts/Localization'\nimport WalletStatsModal from '../WalletStatsModal'\n\ninterface ResultAvatarProps extends FlexProps {\n  user: PredictionUser\n}\n\nconst AvatarWrapper = styled(Box)`\n  order: 2;\n  margin-left: 8px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n    margin-left: 0;\n    margin-right: 8px;\n  }\n`\n\nconst UsernameWrapper = styled(Box)`\n  order: 1;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n  }\n`\n\nconst ResultAvatar: React.FC<ResultAvatarProps> = ({ user, ...props }) => {\n  const { t } = useTranslation()\n  const profileAvatar = useGetProfileAvatar(user.id)\n  const [onPresentWalletStatsModal] = useModal(<WalletStatsModal account={user.id} />)\n\n  return (\n    <SubMenu\n      component={\n        <Flex alignItems=\"center\" {...props}>\n          <UsernameWrapper>\n            <Text color=\"primary\" fontWeight=\"bold\">\n              {profileAvatar.username || truncateHash(user.id)}\n            </Text>{' '}\n          </UsernameWrapper>\n          <AvatarWrapper\n            width={['32px', null, null, null, null, '40px']}\n            height={['32px', null, null, null, null, '40px']}\n          >\n            <ProfileAvatar src={profileAvatar.nft?.image?.thumbnail} height={40} width={40} />\n          </AvatarWrapper>\n        </Flex>\n      }\n      options={{ placement: 'bottom-start' }}\n    >\n      <SubMenuItem onClick={onPresentWalletStatsModal}>{t('View Stats')}</SubMenuItem>\n      <SubMenuItem as={Link} href={getBscScanLink(user.id, 'address')} bold={false} color=\"text\" external>\n        {t('View on BscScan')}\n      </SubMenuItem>\n    </SubMenu>\n  )\n}\n\nexport default ResultAvatar\n","import React from 'react'\nimport { Td, Text } from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport ResultAvatar from './ResultAvatar'\nimport { NetWinnings } from './styles'\n\ninterface DesktopRowProps {\n  rank?: number\n  user: PredictionUser\n}\n\nconst DesktopRow: React.FC<DesktopRowProps> = ({ rank, user, ...props }) => (\n  <tr {...props}>\n    {rank ? (\n      <Td>\n        <Text textAlign=\"center\" fontWeight=\"bold\" color=\"secondary\">{`#${rank}`}</Text>\n      </Td>\n    ) : (\n      <Td />\n    )}\n    <Td>\n      <ResultAvatar user={user} />\n    </Td>\n    <Td>\n      <NetWinnings\n        amount={user.netBNB}\n        textPrefix={user.netBNB > 0 ? '+' : ''}\n        textColor={user.netBNB > 0 ? 'success' : 'failure'}\n      />\n    </Td>\n    <Td textAlign=\"center\">\n      {`${user.winRate.toLocaleString(undefined, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 2,\n      })}%`}\n    </Td>\n    <Td textAlign=\"center\">\n      <strong>{user.totalBetsClaimed.toLocaleString()}</strong>\n    </Td>\n    <Td textAlign=\"center\">{user.totalBets.toLocaleString()}</Td>\n  </tr>\n)\n\nexport default DesktopRow\n","import React from 'react'\nimport { Card, Table, Th } from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport Container from 'components/Layout/Container'\nimport { useTranslation } from 'contexts/Localization'\nimport DesktopRow from './DesktopRow'\n\ninterface DesktopResultsProps {\n  results: PredictionUser[]\n}\n\nconst DesktopResults: React.FC<DesktopResultsProps> = ({ results }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Container mb=\"24px\">\n      <Card>\n        <Table>\n          <thead>\n            <tr>\n              <Th width=\"60px\">&nbsp;</Th>\n              <Th textAlign=\"left\">{t('User')}</Th>\n              <Th textAlign=\"right\">{t('Net Winnings (BNB)')}</Th>\n              <Th>{t('Win Rate')}</Th>\n              <Th>{t('Rounds Won')}</Th>\n              <Th>{t('Rounds Played')}</Th>\n            </tr>\n          </thead>\n          <tbody>\n            {results.map((result, index) => (\n              <DesktopRow key={result.id} rank={index + 4} user={result} />\n            ))}\n          </tbody>\n        </Table>\n      </Card>\n    </Container>\n  )\n}\n\nexport default DesktopResults\n","import React from 'react'\nimport { Box, Text } from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { NetWinningsRow, Row } from './styles'\nimport ResultAvatar from './ResultAvatar'\n\ninterface MobileRowProps {\n  rank?: number\n  user: PredictionUser\n}\n\nconst StyledMobileRow = styled(Box)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n\n  &:first-child {\n    border-top: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  }\n`\n\nconst MobileRow: React.FC<MobileRowProps> = ({ rank, user }) => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledMobileRow p=\"16px\">\n      <Row mb=\"16px\">\n        {rank ? <Text fontWeight=\"bold\" color=\"secondary\">{`#${rank}`}</Text> : <div />}\n        <ResultAvatar user={user} />\n      </Row>\n      <Row mb=\"4px\">\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Win Rate')}\n        </Text>\n        <Text fontWeight=\"bold\">\n          {`${user.winRate.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 })}%`}\n        </Text>\n      </Row>\n      <NetWinningsRow amount={user.netBNB} />\n      <Row>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Rounds Won')}\n        </Text>\n        <Text fontWeight=\"bold\">{`${user.totalBetsClaimed.toLocaleString()}/${user.totalBets.toLocaleString()}`}</Text>\n      </Row>\n    </StyledMobileRow>\n  )\n}\n\nexport default MobileRow\n","import React from 'react'\nimport { Box } from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport MobileRow from './MobileRow'\n\ninterface MobileResultsProps {\n  results: PredictionUser[]\n}\n\nconst MobileResults: React.FC<MobileResultsProps> = ({ results }) => {\n  return (\n    <Box mb=\"24px\">\n      {results.map((result, index) => (\n        <MobileRow key={result.id} rank={index + 4} user={result} />\n      ))}\n    </Box>\n  )\n}\n\nexport default MobileResults\n","import React from 'react'\nimport {\n  Box,\n  Card,\n  CardBody,\n  CardRibbon,\n  Flex,\n  ProfileAvatar,\n  LaurelLeftIcon,\n  LaurelRightIcon,\n  Link,\n  Text,\n  SubMenu,\n  SubMenuItem,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport { useGetProfileAvatar } from 'state/profile/hooks'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport { useTranslation } from 'contexts/Localization'\nimport WalletStatsModal from '../WalletStatsModal'\nimport { NetWinningsRow, Row } from './styles'\n\ninterface RankingCardProps {\n  rank: 1 | 2 | 3\n  user: PredictionUser\n}\n\nconst RotatedLaurelLeftIcon = styled(LaurelLeftIcon)`\n  transform: rotate(30deg);\n`\n\nconst RotatedLaurelRightIcon = styled(LaurelRightIcon)`\n  transform: rotate(-30deg);\n`\n\nconst getRankingColor = (rank: number) => {\n  if (rank === 3) {\n    return 'bronze'\n  }\n\n  if (rank === 2) {\n    return 'silver'\n  }\n\n  return 'gold'\n}\n\nconst RankingCard: React.FC<RankingCardProps> = ({ rank, user }) => {\n  const { t } = useTranslation()\n  const rankColor = getRankingColor(rank)\n  const profileAvatar = useGetProfileAvatar(user.id)\n  const [onPresentWalletStatsModal] = useModal(<WalletStatsModal account={user.id} />)\n\n  return (\n    <Card ribbon={<CardRibbon variantColor={rankColor} text={`#${rank}`} ribbonPosition=\"left\" />}>\n      <CardBody p=\"24px\">\n        <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\" mb=\"24px\">\n          <SubMenu\n            component={\n              <>\n                <Flex mb=\"4px\">\n                  <RotatedLaurelLeftIcon color={rankColor} width=\"32px\" />\n                  <Box width={['40px', null, null, '64px']} height={['40px', null, null, '64px']}>\n                    <ProfileAvatar src={profileAvatar.nft?.image?.thumbnail} height={64} width={64} />\n                  </Box>\n                  <RotatedLaurelRightIcon color={rankColor} width=\"32px\" />\n                </Flex>\n                <Text color=\"primary\" fontWeight=\"bold\" textAlign=\"center\">\n                  {profileAvatar.username || truncateHash(user.id)}\n                </Text>\n              </>\n            }\n            options={{ placement: 'bottom' }}\n          >\n            <SubMenuItem onClick={onPresentWalletStatsModal}>{t('View Stats')}</SubMenuItem>\n            <SubMenuItem as={Link} href={getBscScanLink(user.id, 'address')} bold={false} color=\"text\" external>\n              {t('View on BscScan')}\n            </SubMenuItem>\n          </SubMenu>\n        </Flex>\n        <Row mb=\"4px\">\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {t('Win Rate')}\n          </Text>\n          <Text fontWeight=\"bold\">\n            {`${user.winRate.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 })}%`}\n          </Text>\n        </Row>\n        <NetWinningsRow amount={user.netBNB} />\n        <Row>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {t('Rounds Won')}\n          </Text>\n          <Text fontWeight=\"bold\">{`${user.totalBetsClaimed.toLocaleString()}/${user.totalBets.toLocaleString()}`}</Text>\n        </Row>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default RankingCard\n","import React from 'react'\nimport { Box, Button, Grid, Flex, useMatchBreakpoints, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetLeaderboardHasMoreResults,\n  useGetLeaderboardLoadingState,\n  useGetLeaderboardResults,\n  useGetLeaderboardSkip,\n} from 'state/predictions/hooks'\nimport { LeaderboardLoadingState } from 'state/types'\nimport { filterNextPageLeaderboard } from 'state/predictions'\nimport { LEADERBOARD_RESULTS_PER_PAGE } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport Container from 'components/Layout/Container'\nimport DesktopResults from './DesktopResults'\nimport MobileResults from './MobileResults'\nimport RankingCard from './RankingCard'\n\nconst Results = () => {\n  const { isDesktop } = useMatchBreakpoints()\n  const { t } = useTranslation()\n  const [first, second, third, ...rest] = useGetLeaderboardResults()\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\n  const isLoading = leaderboardLoadingState === LeaderboardLoadingState.LOADING\n  const currentSkip = useGetLeaderboardSkip()\n  const hasMoreResults = useGetLeaderboardHasMoreResults()\n  const dispatch = useAppDispatch()\n\n  const handleClick = () => {\n    dispatch(filterNextPageLeaderboard(currentSkip + LEADERBOARD_RESULTS_PER_PAGE))\n  }\n\n  return (\n    <Box>\n      <Container mb=\"16px\">\n        <Grid\n          gridGap={['16px', null, null, null, null, '24px']}\n          gridTemplateColumns={['1fr', null, null, null, null, 'repeat(3, 1fr)']}\n        >\n          <RankingCard rank={1} user={first} />\n          <RankingCard rank={2} user={second} />\n          <RankingCard rank={3} user={third} />\n        </Grid>\n      </Container>\n      {isDesktop ? <DesktopResults results={rest} /> : <MobileResults results={rest} />}\n      <Flex mb=\"40px\" justifyContent=\"center\">\n        {hasMoreResults && (\n          <Button\n            variant=\"secondary\"\n            isLoading={isLoading}\n            endIcon={isLoading ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n            onClick={handleClick}\n          >\n            {isLoading ? t('Loading...') : t('View More')}\n          </Button>\n        )}\n      </Flex>\n    </Box>\n  )\n}\n\nexport default Results\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import React, { useEffect } from 'react'\nimport { Card, Heading, Table, Th, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport Container from 'components/Layout/Container'\nimport { useAppDispatch } from 'state'\nimport { fetchProfileAvatar } from 'state/profile'\nimport { fetchAddressResult } from 'state/predictions'\nimport { useGetOrFetchLeaderboardAddressResult } from 'state/predictions/hooks'\nimport DesktopRow from './DesktopRow'\nimport MobileRow from './MobileRow'\n\nconst ConnectedWalletResult = () => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const accountResult = useGetOrFetchLeaderboardAddressResult(account)\n  const { isDesktop } = useMatchBreakpoints()\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchProfileAvatar(account))\n      dispatch(fetchAddressResult(account))\n    }\n  }, [account, dispatch])\n\n  if (!account || !accountResult) {\n    return null\n  }\n\n  return (\n    <Container mb=\"48px\">\n      <Heading as=\"h2\" scale=\"md\" color=\"secondary\" mb=\"16px\">\n        {t('My Rankings')}\n      </Heading>\n      {isDesktop ? (\n        <Card isActive>\n          <Table>\n            <thead>\n              <tr>\n                <Th width=\"60px\">&nbsp;</Th>\n                <Th textAlign=\"left\">&nbsp;</Th>\n                <Th textAlign=\"right\">{t('Net Winnings (BNB)')}</Th>\n                <Th textAlign=\"center\">{t('Win Rate')}</Th>\n                <Th>{t('Rounds Won')}</Th>\n                <Th>{t('Rounds Played')}</Th>\n              </tr>\n            </thead>\n            <tbody>\n              <DesktopRow user={accountResult} />\n            </tbody>\n          </Table>\n        </Card>\n      ) : (\n        <Card isActive>\n          <MobileRow user={accountResult} />\n        </Card>\n      )}\n    </Container>\n  )\n}\n\nexport default ConnectedWalletResult\n","import React, { useCallback } from 'react'\nimport { useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { fetchAddressResult, setSelectedAddress } from 'state/predictions'\nimport AddressInputSelect from 'components/AddressInputSelect'\nimport WalletStatsModal from './WalletStatsModal'\n\nconst AddressSearch = () => {\n  const dispatch = useAppDispatch()\n\n  const handleBeforeDismiss = () => {\n    dispatch(setSelectedAddress(null))\n  }\n\n  const [onPresentWalletStatsModal] = useModal(<WalletStatsModal onBeforeDismiss={handleBeforeDismiss} />)\n  const handleValidAddress = useCallback(\n    async (value: string) => {\n      const response: any = await dispatch(fetchAddressResult(value))\n      return response.payload?.data !== undefined\n    },\n    [dispatch],\n  )\n\n  const handleAddressClick = async (value: string) => {\n    await dispatch(setSelectedAddress(value))\n    onPresentWalletStatsModal()\n  }\n\n  return <AddressInputSelect onAddressClick={handleAddressClick} onValidAddress={handleValidAddress} />\n}\n\nexport default AddressSearch\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setLeaderboardFilter } from 'state/predictions'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Container from 'components/Layout/Container'\nimport AddressSearch from '../AddressSearch'\n\nconst SearchWrapper = styled(Box)`\n  margin-bottom: 8px;\n  order: 1;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 0;\n    order: 2;\n    width: 320px;\n  }\n`\nconst FilterWrapper = styled(Box)`\n  order: 2;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n    width: auto;\n  }\n`\n\nconst Filters = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const orderByOptions = [\n    { label: t('Net Winnings'), value: 'netBNB' },\n    { label: t('Total BNB'), value: 'totalBNB' },\n    { label: t('Rounds Played'), value: 'totalBets' },\n    { label: t('Win Rate'), value: 'winRate' },\n  ]\n\n  const handleOrderBy = (option: OptionProps) => {\n    dispatch(setLeaderboardFilter({ orderBy: option.value }))\n  }\n\n  return (\n    <Container py=\"32px\">\n      <Text textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"4px\">\n        {t('Rank By')}\n      </Text>\n      <Flex\n        flexDirection={['column', null, null, null, null, 'row']}\n        alignItems={['start', null, null, null, null, 'center']}\n        justifyContent={['start', null, null, null, null, 'space-between']}\n      >\n        <FilterWrapper>\n          <Select options={orderByOptions} onOptionChange={handleOrderBy} />\n        </FilterWrapper>\n        <SearchWrapper>\n          <AddressSearch />\n        </SearchWrapper>\n      </Flex>\n    </Container>\n  )\n}\n\nexport default Filters\n","import React, { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useGetLeaderboardFilters, useGetLeaderboardLoadingState } from 'state/predictions/hooks'\nimport { LeaderboardLoadingState } from 'state/types'\nimport { filterLeaderboard } from 'state/predictions'\nimport PageLoader from 'components/Loader/PageLoader'\nimport { PageMeta } from 'components/Layout/Page'\nimport Hero from './components/Hero'\nimport Results from './components/Results'\nimport ConnectedWalletResult from './components/Results/ConnectedWalletResult'\nimport Filters from './components/Filters'\n\nconst Leaderboard = () => {\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\n  const filters = useGetLeaderboardFilters()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(filterLeaderboard({ filters }))\n  }, [account, filters, dispatch])\n\n  if (leaderboardLoadingState === LeaderboardLoadingState.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <PageMeta />\n      <Hero />\n      <Filters />\n      <ConnectedWalletResult />\n      <Results />\n    </>\n  )\n}\n\nexport default Leaderboard\n","import { useEffect, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { ethers } from 'ethers'\nimport { minBy, orderBy } from 'lodash'\nimport { isAddress } from 'utils'\nimport { useAppDispatch } from 'state'\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from '../types'\nimport { parseBigNumberObj } from './helpers'\nimport { fetchAddressResult } from '.'\n\nexport const useGetRounds = () => {\n  const rounds = useSelector((state: State) => state.predictions.rounds)\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n}\n\nexport const useGetRound = (epoch: number) => {\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const bets = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][epoch]) {\n    return null\n  }\n\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\n  return claimableStatuses[epoch] || false\n}\n\n/**\n * Used to get the range of rounds to poll for\n */\nexport const useGetEarliestEpoch = () => {\n  return useSelector((state: State) => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\n    return earliestRound?.epoch\n  })\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalSeconds = () => {\n  return useSelector((state: State) => state.predictions.intervalSeconds)\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetRounds()\n  return rounds[currentEpoch]\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetHasHistoryLoaded = () => {\n  return useSelector((state: State) => state.predictions.hasHistoryLoaded)\n}\n\nexport const useGetCurrentHistoryPage = () => {\n  return useSelector((state: State) => state.predictions.currentHistoryPage)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\n}\n\nexport const useGetBufferSeconds = () => {\n  return useSelector((state: State) => state.predictions.bufferSeconds)\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetLastOraclePrice = () => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice)\n  }, [lastOraclePrice])\n}\n\n/**\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\n */\nexport const useGetCurrentRoundLockTimestamp = () => {\n  const currentRound = useGetCurrentRound()\n  const intervalSeconds = useGetIntervalSeconds()\n\n  if (!currentRound.lockTimestamp) {\n    return currentRound.startTimestamp + intervalSeconds\n  }\n\n  return currentRound.lockTimestamp\n}\n\n// Leaderboard\nexport const useGetLeaderboardLoadingState = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.loadingState)\n}\n\nexport const useGetLeaderboardResults = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.results)\n}\n\nexport const useGetLeaderboardFilters = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.filters)\n}\n\nexport const useGetLeaderboardSkip = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.skip)\n}\n\nexport const useGetLeaderboardHasMoreResults = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.hasMoreResults)\n}\n\nexport const useGetAddressResult = (account: string) => {\n  return useSelector((state: State) => state.predictions.leaderboard.addressResults[account])\n}\n\nexport const useGetOrFetchLeaderboardAddressResult = (account: string) => {\n  const addressResult = useGetAddressResult(account)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    const address = isAddress(account)\n\n    // If address result is null it means we already tried fetching the results and none came back\n    if (!addressResult && addressResult !== null && address) {\n      dispatch(fetchAddressResult(account))\n    }\n  }, [dispatch, account, addressResult])\n\n  return addressResult\n}\n\nexport const useGetSelectedAddress = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.selectedAddress)\n}\n","var baseTimes = require('./_baseTimes'),\n    castFunction = require('./_castFunction'),\n    toInteger = require('./toInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Invokes the iteratee `n` times, returning an array of the results of\n * each invocation. The iteratee is invoked with one argument; (index).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.times(3, String);\n * // => ['0', '1', '2']\n *\n *  _.times(4, _.constant(0));\n * // => [0, 0, 0, 0]\n */\nfunction times(n, iteratee) {\n  n = toInteger(n);\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\n    return [];\n  }\n  var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n  iteratee = castFunction(iteratee);\n  n -= MAX_ARRAY_LENGTH;\n\n  var result = baseTimes(length, iteratee);\n  while (++index < n) {\n    iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = times;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n","import React, { ChangeEvent, useState, useEffect } from 'react'\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { isAddress } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport CircleLoader from 'components/Loader/CircleLoader'\n\nenum ResultStatus {\n  NOT_VALID,\n  FOUND,\n  NOT_FOUND,\n}\n\ninterface AddressInputSelectProps extends BoxProps {\n  onValidAddress?: (value: string) => Promise<boolean>\n  onAddressClick: (value: string) => void\n}\n\nconst SubMenu = styled.div<{ isOpen: boolean }>`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.input};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\n  left: 0;\n  padding-bottom: 8px;\n  padding-top: 16px;\n  position: absolute;\n  top: calc(100% - 12px);\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  width: 100%;\n  z-index: 15;\n\n  ${({ isOpen }) =>\n    isOpen &&\n    `\n    height: auto;\n    opacity: 1;\n    transform: scaleY(1);\n  `}\n`\n\nconst AddressLink = styled(Text)`\n  cursor: pointer;\n  overflow-wrap: break-word;\n  font-weight: bold;\n  padding-left: 16px;\n  padding-right: 16px;\n`\n\nconst initialState = {\n  isFetching: false,\n  resultFound: ResultStatus.NOT_VALID,\n  value: '',\n}\n\nconst defaultValidAddressHandler = () => Promise.resolve(true)\n\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\n  onValidAddress = defaultValidAddressHandler,\n  onAddressClick,\n  ...props\n}) => {\n  const [state, setState] = useState(initialState)\n  const { t } = useTranslation()\n  const { isFetching, resultFound, value } = state\n\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    const { value: newValue } = evt.target\n    setState((prevState) => ({\n      ...prevState,\n      value: newValue,\n    }))\n  }\n\n  const handleClick = () => {\n    setState(initialState)\n    onAddressClick(state.value)\n  }\n\n  // When we have a valid address fetch the data\n  useEffect(() => {\n    const isValidAddress = isAddress(value) !== false\n\n    const validAddressHandler = async () => {\n      try {\n        setState((prevState) => ({ ...prevState, isFetching: true }))\n        const hasResults = await onValidAddress(value)\n\n        setState((prevState) => ({\n          ...prevState,\n          isFetching: false,\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\n        }))\n      } catch {\n        setState((prevState) => ({ ...prevState, isFetching: false }))\n      }\n    }\n\n    if (isValidAddress) {\n      validAddressHandler()\n    } else {\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\n    }\n  }, [value, onValidAddress, setState])\n\n  return (\n    <Box position=\"relative\" {...props}>\n      <Input\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\n        value={state.value}\n        onChange={handleChange}\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\n      />\n      {isFetching && (\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\n          <CircleLoader />\n        </Box>\n      )}\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\n        {resultFound === ResultStatus.FOUND ? (\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\n        ) : (\n          <Text px=\"16px\" fontWeight=\"bold\">\n            {t('No results found.')}\n          </Text>\n        )}\n      </SubMenu>\n    </Box>\n  )\n}\n\nexport default AddressInputSelect\n"],"sourceRoot":""}