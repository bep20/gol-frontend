{"version":3,"sources":["views/Nft/market/Profile/hooks/useUserActivity.tsx","views/Nft/market/Profile/components/EditProfileAvatar.tsx","views/Nft/market/Profile/components/ProfileHeader.tsx","views/Nft/market/Profile/components/TabMenu.tsx","views/Nft/market/Profile/components/Achievements/AchievementAvatar.tsx","views/Nft/market/Profile/components/Achievements/AchievementTitle.tsx","views/Nft/market/Profile/components/Achievements/AchievementDescription.tsx","views/Nft/market/Profile/components/Achievements/AchievementCard.tsx","views/Nft/market/Profile/components/Achievements/AchievementsList.tsx","views/Nft/market/Profile/components/Achievements/AchievementRow/PointsLabel.tsx","views/Nft/market/Profile/components/Achievements/AchievementRow/index.tsx","views/Nft/market/Profile/components/Achievements/ClaimPointsCallout .tsx","views/Nft/market/Profile/components/Achievements/index.tsx","views/Nft/market/Profile/hooks/useFetchUserActivity.ts","views/Nft/market/Profile/components/ActivityHistory/ActivityEventText.tsx","views/Nft/market/Profile/components/ActivityHistory/ActivityPrice.tsx","views/Nft/market/Profile/components/ActivityHistory/MobileModal.tsx","views/Nft/market/Profile/components/ActivityHistory/ActivityRow.tsx","views/Nft/market/Profile/components/ActivityHistory/TableLoader.tsx","views/Nft/market/Profile/components/NoNftsImage.tsx","views/Nft/market/Profile/components/ActivityHistory/index.tsx","views/Nft/market/Profile/components/SubMenu.tsx","views/Nft/market/Profile/components/UserNfts.tsx","views/Nft/market/Profile/ConnectedProfile.tsx","state/achievements/hooks.ts","views/Nft/market/Profile/hooks/useGetNftsForAddress.tsx","views/Nft/market/Profile/components/UnconnectedProfileNfts.tsx","views/Nft/market/Profile/UnconnectedProfile.tsx","views/Nft/market/Profile/index.tsx","../node_modules/lodash/times.js","../node_modules/lodash/toInteger.js","../node_modules/lodash/_castFunction.js","views/Nft/market/components/GridPlaceholder.tsx","views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/StatBox.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","views/Teams/components/IconStatBox.tsx"],"names":["MarketEvent","EditOverlay","styled","div","StyledEditProfileAvatar","EditProfileAvatar","src","alt","useModal","EditProfileModal","onEditProfileModal","onClick","AvatarImage","StyledIconButton","IconButton","ProfileHeader","accountPath","profile","achievements","nftCollected","t","useTranslation","account","useWeb3React","isConnectedAccount","toLowerCase","numNftCollected","formatNumber","numPoints","points","numAchievements","length","avatarImage","nft","image","thumbnail","BannerHeader","bannerImage","imagePath","teamId","getBannerImage","bannerAlt","avatar","display","target","as","href","getBscScanLink","width","color","MarketPageTitle","pb","title","username","truncateHash","description","flexDirection","mb","mr","external","bold","mt","to","StatBox","stat","Tab","button","theme","$active","colors","secondary","textSubtle","cardBorder","background","TabMenu","accountAddress","useParams","pathname","useLocation","useState","includes","achievementsActive","setIsAchievementsActive","useEffect","RouterLink","nftsBaseUrl","NoBadgePlaceholder","BunnyPlaceholderIcon","mediaQueries","sm","StyledAchievementAvatar","img","AchievementAvatar","badge","props","AchievementTitle","key","data","Description","Text","attrs","fontSize","md","AchievementDescription","Details","Flex","AchievementCard","achievement","alignItems","toLocaleString","Grid","AchievementsList","map","id","justifyContent","style","height","scale","PointsLabel","localePoints","num","ActionColumn","StyledAchievementRow","Body","AchievementRow","onCollectSuccess","isCollecting","setIsCollecting","pointCenterContract","usePointCenterIfoContract","useToast","toastError","toastSuccess","callWithGasPrice","useCallWithGasPrice","handleCollectPoints","a","address","tx","wait","receipt","status","Toast","txHash","transactionHash","px","isLoading","endIcon","spin","disabled","variant","ClaimPointsCallout","claimableAchievements","setClaimableAchievement","dispatch","useAppDispatch","useProfile","getClaimableIfoData","ifoData","fetchIfoClaims","handleCollectSuccess","addAchievement","addPoints","prevClaimableAchievements","filter","prevClaimableAchievement","isActive","totalPointsToCollect","sumBy","Achievements","IconStatBox","icon","PrizeIcon","subtitle","useFetchUserActivity","fetchUserActivity","useUserActivity","sortedUserActivities","setSortedUserActivities","useUserNfts","activity","askOrderHistory","buyTradeHistory","sellTradeHistory","initializationState","transformTransactions","transactions","transaction","userSeller","seller","marketEvent","SELL","BUY","timestamp","price","askPrice","otherParty","buyer","allActivity","askOrder","orderType","AskOrderType","CANCEL","MODIFY","NEW","getAskOrderEvent","sortedByMostRecent","sort","activityItem1","activityItem2","timestamp1","ethers","BigNumber","from","sub","toNumber","ActivityEventText","events","text","ActivityPrice","bnbBusdPrice","priceInUsd","multiplyPriceByAmount","justifySelf","maxWidth","undefined","minimumFractionDigits","maximumFractionDigits","RoundedImage","Image","radii","default","MobileModal","localeTimestamp","onDismiss","chainId","useActiveWeb3React","useTheme","priceAsFloat","parseFloat","headerBackground","gradients","cardHeader","textAlign","collectionName","name","p","pt","Link","ActivityRow","useMatchBreakpoints","isXs","isSm","timestampAsMs","Date","year","month","day","hour","minute","onPresentMobileModal","ProfileCell","GridItem","LoadingRow","TableLoader","NoNftsImage","ActivityHistory","currentPage","setCurrentPage","maxPage","setMaxPages","activitiesSlice","setActivitiesSlice","nftMetadata","setNftMetadata","useBNBBusdPrice","fetchActivityNftMetadata","activityNftTokenIds","uniqBy","tokenId","collectionAddress","collection","getNftsFromDifferentCollectionsApi","nfts","max","Math","ceil","getMaxPages","slice","getActivitiesSlice","UserNftInitializationState","INITIALIZED","INITIALIZING","nftMeta","find","metaNft","borderTop","page","SubMenuComponent","ItemsConfig","label","BaseSubMenu","items","activeItem","UserNfts","userNftsInitializationState","location","clickedProfileNft","setClickedProfileNft","clickedSellNft","setClickedSellNft","ProfileNftModal","onPresentProfileNftModal","SellModal","nftToSell","onPresentSellModal","gridGap","gridTemplateColumns","marketData","isUserNft","NftLocation","PROFILE","WALLET","FORSALE","handleCollectibleClick","currentAskPrice","isTradable","nftLocation","GridPlaceholder","TabMenuWrapper","Box","ConnectedProfile","useSelector","state","userNfts","fetchAchievements","useFetchAchievements","useFetchUserNfts","MarketPageHeader","position","Page","minHeight","path","SubMenu","exact","isProfileFetching","combinedNfts","setCombinedNfts","setIsLoading","collections","useGetCollections","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","getNfts","getCompleteAccountNftData","completeNftData","isEmpty","UnconnectedProfile","useProfileForAddress","profileHookState","isFetching","useAchievementsForAddress","useGetNftsForAddress","UnconnectedProfileNfts","NftProfile","isConnectedProfile","isAddress","baseTimes","require","castFunction","toInteger","MAX_ARRAY_LENGTH","nativeMin","min","module","exports","n","iteratee","index","result","toFinite","value","remainder","identity","GridPlaceholderItem","numItems","times","itemKey","isDark","StatBoxItem","mx","fontWeight","invertedContrast","card","borderColor","children","SubMenuItems","StyledBannerImage","BannerImage","bottom","left","SecondaryCard","tertiary","defaultProps","Icon","isDisabled","textTransform"],"mappings":"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","file":"static/js/13.47899238.chunk.js","sourcesContent":["import { ethers } from 'ethers'\nimport { useEffect, useState } from 'react'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { AskOrder, AskOrderType, TokenMarketData, Transaction, UserNftInitializationState } from 'state/nftMarket/types'\n\nexport enum MarketEvent {\n  NEW = 'NEW',\n  CANCEL = 'CANCEL',\n  MODIFY = 'MODIFY',\n  BUY = 'BUY',\n  SELL = 'SELL',\n}\n\nexport interface Activity {\n  marketEvent: MarketEvent\n  timestamp: string\n  tx: string\n  nft?: TokenMarketData\n  price?: string\n  otherParty?: string\n}\n\n/**\n * Return an array of all user activity, sorted by most recent timestamp.\n * @returns\n */\nconst useUserActivity = (\n  account: string,\n): { sortedUserActivities: Activity[]; initializationState: UserNftInitializationState } => {\n  const [sortedUserActivities, setSortedUserActivities] = useState<Activity[]>([])\n  const {\n    activity: { askOrderHistory, buyTradeHistory, sellTradeHistory, initializationState },\n  } = useUserNfts()\n\n  useEffect(() => {\n    const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\n      switch (orderType) {\n        case AskOrderType.CANCEL:\n          return MarketEvent.CANCEL\n        case AskOrderType.MODIFY:\n          return MarketEvent.MODIFY\n        case AskOrderType.NEW:\n          return MarketEvent.NEW\n        default:\n          return MarketEvent.MODIFY\n      }\n    }\n\n    const transformTransactions = (transactions: Transaction[]): Activity[] => {\n      const transformedTransactions = transactions.map((transaction) => {\n        const userSeller = transaction.seller.id === account.toLowerCase()\n        const marketEvent = userSeller ? MarketEvent.SELL : MarketEvent.BUY\n        const { timestamp, nft } = transaction\n        const price = transaction.askPrice\n        const otherParty = userSeller ? transaction.buyer.id : transaction.seller.id\n        const tx = transaction.id\n        return { marketEvent, price, otherParty, timestamp, nft, tx }\n      })\n\n      return transformedTransactions\n    }\n\n    const transformAskOrders = (askOrders: AskOrder[]): Activity[] => {\n      const transformedAskOrders = askOrders.map((askOrder) => {\n        const marketEvent = getAskOrderEvent(askOrder.orderType)\n        const { timestamp, nft } = askOrder\n        const price = askOrder.askPrice\n        const tx = askOrder.id\n        return { marketEvent, price, timestamp, nft, tx }\n      })\n\n      return transformedAskOrders\n    }\n\n    const allActivity = [\n      ...transformAskOrders(askOrderHistory),\n      ...transformTransactions(buyTradeHistory),\n      ...transformTransactions(sellTradeHistory),\n    ]\n    if (allActivity.length > 0) {\n      const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\n        const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\n        const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\n        return timestamp2.sub(timestamp1).toNumber()\n      })\n\n      setSortedUserActivities(sortedByMostRecent)\n    }\n\n    return () => {\n      setSortedUserActivities([])\n    }\n  }, [account, askOrderHistory, buyTradeHistory, sellTradeHistory])\n\n  return { sortedUserActivities, initializationState }\n}\n\nexport default useUserActivity\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useModal } from '@pancakeswap/uikit'\nimport AvatarImage from 'views/Nft/market/components/BannerHeader/AvatarImage'\nimport EditProfileModal from './EditProfileModal'\n\nconst EditOverlay = styled.div`\n  background: rgba(0, 0, 0, 0.6) url('/images/camera.svg') no-repeat center center;\n  border-radius: 50%;\n  left: 0;\n  height: 100%;\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  transition: opacity 300ms;\n  width: 100%;\n  z-index: 1;\n`\n\nconst StyledEditProfileAvatar = styled.div`\n  position: relative;\n\n  &:hover {\n    cursor: pointer;\n\n    ${EditOverlay} {\n      opacity: 1;\n    }\n  }\n`\n\nconst EditProfileAvatar: React.FC<{ src: string; alt?: string }> = ({ src, alt }) => {\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  return (\n    <StyledEditProfileAvatar onClick={onEditProfileModal}>\n      <AvatarImage src={src} alt={alt} />\n      <EditOverlay />\n    </StyledEditProfileAvatar>\n  )\n}\n\nexport default EditProfileAvatar\n","import React from 'react'\nimport { Link as ReactRouterLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { BscScanIcon, Flex, IconButton, Link, Button, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { formatNumber } from 'utils/formatBalance'\nimport truncateHash from 'utils/truncateHash'\nimport { Achievement, Profile } from 'state/types'\nimport { useWeb3React } from '@web3-react/core'\nimport EditProfileAvatar from './EditProfileAvatar'\nimport BannerHeader from '../../components/BannerHeader'\nimport StatBox, { StatBoxItem } from '../../components/StatBox'\nimport MarketPageTitle from '../../components/MarketPageTitle'\nimport EditProfileModal from './EditProfileModal'\nimport AvatarImage from '../../components/BannerHeader/AvatarImage'\n\ninterface HeaderProps {\n  accountPath: string\n  profile: Profile\n  achievements: Achievement[]\n  nftCollected: number\n}\n\nconst StyledIconButton = styled(IconButton)`\n  width: fit-content;\n`\n\n// Account and profile passed down as the profile could be used to render _other_ users' profiles.\nconst ProfileHeader: React.FC<HeaderProps> = ({ accountPath, profile, achievements, nftCollected }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  const isConnectedAccount = account?.toLowerCase() === accountPath?.toLowerCase()\n  const numNftCollected = nftCollected ? formatNumber(nftCollected, 0, 0) : '-'\n  const numPoints = profile?.points ? formatNumber(profile.points, 0, 0) : '-'\n  const numAchievements = achievements?.length ? formatNumber(achievements.length, 0, 0) : '-'\n\n  const avatarImage = profile?.nft?.image?.thumbnail || '/images/nfts/no-profile-md.png'\n\n  const getBannerImage = () => {\n    const imagePath = '/images/teams'\n    if (profile) {\n      switch (profile.teamId) {\n        case 1:\n          return `${imagePath}/storm-banner.png`\n        case 2:\n          return `${imagePath}/flippers-banner.png`\n        case 3:\n          return `${imagePath}/cakers-banner.png`\n        default:\n          break\n      }\n    }\n    return `${imagePath}/no-team-banner.png`\n  }\n\n  const getAvatar = () => {\n    const getIconButtons = () => {\n      return (\n        // TODO: Share functionality once user profiles routed by ID\n        <Flex display=\"inline-flex\">\n          {accountPath && (\n            <StyledIconButton\n              target=\"_blank\"\n              as=\"a\"\n              href={getBscScanLink(accountPath, 'address')}\n              alt={t('View BscScan for user address')}\n            >\n              <BscScanIcon width=\"20px\" color=\"primary\" />\n            </StyledIconButton>\n          )}\n        </Flex>\n      )\n    }\n\n    const getImage = () => {\n      return (\n        <>\n          {profile && accountPath && isConnectedAccount ? (\n            <EditProfileAvatar src={avatarImage} alt={t('User profile picture')} />\n          ) : (\n            <AvatarImage src={avatarImage} alt={t('User profile picture')} />\n          )}\n        </>\n      )\n    }\n    return (\n      <>\n        {getImage()}\n        {getIconButtons()}\n      </>\n    )\n  }\n\n  const getTitle = () => {\n    if (profile?.username) {\n      return `@${profile.username}`\n    }\n\n    if (accountPath) {\n      return truncateHash(accountPath, 5, 3)\n    }\n\n    return null\n  }\n\n  const renderDescription = () => {\n    const getActivateButton = () => {\n      if (!profile) {\n        return (\n          <ReactRouterLink to=\"/create-profile\">\n            <Button mt=\"16px\">{t('Activate Profile')}</Button>\n          </ReactRouterLink>\n        )\n      }\n      return (\n        <Button width=\"fit-content\" mt=\"16px\" onClick={onEditProfileModal}>\n          {t('Reactivate Profile')}\n        </Button>\n      )\n    }\n\n    return (\n      <Flex flexDirection=\"column\" mb={[16, null, 0]} mr={[0, null, 16]}>\n        {accountPath && profile?.username && (\n          <Link href={getBscScanLink(accountPath, 'address')} external bold color=\"primary\">\n            {truncateHash(accountPath)}\n          </Link>\n        )}\n        {accountPath && isConnectedAccount && (!profile || !profile?.nft) && getActivateButton()}\n      </Flex>\n    )\n  }\n\n  return (\n    <>\n      <BannerHeader bannerImage={getBannerImage()} bannerAlt={t('User team banner')} avatar={getAvatar()} />\n      <MarketPageTitle pb=\"48px\" title={getTitle()} description={renderDescription()}>\n        <StatBox>\n          <StatBoxItem title={t('NFT Collected')} stat={numNftCollected} />\n          <StatBoxItem title={t('Points')} stat={numPoints} />\n          <StatBoxItem title={t('Achievements')} stat={numAchievements} />\n        </StatBox>\n      </MarketPageTitle>\n    </>\n  )\n}\n\nexport default ProfileHeader\n","import React, { useState, useEffect } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Link as RouterLink, useLocation, useParams } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\n\nconst Tab = styled.button<{ $active: boolean }>`\n  display: inline-flex;\n  justify-content: center;\n  cursor: pointer;\n  color: ${({ theme, $active }) => ($active ? theme.colors.secondary : theme.colors.textSubtle)};\n  border-width: ${({ $active }) => ($active ? '1px 1px 0 1px' : '0')};\n  border-style: solid solid none solid;\n  border-color: ${({ theme }) =>\n    `${theme.colors.cardBorder} ${theme.colors.cardBorder} transparent ${theme.colors.cardBorder}`};\n  outline: 0;\n  padding: 12px 16px;\n  border-radius: 16px 16px 0 0;\n  font-size: 16px;\n  font-weight: ${({ $active }) => ($active ? '600' : '400')};\n  background-color: ${({ theme, $active }) => ($active ? theme.colors.background : 'transparent')};\n  transition: background-color 0.3s ease-out;\n`\n\nconst TabMenu = () => {\n  const { t } = useTranslation()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { pathname } = useLocation()\n  const [achievementsActive, setIsAchievementsActive] = useState(pathname.includes('achievements'))\n\n  useEffect(() => {\n    setIsAchievementsActive(pathname.includes('achievements'))\n  }, [pathname])\n\n  return (\n    <Flex>\n      <Tab\n        onClick={() => setIsAchievementsActive(false)}\n        $active={!achievementsActive}\n        as={RouterLink}\n        to={`${nftsBaseUrl}/profile/${accountAddress}`}\n      >\n        NFTs\n      </Tab>\n      <Tab\n        onClick={() => setIsAchievementsActive(true)}\n        $active={achievementsActive}\n        as={RouterLink}\n        to={`${nftsBaseUrl}/profile/${accountAddress}/achievements`}\n      >\n        {t('Achievements')}\n      </Tab>\n    </Flex>\n  )\n}\n\nexport default TabMenu\n","import React, { ImgHTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport { BunnyPlaceholderIcon } from '@pancakeswap/uikit'\n\ninterface AchievementAvatarProps extends ImgHTMLAttributes<HTMLImageElement> {\n  badge?: string\n}\n\nconst NoBadgePlaceholder = styled(BunnyPlaceholderIcon)`\n  height: 48px;\n  width: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 64px;\n    width: 64px;\n  }\n`\n\nconst StyledAchievementAvatar = styled.img`\n  height: 48px;\n  width: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 64px;\n    width: 64px;\n  }\n`\n\nconst AchievementAvatar: React.FC<AchievementAvatarProps> = ({ badge, ...props }) => {\n  if (!badge) {\n    return <NoBadgePlaceholder />\n  }\n\n  return <StyledAchievementAvatar src={`/images/achievements/${badge}`} alt=\"achievement badge\" {...props} />\n}\n\nexport default AchievementAvatar\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { TranslatableText as AchievementTitleType } from 'config/constants/types'\n\ninterface AchievementTitleProps extends TextProps {\n  title: AchievementTitleType\n}\n\nconst AchievementTitle: React.FC<AchievementTitleProps> = ({ title, ...props }) => {\n  const { t } = useTranslation()\n\n  if (typeof title === 'string') {\n    return (\n      <Text bold {...props}>\n        {title}\n      </Text>\n    )\n  }\n\n  const { key, data = {} } = title\n\n  return (\n    <Text bold {...props}>\n      {t(key, data)}\n    </Text>\n  )\n}\n\nexport default AchievementTitle\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { TranslatableText as AchievementDescriptionType } from 'config/constants/types'\nimport styled from 'styled-components'\n\ninterface AchievementDescriptionProps extends TextProps {\n  description?: AchievementDescriptionType\n}\n\nconst Description = styled(Text).attrs({ as: 'p', fontSize: '14px' })`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst AchievementDescription: React.FC<AchievementDescriptionProps> = ({ description, ...props }) => {\n  const { t } = useTranslation()\n\n  if (!description) {\n    return null\n  }\n\n  if (typeof description === 'string') {\n    return (\n      <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\" {...props}>\n        {description}\n      </Text>\n    )\n  }\n\n  const { key, data = {} } = description\n\n  return (\n    <Description color=\"textSubtle\" {...props}>\n      {t(key, data)}\n    </Description>\n  )\n}\n\nexport default AchievementDescription\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, PrizeIcon, Text } from '@pancakeswap/uikit'\nimport { Achievement } from 'state/types'\nimport AchievementAvatar from './AchievementAvatar'\nimport AchievementTitle from './AchievementTitle'\nimport AchievementDescription from './AchievementDescription'\n\ninterface AchievementCardProps {\n  achievement: Achievement\n}\n\nconst Details = styled(Flex)`\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: 8px;\n  padding-right: 8px;\n`\n\nconst AchievementCard: React.FC<AchievementCardProps> = ({ achievement }) => {\n  return (\n    <Flex>\n      <AchievementAvatar badge={achievement.badge} />\n      <Details>\n        <AchievementTitle title={achievement.title} />\n        <AchievementDescription description={achievement.description} />\n      </Details>\n      <Flex alignItems=\"center\">\n        <PrizeIcon width=\"18px\" color=\"textSubtle\" mr=\"4px\" />\n        <Text color=\"textSubtle\">{achievement.points.toLocaleString()}</Text>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default AchievementCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Achievement } from 'state/types'\nimport AchievementCard from './AchievementCard'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-gap: 16px;\n  grid-template-columns: 1fr;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst AchievementsList: React.FC<{ achievements: Achievement[] }> = ({ achievements }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Grid>\n        {achievements.map((achievement) => (\n          <AchievementCard key={achievement.id} achievement={achievement} />\n        ))}\n      </Grid>\n      {achievements.length === 0 && (\n        <Flex alignItems=\"center\" justifyContent=\"center\" style={{ height: '64px' }}>\n          <Heading as=\"h5\" scale=\"md\" color=\"textDisabled\">\n            {t('No achievements yet!')}\n          </Heading>\n        </Flex>\n      )}\n    </>\n  )\n}\n\nexport default AchievementsList\n","import React from 'react'\nimport { Flex, FlexProps, PrizeIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface PointsLabelProps extends FlexProps {\n  points: number\n}\n\nconst PointsLabel: React.FC<PointsLabelProps> = ({ points, ...props }) => {\n  const { t } = useTranslation()\n  const localePoints = points.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" {...props}>\n      <PrizeIcon mr=\"4px\" color=\"textSubtle\" />\n      <Text color=\"textSubtle\">{t('%num% points', { num: localePoints })}</Text>\n    </Flex>\n  )\n}\n\nexport default PointsLabel\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Flex } from '@pancakeswap/uikit'\nimport { Achievement } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePointCenterIfoContract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport AchievementTitle from 'views/Nft/market/Profile/components/Achievements/AchievementTitle'\nimport AchievementAvatar from 'views/Nft/market/Profile/components/Achievements/AchievementAvatar'\nimport AchievementDescription from 'views/Nft/market/Profile/components/Achievements/AchievementDescription'\nimport PointsLabel from './PointsLabel'\n\ninterface AchievementRowProps {\n  achievement: Achievement\n  onCollectSuccess?: (achievement: Achievement) => void\n}\n\nconst ActionColumn = styled.div`\n  flex: none;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: 160px;\n\n    & > button {\n      width: 100%;\n    }\n  }\n`\n\nconst StyledAchievementRow = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  padding-bottom: 16px;\n  padding-top: 16px;\n`\n\nconst Details = styled.div`\n  flex: 1;\n`\n\nconst Body = styled(Flex)`\n  flex-direction: column;\n  flex: 1;\n  margin-left: 8px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    align-items: center;\n    flex-direction: row;\n  }\n`\n\nconst AchievementRow: React.FC<AchievementRowProps> = ({ achievement, onCollectSuccess }) => {\n  const [isCollecting, setIsCollecting] = useState(false)\n  const { t } = useTranslation()\n  const pointCenterContract = usePointCenterIfoContract()\n  const { toastError, toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleCollectPoints = async () => {\n    const tx = await callWithGasPrice(pointCenterContract, 'getPoints', [achievement.address])\n    setIsCollecting(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      setIsCollecting(false)\n      onCollectSuccess(achievement)\n      toastSuccess(t('Points Collected!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsCollecting(false)\n    }\n  }\n\n  return (\n    <StyledAchievementRow>\n      <AchievementAvatar badge={achievement.badge} />\n      <Body>\n        <Details>\n          <AchievementTitle title={achievement.title} />\n          <AchievementDescription description={achievement.description} />\n        </Details>\n        <PointsLabel points={achievement.points} px={[0, null, null, '32px']} mb={['16px', null, null, 0]} />\n        <ActionColumn>\n          <Button\n            onClick={handleCollectPoints}\n            isLoading={isCollecting}\n            endIcon={isCollecting ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            disabled={isCollecting}\n            variant=\"secondary\"\n          >\n            {t('Collect')}\n          </Button>\n        </ActionColumn>\n      </Body>\n    </StyledAchievementRow>\n  )\n}\n\nexport default AchievementRow\n","import React, { useEffect, useState } from 'react'\nimport { sumBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport { Card, CardBody, CardHeader, Flex, Heading, PrizeIcon } from '@pancakeswap/uikit'\nimport { useProfile } from 'state/profile/hooks'\nimport { Achievement } from 'state/types'\nimport { addPoints } from 'state/profile'\nimport { addAchievement } from 'state/achievements'\nimport { useTranslation } from 'contexts/Localization'\nimport { getClaimableIfoData } from 'utils/achievements'\nimport AchievementRow from './AchievementRow'\n\nconst ClaimPointsCallout = () => {\n  const [claimableAchievements, setClaimableAchievement] = useState<Achievement[]>([])\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchIfoClaims = async () => {\n      const ifoData = await getClaimableIfoData(account)\n      setClaimableAchievement(ifoData)\n    }\n\n    if (account) {\n      fetchIfoClaims()\n    }\n  }, [account, dispatch, setClaimableAchievement])\n\n  const handleCollectSuccess = (achievement: Achievement) => {\n    dispatch(addAchievement(achievement))\n    dispatch(addPoints(achievement.points))\n\n    setClaimableAchievement((prevClaimableAchievements) =>\n      prevClaimableAchievements.filter((prevClaimableAchievement) => prevClaimableAchievement.id !== achievement.id),\n    )\n  }\n\n  if (!profile?.isActive) {\n    return null\n  }\n\n  if (claimableAchievements.length === 0) {\n    return null\n  }\n\n  const totalPointsToCollect = sumBy(claimableAchievements, 'points')\n\n  return (\n    <Card isActive mb=\"32px\">\n      <CardHeader>\n        <Flex flexDirection={['column', null, 'row']} justifyContent={['start', null, 'space-between']}>\n          <Flex alignItems=\"center\" mb={['16px', null, 0]}>\n            <PrizeIcon width=\"32px\" mr=\"8px\" />\n            <Heading scale=\"lg\">{t('%num% Points to Collect', { num: totalPointsToCollect })}</Heading>\n          </Flex>\n        </Flex>\n      </CardHeader>\n      <CardBody>\n        {claimableAchievements.map((achievement) => (\n          <AchievementRow key={achievement.address} achievement={achievement} onCollectSuccess={handleCollectSuccess} />\n        ))}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default ClaimPointsCallout\n","import React from 'react'\nimport { Card, CardBody, Heading, PrizeIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport IconStatBox from 'views/Teams/components/IconStatBox'\nimport { Achievement } from 'state/types'\nimport AchievementsList from './AchievementsList'\nimport ClaimPointsCallout from './ClaimPointsCallout '\n\nconst Achievements: React.FC<{ achievements: Achievement[]; points?: number }> = ({ achievements, points = 0 }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Card>\n      <CardBody>\n        <IconStatBox icon={PrizeIcon} title={points} subtitle={t('Points')} mb=\"24px\" />\n        <Heading as=\"h4\" scale=\"md\" mb=\"16px\">\n          {t('Achievements')}\n        </Heading>\n        <ClaimPointsCallout />\n        <AchievementsList achievements={achievements} />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Achievements\n","import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchUserActivity } from 'state/nftMarket/reducer'\n\nconst useFetchUserActivity = (account: string) => {\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchUserActivity(account))\n    }\n  }, [dispatch, account])\n}\n\nexport default useFetchUserActivity\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { MarketEvent } from '../../hooks/useUserActivity'\n\ninterface ActivityEventTextProps extends TextProps {\n  marketEvent: MarketEvent\n}\n\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\n  const { t } = useTranslation()\n\n  const events = {\n    [MarketEvent.NEW]: {\n      text: t('Listed'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.CANCEL]: {\n      text: t('Delisted'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.MODIFY]: {\n      text: t('Modified'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.BUY]: {\n      text: t('Bought'),\n      color: 'success',\n    },\n    [MarketEvent.SELL]: {\n      text: t('Sold'),\n      color: 'failure',\n    },\n  }\n\n  return (\n    <Text {...props} color={events[marketEvent].color}>\n      {events[marketEvent].text}\n    </Text>\n  )\n}\n\nexport default ActivityEventText\n","import React from 'react'\nimport { Flex, BinanceIcon, Text } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\n\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n      {price ? (\n        <>\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n            <Text maxWidth=\"80px\" bold>\n              {price.toLocaleString(undefined, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 5,\n              })}\n            </Text>\n          </Flex>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`(~$${priceInUsd.toLocaleString(undefined, {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2,\n            })})`}\n          </Text>\n        </>\n      ) : (\n        '-'\n      )}\n    </Flex>\n  )\n}\n\nexport default ActivityPrice\n","import React from 'react'\nimport { InjectedModalProps, Modal, Flex, Text, Button, Image, Link, BinanceIcon } from '@pancakeswap/uikit'\nimport { Price } from 'golswap-sdk'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { NftToken } from 'state/nftMarket/types'\nimport { LightGreyCard } from 'components/Card'\nimport { useTranslation } from 'contexts/Localization'\nimport truncateHash from 'utils/truncateHash'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport { Activity } from '../../hooks/useUserActivity'\nimport ActivityEventText from './ActivityEventText'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface MobileModalProps extends InjectedModalProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  localeTimestamp: string\n}\n\nconst MobileModal: React.FC<MobileModalProps> = ({ nft, activity, bnbBusdPrice, localeTimestamp, onDismiss }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const priceAsFloat = parseFloat(activity.price)\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\n\n  return (\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\n        <Flex alignItems=\"center\" mb=\"16px\">\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              {nft.collectionName}\n            </Text>\n            <Text bold>{nft.name}</Text>\n          </Flex>\n        </Flex>\n        <LightGreyCard p=\"16px\">\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\n            {priceAsFloat ? (\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n                <Text mr=\"4px\" bold>\n                  {priceAsFloat}\n                </Text>\n                <Text color=\"textSubtle\">\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2,\n                  })}`}\n                </Text>\n              </Flex>\n            ) : (\n              '-'\n            )}\n          </Flex>\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('From/To')}\n            </Text>\n            <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\">\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('Date')}\n            </Text>\n            <Text>{localeTimestamp}</Text>\n          </Flex>\n        </LightGreyCard>\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            {t('View on BscScan')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default MobileModal\n","import React from 'react'\nimport { Image, Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { NftToken } from 'state/nftMarket/types'\nimport { Price } from 'golswap-sdk'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\nimport { Activity } from '../../hooks/useUserActivity'\nimport ActivityEventText from './ActivityEventText'\nimport ActivityPrice from './ActivityPrice'\nimport MobileModal from './MobileModal'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface ActivityRowProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n}\n\nconst ActivityRow: React.FC<ActivityRowProps> = ({ activity, bnbBusdPrice, nft }) => {\n  const { chainId } = useActiveWeb3React()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const priceAsFloat = parseFloat(activity.price)\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  })\n  const [onPresentMobileModal] = useModal(\n    <MobileModal nft={nft} activity={activity} localeTimestamp={localeTimestamp} bnbBusdPrice={bnbBusdPrice} />,\n  )\n\n  return (\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })}>\n      <Td>\n        <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\n          <RoundedImage\n            src={nft?.image.thumbnail}\n            alt={nft?.name}\n            width={64}\n            height={64}\n            mr={[0, null, '16px']}\n            mb={['8px', null, 0]}\n          />\n          <Flex flexDirection=\"column\">\n            <Text textAlign={['center', null, 'left']} color=\"textSubtle\" fontSize=\"14px\">\n              {nft?.collectionName}\n            </Text>\n            <Text textAlign={['center', null, 'left']} bold>\n              {nft?.name}\n            </Text>\n          </Flex>\n        </Flex>\n      </Td>\n      <Td>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <ActivityEventText marketEvent={activity.marketEvent} />\n        </Flex>\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\n          </Td>\n          <Td>\n            <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n              {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\n            </Flex>\n          </Td>\n        </>\n      )}\n      <Td>\n        <Flex justifyContent=\"center\">\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\n            {localeTimestamp}\n          </Text>\n        </Flex>\n      </Td>\n      {isXs || isSm ? null : (\n        <Td>\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Td>\n      )}\n    </tr>\n  )\n}\n\nexport default ActivityRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\n\nconst GridItem = styled(Flex)`\n  align-items: center;\n`\n\nconst LoadingRow: React.FC = () => {\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  return (\n    <tr>\n      <Td>\n        <GridItem>\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\n        </GridItem>\n      </Td>\n      <Td>\n        <GridItem justifyContent=\"flex-end\">\n          <Skeleton height={[66, null, 24]} width={64} />\n        </GridItem>\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={42} width={64} />\n            </GridItem>\n          </Td>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={48} width={124} />\n            </GridItem>\n          </Td>\n        </>\n      )}\n      <Td>\n        <GridItem justifyContent=\"center\">\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\n        </GridItem>\n      </Td>\n    </tr>\n  )\n}\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nexport default TableLoader\n","import styled from 'styled-components'\n\nconst NoNftsImage = styled.div`\n  background: url('/images/nfts/no-profile-md.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default NoNftsImage\n","import React, { useState, useEffect } from 'react'\nimport { uniqBy } from 'lodash'\nimport { Flex, Text, Card, ArrowBackIcon, ArrowForwardIcon, Table, Th, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { getNftsFromDifferentCollectionsApi } from 'state/nftMarket/helpers'\nimport { NftToken, TokenIdWithCollectionAddress, UserNftInitializationState } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport useTheme from 'hooks/useTheme'\nimport { useParams } from 'react-router'\nimport useFetchUserActivity from '../../hooks/useFetchUserActivity'\nimport useUserActivity, { Activity } from '../../hooks/useUserActivity'\nimport ActivityRow from './ActivityRow'\nimport TableLoader from './TableLoader'\nimport NoNftsImage from '../NoNftsImage'\nimport { Arrow, PageButtons } from '../../../components/PaginationButtons'\n\nconst MAX_PER_PAGE = 8\n\nconst ActivityHistory = () => {\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const [currentPage, setCurrentPage] = useState(1)\n  const [maxPage, setMaxPages] = useState(1)\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\n  const { sortedUserActivities, initializationState } = useUserActivity(accountAddress)\n  const bnbBusdPrice = useBNBBusdPrice()\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  useFetchUserActivity(accountAddress)\n\n  useEffect(() => {\n    const fetchActivityNftMetadata = async () => {\n      const activityNftTokenIds = uniqBy(\n        sortedUserActivities.map((activity): TokenIdWithCollectionAddress => {\n          return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\n        }),\n        'tokenId',\n      )\n      const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds)\n      setNftMetadata(nfts)\n    }\n\n    const getMaxPages = () => {\n      const max = Math.ceil(sortedUserActivities.length / MAX_PER_PAGE)\n      setMaxPages(max)\n    }\n\n    if (sortedUserActivities.length > 0) {\n      getMaxPages()\n      fetchActivityNftMetadata()\n    }\n\n    return () => {\n      setActivitiesSlice([])\n      setNftMetadata([])\n      setMaxPages(1)\n      setCurrentPage(1)\n    }\n  }, [sortedUserActivities])\n\n  useEffect(() => {\n    const getActivitiesSlice = () => {\n      const slice = sortedUserActivities.slice(MAX_PER_PAGE * (currentPage - 1), MAX_PER_PAGE * currentPage)\n      setActivitiesSlice(slice)\n    }\n    if (sortedUserActivities.length > 0) {\n      getActivitiesSlice()\n    }\n  }, [sortedUserActivities, currentPage])\n\n  return (\n    <Card>\n      {sortedUserActivities.length === 0 &&\n      nftMetadata.length === 0 &&\n      activitiesSlice.length === 0 &&\n      initializationState === UserNftInitializationState.INITIALIZED ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFT market history found')}\n          </Text>\n        </Flex>\n      ) : (\n        <>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\n                <Th textAlign=\"right\"> {t('Event')}</Th>\n                {isXs || isSm ? null : (\n                  <>\n                    <Th textAlign=\"right\"> {t('Price')}</Th>\n                    <Th textAlign=\"right\"> {t('From/To')}</Th>\n                  </>\n                )}\n                <Th textAlign=\"center\"> {t('Date')}</Th>\n                {isXs || isSm ? null : <Th />}\n              </tr>\n            </thead>\n\n            <tbody>\n              {initializationState === UserNftInitializationState.INITIALIZING ? (\n                <TableLoader />\n              ) : (\n                activitiesSlice.map((activity) => {\n                  const nftMeta = nftMetadata.find((metaNft) => metaNft.tokenId === activity.nft.tokenId)\n                  return (\n                    <ActivityRow\n                      key={`${activity.nft.tokenId}${activity.timestamp}`}\n                      activity={activity}\n                      nft={nftMeta}\n                      bnbBusdPrice={bnbBusdPrice}\n                    />\n                  )\n                })\n              )}\n            </tbody>\n          </Table>\n          <Flex\n            borderTop={`1px ${theme.colors.cardBorder} solid`}\n            pt=\"24px\"\n            flexDirection=\"column\"\n            justifyContent=\"space-between\"\n            height=\"100%\"\n          >\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  setCurrentPage(currentPage === 1 ? currentPage : currentPage - 1)\n                }}\n              >\n                <ArrowBackIcon color={currentPage === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n              <Text>{t('Page %page% of %maxPage%', { page: currentPage, maxPage })}</Text>\n              <Arrow\n                onClick={() => {\n                  setCurrentPage(currentPage === maxPage ? currentPage : currentPage + 1)\n                }}\n              >\n                <ArrowForwardIcon color={currentPage === maxPage ? 'textDisabled' : 'primary'} />\n              </Arrow>\n            </PageButtons>\n          </Flex>\n        </>\n      )}\n    </Card>\n  )\n}\n\nexport default ActivityHistory\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { useLocation, useParams } from 'react-router'\nimport BaseSubMenu from '../../components/BaseSubMenu'\nimport { nftsBaseUrl } from '../../constants'\n\nconst SubMenuComponent: React.FC = () => {\n  const { t } = useTranslation()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { pathname } = useLocation()\n\n  const ItemsConfig = [\n    {\n      label: t('Items'),\n      href: `${nftsBaseUrl}/profile/${accountAddress}`,\n    },\n    {\n      label: t('Activity'),\n      href: `${nftsBaseUrl}/profile/${accountAddress}/activity`,\n    },\n  ]\n\n  return <BaseSubMenu items={ItemsConfig} activeItem={pathname} justifyContent=\"flex-start\" mb=\"60px\" />\n}\n\nexport default SubMenuComponent\n","import React, { useState, useEffect } from 'react'\nimport { Grid, useModal, Text, Flex } from '@pancakeswap/uikit'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { NftLocation, UserNftInitializationState, NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { CollectibleActionCard } from '../../components/CollectibleCard'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport ProfileNftModal from '../../components/ProfileNftModal'\nimport NoNftsImage from './NoNftsImage'\nimport SellModal from '../../components/BuySellModals/SellModal'\n\ninterface ProfileNftProps {\n  nft: NftToken\n  location: NftLocation\n}\n\ninterface SellNftProps {\n  nft: NftToken\n  location: NftLocation\n  variant: 'sell' | 'edit'\n}\n\nconst UserNfts = () => {\n  const { nfts, userNftsInitializationState } = useUserNfts()\n  const [clickedProfileNft, setClickedProfileNft] = useState<ProfileNftProps>({ nft: null, location: null })\n  const [clickedSellNft, setClickedSellNft] = useState<SellNftProps>({ nft: null, location: null, variant: null })\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={clickedProfileNft.nft} />)\n  const [onPresentSellModal] = useModal(<SellModal variant={clickedSellNft.variant} nftToSell={clickedSellNft.nft} />)\n  const { t } = useTranslation()\n\n  const handleCollectibleClick = (nft: NftToken, location: NftLocation) => {\n    switch (location) {\n      case NftLocation.PROFILE:\n        setClickedProfileNft({ nft, location })\n        break\n      case NftLocation.WALLET:\n        setClickedSellNft({ nft, location, variant: 'sell' })\n        break\n      case NftLocation.FORSALE:\n        setClickedSellNft({ nft, location, variant: 'edit' })\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (clickedProfileNft.nft) {\n      onPresentProfileNftModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedProfileNft])\n\n  useEffect(() => {\n    if (clickedSellNft.nft) {\n      onPresentSellModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedSellNft])\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && userNftsInitializationState === UserNftInitializationState.INITIALIZED ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData, location } = nft\n\n            return (\n              <CollectibleActionCard\n                isUserNft\n                onClick={() => handleCollectibleClick(nft, location)}\n                key={`${nft.tokenId}-${nft.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\n                }\n                nftLocation={location}\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useProfile } from 'state/profile/hooks'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { Route } from 'react-router'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { useAchievements, useFetchAchievements } from 'state/achievements/hooks'\nimport useFetchUserNfts from './hooks/useFetchUserNfts'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport ProfileHeader from './components/ProfileHeader'\nimport TabMenu from './components/TabMenu'\nimport Achievements from './components/Achievements'\nimport ActivityHistory from './components/ActivityHistory'\nimport SubMenu from './components/SubMenu'\nimport UserNfts from './components/UserNfts'\n\nconst TabMenuWrapper = styled(Box)`\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 0%);\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    left: auto;\n    transform: none;\n  }\n`\n\nconst ConnectedProfile = () => {\n  const { profile } = useProfile()\n  const achievements = useAchievements()\n  const { account } = useWeb3React()\n  const { nfts: userNfts } = useUserNfts()\n\n  useFetchAchievements()\n  useFetchUserNfts(account)\n\n  return (\n    <>\n      <MarketPageHeader position=\"relative\">\n        <ProfileHeader\n          accountPath={account}\n          profile={profile}\n          achievements={achievements}\n          nftCollected={userNfts.length}\n        />\n        <TabMenuWrapper>\n          <TabMenu />\n        </TabMenuWrapper>\n      </MarketPageHeader>\n      <Page style={{ minHeight: 'auto' }}>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/achievements`}>\n          <Achievements achievements={achievements} points={profile?.points} />\n        </Route>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/activity`}>\n          <SubMenu />\n          <ActivityHistory />\n        </Route>\n        <Route exact path={`${nftsBaseUrl}/profile/:accountAddress`}>\n          <SubMenu />\n          <UserNfts />\n        </Route>\n      </Page>\n    </>\n  )\n}\n\nexport default ConnectedProfile\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { State, AchievementState } from '../types'\nimport { fetchAchievements } from '.'\n\nexport const useFetchAchievements = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchAchievements(account))\n    }\n  }, [account, dispatch])\n}\n\nexport const useAchievements = () => {\n  const achievements: AchievementState['data'] = useSelector((state: State) => state.achievements.data)\n  return achievements\n}\n","import { useEffect, useMemo, useState } from 'react'\nimport isEmpty from 'lodash/isEmpty'\nimport { useGetCollections } from 'state/nftMarket/hooks'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { Profile } from 'state/types'\nimport { getCompleteAccountNftData } from 'state/nftMarket/helpers'\n\nconst useFetchUserNfts = (account: string, profile: Profile, isProfileFetching: boolean) => {\n  const [combinedNfts, setCombinedNfts] = useState<NftToken[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const collections = useGetCollections()\n\n  const hasProfileNft = profile?.tokenId\n  const profileNftTokenId = profile?.tokenId?.toString()\n  const profileNftCollectionAddress = profile?.collectionAddress\n\n  const profileNftWithCollectionAddress = useMemo(() => {\n    if (hasProfileNft) {\n      return {\n        tokenId: profileNftTokenId,\n        collectionAddress: profileNftCollectionAddress,\n        nftLocation: NftLocation.PROFILE,\n      }\n    }\n    return null\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\n\n  useEffect(() => {\n    const getNfts = async () => {\n      const completeNftData = await getCompleteAccountNftData(account, collections, profileNftWithCollectionAddress)\n      setCombinedNfts(completeNftData)\n      setIsLoading(false)\n    }\n\n    if (!isProfileFetching && !isEmpty(collections)) {\n      setIsLoading(true)\n      getNfts()\n    }\n  }, [account, collections, isProfileFetching, profileNftWithCollectionAddress])\n\n  return { nfts: combinedNfts, isLoading }\n}\n\nexport default useFetchUserNfts\n","import React from 'react'\nimport { Grid, Text, Flex } from '@pancakeswap/uikit'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport NoNftsImage from './NoNftsImage'\n\nconst UserNfts: React.FC<{ nfts: NftToken[]; isLoading: boolean }> = ({ nfts, isLoading }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData } = nft\n\n            return (\n              <CollectibleLinkCard\n                key={`${nft.tokenId}-${nft.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\n                }\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useAchievementsForAddress, useProfileForAddress } from 'state/profile/hooks'\nimport { Box } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { Route, useParams } from 'react-router'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport ProfileHeader from './components/ProfileHeader'\nimport TabMenu from './components/TabMenu'\nimport Achievements from './components/Achievements'\nimport ActivityHistory from './components/ActivityHistory'\nimport SubMenu from './components/SubMenu'\nimport useGetNftsForAddress from './hooks/useGetNftsForAddress'\nimport UnconnectedProfileNfts from './components/UnconnectedProfileNfts'\n\nconst TabMenuWrapper = styled(Box)`\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 0%);\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    left: auto;\n    transform: none;\n  }\n`\n\nconst UnconnectedProfile = () => {\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { profile: profileHookState, isFetching: isProfileFetching } = useProfileForAddress(accountAddress)\n  const { profile } = profileHookState || {}\n  const { achievements } = useAchievementsForAddress(accountAddress)\n  const { nfts, isLoading } = useGetNftsForAddress(accountAddress, profile, isProfileFetching)\n\n  return (\n    <>\n      <MarketPageHeader position=\"relative\">\n        <ProfileHeader\n          accountPath={accountAddress}\n          profile={profile}\n          achievements={achievements}\n          nftCollected={nfts.length}\n        />\n        <TabMenuWrapper>\n          <TabMenu />\n        </TabMenuWrapper>\n      </MarketPageHeader>\n      <Page style={{ minHeight: 'auto' }}>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/achievements`}>\n          <Achievements achievements={achievements} points={profile?.points} />\n        </Route>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/activity`}>\n          <SubMenu />\n          <ActivityHistory />\n        </Route>\n        <Route exact path={`${nftsBaseUrl}/profile/:accountAddress`}>\n          <SubMenu />\n          <UnconnectedProfileNfts nfts={nfts} isLoading={isLoading} />\n        </Route>\n      </Page>\n    </>\n  )\n}\n\nexport default UnconnectedProfile\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useParams } from 'react-router'\nimport { isAddress } from 'utils'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { useTranslation } from 'contexts/Localization'\nimport ConnectedProfile from './ConnectedProfile'\nimport UnconnectedProfile from './UnconnectedProfile'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport ProfileHeader from './components/ProfileHeader'\nimport NoNftsImage from './components/NoNftsImage'\n\nconst NftProfile = () => {\n  const { account } = useWeb3React()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { t } = useTranslation()\n\n  const isConnectedProfile = account?.toLowerCase() === accountAddress?.toLowerCase()\n  const invalidAddress = !accountAddress || isAddress(accountAddress) === false\n\n  if (invalidAddress) {\n    return (\n      <>\n        <MarketPageHeader position=\"relative\">\n          <ProfileHeader accountPath={accountAddress} profile={null} achievements={null} nftCollected={null} />\n        </MarketPageHeader>\n        <Page style={{ minHeight: 'auto' }}>\n          <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n            <NoNftsImage />\n            <Text textAlign=\"center\" maxWidth=\"420px\" pt=\"8px\" bold>\n              {t('Please enter a valid address, or connect your wallet to view your profile')}\n            </Text>\n          </Flex>\n        </Page>\n      </>\n    )\n  }\n\n  return <>{isConnectedProfile ? <ConnectedProfile /> : <UnconnectedProfile />}</>\n}\n\nexport default NftProfile\n","var baseTimes = require('./_baseTimes'),\n    castFunction = require('./_castFunction'),\n    toInteger = require('./toInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Invokes the iteratee `n` times, returning an array of the results of\n * each invocation. The iteratee is invoked with one argument; (index).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.times(3, String);\n * // => ['0', '1', '2']\n *\n *  _.times(4, _.constant(0));\n * // => [0, 0, 0, 0]\n */\nfunction times(n, iteratee) {\n  n = toInteger(n);\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\n    return [];\n  }\n  var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n  iteratee = castFunction(iteratee);\n  n -= MAX_ARRAY_LENGTH;\n\n  var result = baseTimes(length, iteratee);\n  while (++index < n) {\n    iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = times;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n","import React from 'react'\nimport { Box, BoxProps, Grid, GridProps, Skeleton } from '@pancakeswap/uikit'\nimport times from 'lodash/times'\n\ninterface GridPlaceholderProps extends GridProps {\n  numItems?: number\n}\n\nexport const GridPlaceholderItem: React.FC<BoxProps> = (props) => (\n  <Box {...props}>\n    <Skeleton height=\"252px\" mb=\"8px\" />\n    <Skeleton width=\"30%\" mb=\"4px\" />\n    <Skeleton width=\"45%\" mb=\"16px\" />\n    <Skeleton />\n  </Box>\n)\n\nconst GridPlaceholder: React.FC<GridPlaceholderProps> = ({ numItems = 12, ...props }) => (\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\n    {times(numItems).map((itemKey) => (\n      <GridPlaceholderItem key={itemKey} />\n    ))}\n  </Grid>\n)\n\nexport default GridPlaceholder\n","import React from 'react'\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\nimport useTheme from 'hooks/useTheme'\n\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\n  const { theme } = useTheme()\n  const background = theme.isDark\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\n  return <PageHeader background={background} {...props} />\n}\n\nexport default MarketPageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\n\nexport interface StatBoxItemProps extends BoxProps {\n  title: string\n  stat: string\n}\n\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\n  <Box {...props}>\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\n      {title}\n    </Text>\n    {stat === null ? (\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\n    ) : (\n      <Text fontWeight=\"600\" textAlign=\"center\">\n        {stat}\n      </Text>\n    )}\n  </Box>\n)\n\nconst StatBox = styled(Flex)`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.invertedContrast};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  justify-content: space-around;\n  padding: 8px;\n  width: 100%;\n`\n\nexport default StatBox\n","import styled from 'styled-components'\n\ninterface AvatarImageProps {\n  src: string\n  borderColor?: string\n  alt?: string\n}\n\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\n  alt,\n}))<AvatarImageProps>`\n  background: url('${({ src }) => src}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default AvatarImage\n","import React, { ReactNode } from 'react'\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\n\ninterface MarketPageTitleProps extends GridProps {\n  title: string\n  description?: ReactNode\n}\n\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\n    <Box>\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\n        {title}\n      </Heading>\n      {description}\n    </Box>\n    <Box>{children}</Box>\n  </Grid>\n)\n\nexport default MarketPageTitle\n","import { SubMenuItems } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseSubMenu = styled(SubMenuItems)`\n  background-color: transparent;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nexport default BaseSubMenu\n","import styled from 'styled-components'\n\ninterface StyledBannerImageProps {\n  src: string\n  alt?: string\n}\n\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\n  alt,\n}))<StyledBannerImageProps>`\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\n  background-image: url('${({ src }) => src}');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 100%;\n  border-radius: 32px;\n  height: 123px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 192px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    height: 256px;\n  }\n`\n\nexport default StyledBannerImage\n","import React, { ReactNode } from 'react'\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\nimport BannerImage from './BannerImage'\n\ninterface BannerHeaderProps extends FlexProps {\n  bannerImage: string\n  bannerAlt?: string\n  avatar?: ReactNode\n}\n\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\n  return (\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\n      <Box position=\"relative\" pb=\"56px\">\n        <BannerImage src={bannerImage} alt={bannerAlt} />\n        <Box position=\"absolute\" bottom={0} left={-4}>\n          <Flex alignItems=\"flex-end\">\n            {avatar}\n            {children}\n          </Flex>\n        </Box>\n      </Box>\n    </Flex>\n  )\n}\n\nexport default BannerHeader\n","import React, { ElementType, ReactNode } from 'react'\nimport { Flex, Heading, Text, TextProps } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst SecondaryCard = styled(Text)`\n  border: 2px solid ${({ theme }) => theme.colors.tertiary};\n  border-radius: 16px;\n`\n\nSecondaryCard.defaultProps = {\n  p: '24px',\n}\n\ninterface IconStatBoxProps extends TextProps {\n  icon: ElementType\n  title: ReactNode\n  subtitle: ReactNode\n  isDisabled?: boolean\n}\n\nconst IconStatBox: React.FC<IconStatBoxProps> = ({ icon: Icon, title, subtitle, isDisabled = false, ...props }) => {\n  return (\n    <SecondaryCard {...props}>\n      <Flex alignItems=\"start\">\n        <Icon width=\"44px\" mr=\"24px\" color={isDisabled ? 'textDisabled' : 'currentColor'} />\n        <div>\n          <Heading as=\"h3\" scale=\"xl\" color={isDisabled ? 'textDisabled' : 'text'}>\n            {title}\n          </Heading>\n          <Text textTransform=\"uppercase\" color={isDisabled ? 'textDisabled' : 'textSubtle'} fontSize=\"12px\" bold>\n            {subtitle}\n          </Text>\n        </div>\n      </Flex>\n    </SecondaryCard>\n  )\n}\n\nexport default IconStatBox\n"],"sourceRoot":""}