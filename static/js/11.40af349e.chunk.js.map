{"version":3,"sources":["views/Nft/market/Collection/Items/CollectionNfts.tsx","views/Nft/market/Collection/Items/PancakeBunniesCollectionNfts.tsx","views/Nft/market/Collection/Items/index.tsx","../node_modules/lodash/times.js","../node_modules/lodash/toInteger.js","../node_modules/lodash/_castFunction.js","components/AddressInputSelect/index.tsx","views/Nft/market/components/GridPlaceholder.tsx","views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/StatBox.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/components/SearchBar.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/hooks/useAllPancakeBunnyNfts.ts","views/Nft/market/Collection/TopBar.tsx","views/Nft/market/Collection/LowestPriceStatBoxItem.tsx","views/Nft/market/Collection/Header.tsx"],"names":["MAX_ITEMS_PER_PAGE","CollectionNfts","collection","dispatch","useAppDispatch","scrollEl","useRef","useState","currentPage","setCurrentPage","maxPage","setMaxPages","nftsSlice","setNftsSlice","t","useTranslation","address","totalSupply","checksummedAddress","getAddress","nftsFromCollection","useNftsFromCollection","shouldFetchMoreNfts","length","isArrowBackDisabled","isArrowForwardDisabled","useEffect","fetchNftsFromCollections","collectionAddress","page","size","requestPage","Math","ceil","fetchMoreNftsFromCollections","max","Number","getMaxPages","slice","getActivitiesSlice","ref","gridGap","gridTemplateColumns","alignItems","map","nft","tokenId","collectionName","mt","onClick","color","cursor","current","scrollIntoView","behavior","spin","GridPlaceholder","PancakeBunniesCollectionNfts","sortBy","allPancakeBunnyNfts","useAllPancakeBunnyNfts","sortedNfts","orderBy","meta","Items","useParams","setSortBy","useGetCollection","isPBCollection","toLowerCase","pancakeBunniesAddress","sortByItems","label","value","fetchCollection","Header","Page","justifyContent","mb","minWidth","fontSize","textTransform","fontWeight","Select","options","onOptionChange","newOption","baseTimes","require","castFunction","toInteger","MAX_ARRAY_LENGTH","nativeMin","min","module","exports","n","iteratee","index","result","toFinite","remainder","identity","ResultStatus","SubMenu","styled","div","theme","colors","input","inputSecondary","radii","default","isOpen","AddressLink","Text","initialState","isFetching","resultFound","NOT_VALID","defaultValidAddressHandler","Promise","resolve","AddressInputSelect","onValidAddress","onAddressClick","props","state","setState","isAddress","a","prevState","hasResults","FOUND","NOT_FOUND","validAddressHandler","position","placeholder","subject","onChange","evt","newValue","target","style","zIndex","paddingRight","top","right","px","GridPlaceholderItem","height","width","numItems","times","itemKey","MarketPageHeader","background","useTheme","isDark","StatBoxItem","title","stat","textAlign","mx","StatBox","Flex","invertedContrast","cardBorder","card","AvatarImage","attrs","alt","src","borderColor","SearchBar","history","useHistory","push","nftsBaseUrl","MarketPageTitle","description","children","as","scale","BaseSubMenu","SubMenuItems","StyledBannerImage","mediaQueries","sm","md","BannerHeader","bannerImage","bannerAlt","avatar","flexDirection","pb","BannerImage","bottom","left","PageButtons","Arrow","primary","setAllPancakeBunnyNfts","getNftsFromCollectionApi","data","bunnyIds","Object","keys","getAllPancakeBunniesLowestPrice","lowestPrices","getAllPancakeBunniesRecentUpdatedAt","latestUpdates","allBunnies","bunnyId","name","image","attributes","traitType","displayType","currentAskPrice","updatedAt","fetchPancakeBunnies","BackLink","RouterLink","TopBar","to","LowestPriceStatBoxItem","lowestPrice","setLowestPrice","getLowestPriceInCollection","lowestCollectionPrice","fetchLowestPrice","formattedLowestPrice","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","symbol","numberTokensListed","totalVolumeBNB","banner","useLocation","pathname","hash","volume","parseFloat","itemsConfig","href","large","formatNumber","Container","items","activeItem"],"mappings":"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","file":"static/js/11.40af349e.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, AutoRenewIcon, Flex, Grid, Text } from '@pancakeswap/uikit'\nimport { getAddress } from '@ethersproject/address'\nimport { useAppDispatch } from 'state'\nimport { useNftsFromCollection } from 'state/nftMarket/hooks'\nimport { Collection, NftToken } from 'state/nftMarket/types'\nimport { fetchNftsFromCollections } from 'state/nftMarket/reducer'\nimport { useTranslation } from 'contexts/Localization'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\nimport { Arrow, PageButtons } from '../../components/PaginationButtons'\n\ninterface CollectionNftsProps {\n  collection: Collection\n}\n\nconst REQUEST_SIZE = 100\nconst MAX_ITEMS_PER_PAGE = 100\n\nconst CollectionNfts: React.FC<CollectionNftsProps> = ({ collection }) => {\n  const dispatch = useAppDispatch()\n  const scrollEl = useRef<HTMLDivElement>(null)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [maxPage, setMaxPages] = useState(1)\n  const [nftsSlice, setNftsSlice] = useState<NftToken[]>([])\n  const { t } = useTranslation()\n\n  const { address, totalSupply } = collection\n\n  const checksummedAddress = getAddress(address)\n\n  const nftsFromCollection = useNftsFromCollection(checksummedAddress)\n\n  const shouldFetchMoreNfts = nftsFromCollection?.length <= currentPage * MAX_ITEMS_PER_PAGE\n  const isArrowBackDisabled = currentPage === 1\n  const isArrowForwardDisabled = currentPage === maxPage || shouldFetchMoreNfts\n\n  const scrollToTop = (): void => {\n    scrollEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  useEffect(() => {\n    // First fetch\n    dispatch(\n      fetchNftsFromCollections({\n        collectionAddress: checksummedAddress,\n        page: 1,\n        size: REQUEST_SIZE,\n      }),\n    )\n  }, [checksummedAddress, dispatch])\n\n  useEffect(() => {\n    // Additional fetches\n    const fetchMoreNftsFromCollections = () => {\n      const requestPage = Math.ceil(nftsFromCollection.length / REQUEST_SIZE) + 1\n      dispatch(\n        fetchNftsFromCollections({\n          collectionAddress: checksummedAddress,\n          page: requestPage,\n          size: REQUEST_SIZE,\n        }),\n      )\n    }\n\n    // NB: TRAIT FILTERS - When trait filter is active, should probably prevent this from firing\n    if (nftsFromCollection?.length > 0 && shouldFetchMoreNfts) {\n      fetchMoreNftsFromCollections()\n    }\n  }, [nftsFromCollection, currentPage, checksummedAddress, shouldFetchMoreNfts, dispatch])\n\n  useEffect(() => {\n    const getMaxPages = () => {\n      // NB: TRAIT FILTERS - changing the `totalSupply` here to the length of the data returned by the traits res should work well for pure FE pagination.\n      const max = Math.ceil(Number(totalSupply) / MAX_ITEMS_PER_PAGE)\n      setMaxPages(max)\n    }\n\n    if (totalSupply) {\n      getMaxPages()\n    }\n  }, [totalSupply])\n\n  // Slice sorted data to paginate in FE\n  useEffect(() => {\n    const getActivitiesSlice = () => {\n      const slice = nftsFromCollection.slice(MAX_ITEMS_PER_PAGE * (currentPage - 1), MAX_ITEMS_PER_PAGE * currentPage)\n      setNftsSlice(slice)\n    }\n\n    if (nftsFromCollection?.length > 0) {\n      getActivitiesSlice()\n    }\n  }, [nftsFromCollection, currentPage])\n\n  if (!nftsSlice.length) {\n    return <GridPlaceholder />\n  }\n\n  return (\n    <>\n      <Grid\n        ref={scrollEl}\n        gridGap=\"16px\"\n        gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n        alignItems=\"start\"\n      >\n        {nftsSlice.map((nft) => {\n          return <CollectibleLinkCard key={`${nft.tokenId}-${nft.collectionName}`} nft={nft} />\n        })}\n      </Grid>\n      {nftsFromCollection?.length > MAX_ITEMS_PER_PAGE && (\n        <Flex mt=\"24px\">\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setCurrentPage(isArrowBackDisabled ? currentPage : currentPage - 1)\n              }}\n            >\n              <ArrowBackIcon\n                color={isArrowBackDisabled ? 'textDisabled' : 'primary'}\n                cursor={isArrowBackDisabled ? 'not-allowed' : 'pointer'}\n              />\n            </Arrow>\n            <Text>{t('Page %page% of %maxPage%', { page: currentPage, maxPage })}</Text>\n            <Arrow\n              onClick={() => {\n                if (!isArrowForwardDisabled) {\n                  scrollToTop()\n                  setCurrentPage(currentPage + 1)\n                }\n              }}\n            >\n              {shouldFetchMoreNfts ? (\n                <AutoRenewIcon spin color=\"textDisabled\" cursor=\"not-allowed\" />\n              ) : (\n                <ArrowForwardIcon\n                  color={isArrowForwardDisabled ? 'textDisabled' : 'primary'}\n                  cursor={isArrowForwardDisabled ? 'not-allowed' : 'pointer'}\n                />\n              )}\n            </Arrow>\n          </PageButtons>\n        </Flex>\n      )}\n    </>\n  )\n}\n\nexport default CollectionNfts\n","import React from 'react'\nimport { Grid } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport { Collection } from 'state/nftMarket/types'\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\nimport useAllPancakeBunnyNfts from '../../hooks/useAllPancakeBunnyNfts'\nimport GridPlaceholder from '../../components/GridPlaceholder'\n\ninterface CollectionNftsProps {\n  collection: Collection\n  sortBy?: string\n}\n\nconst PancakeBunniesCollectionNfts: React.FC<CollectionNftsProps> = ({ collection, sortBy = 'updatedAt' }) => {\n  const { address } = collection\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(address)\n\n  const sortedNfts = allPancakeBunnyNfts\n    ? orderBy(allPancakeBunnyNfts, (nft) => (nft.meta[sortBy] ? Number(nft?.meta[sortBy]) : 0), [\n        sortBy === 'currentAskPrice' ? 'asc' : 'desc',\n      ])\n    : []\n\n  if (!sortedNfts.length) {\n    return <GridPlaceholder />\n  }\n\n  return (\n    <>\n      <Grid\n        gridGap=\"16px\"\n        gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n        alignItems=\"start\"\n      >\n        {sortedNfts.map((nft) => {\n          return <CollectibleLinkCard key={`${nft.tokenId}-${nft.collectionName}`} nft={nft} />\n        })}\n      </Grid>\n    </>\n  )\n}\n\nexport default PancakeBunniesCollectionNfts\n","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { fetchCollection } from 'state/nftMarket/reducer'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Page from 'components/Layout/Page'\nimport { pancakeBunniesAddress } from '../../constants'\nimport CollectionNfts from './CollectionNfts'\nimport PancakeBunniesCollectionNfts from './PancakeBunniesCollectionNfts'\nimport Header from '../Header'\n\nconst Items = () => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const [sortBy, setSortBy] = useState('updatedAt')\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const collection = useGetCollection(collectionAddress)\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n\n  const { address } = collection || {}\n\n  const sortByItems = [\n    { label: t('Recently listed'), value: 'updatedAt' },\n    { label: t('Lowest price'), value: 'currentAskPrice' },\n  ]\n\n  const handleChange = (newOption: OptionProps) => {\n    setSortBy(newOption.value)\n  }\n\n  useEffect(() => {\n    if (address) {\n      dispatch(fetchCollection(address))\n    }\n  }, [address, dispatch])\n\n  return (\n    <>\n      <Header collection={collection} />\n      <Page>\n        {/* Only PBs can return enough data to viably sort the entire collection */}\n        {isPBCollection && (\n          <Flex alignItems=\"center\" justifyContent={['flex-start', null, null, 'flex-end']} mb=\"24px\">\n            <Box minWidth=\"165px\">\n              <Text fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight={600} mb=\"4px\">\n                {t('Sort By')}\n              </Text>\n              <Select options={sortByItems} onOptionChange={handleChange} />\n            </Box>\n          </Flex>\n        )}\n        {isPBCollection ? (\n          <PancakeBunniesCollectionNfts collection={collection} sortBy={sortBy} />\n        ) : (\n          <CollectionNfts collection={collection} />\n        )}\n      </Page>\n    </>\n  )\n}\n\nexport default Items\n","var baseTimes = require('./_baseTimes'),\n    castFunction = require('./_castFunction'),\n    toInteger = require('./toInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Invokes the iteratee `n` times, returning an array of the results of\n * each invocation. The iteratee is invoked with one argument; (index).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.times(3, String);\n * // => ['0', '1', '2']\n *\n *  _.times(4, _.constant(0));\n * // => [0, 0, 0, 0]\n */\nfunction times(n, iteratee) {\n  n = toInteger(n);\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\n    return [];\n  }\n  var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n  iteratee = castFunction(iteratee);\n  n -= MAX_ARRAY_LENGTH;\n\n  var result = baseTimes(length, iteratee);\n  while (++index < n) {\n    iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = times;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n","import React, { ChangeEvent, useState, useEffect } from 'react'\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { isAddress } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport CircleLoader from 'components/Loader/CircleLoader'\n\nenum ResultStatus {\n  NOT_VALID,\n  FOUND,\n  NOT_FOUND,\n}\n\ninterface AddressInputSelectProps extends BoxProps {\n  onValidAddress?: (value: string) => Promise<boolean>\n  onAddressClick: (value: string) => void\n}\n\nconst SubMenu = styled.div<{ isOpen: boolean }>`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.input};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\n  left: 0;\n  padding-bottom: 8px;\n  padding-top: 16px;\n  position: absolute;\n  top: calc(100% - 12px);\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  width: 100%;\n  z-index: 15;\n\n  ${({ isOpen }) =>\n    isOpen &&\n    `\n    height: auto;\n    opacity: 1;\n    transform: scaleY(1);\n  `}\n`\n\nconst AddressLink = styled(Text)`\n  cursor: pointer;\n  overflow-wrap: break-word;\n  font-weight: bold;\n  padding-left: 16px;\n  padding-right: 16px;\n`\n\nconst initialState = {\n  isFetching: false,\n  resultFound: ResultStatus.NOT_VALID,\n  value: '',\n}\n\nconst defaultValidAddressHandler = () => Promise.resolve(true)\n\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\n  onValidAddress = defaultValidAddressHandler,\n  onAddressClick,\n  ...props\n}) => {\n  const [state, setState] = useState(initialState)\n  const { t } = useTranslation()\n  const { isFetching, resultFound, value } = state\n\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    const { value: newValue } = evt.target\n    setState((prevState) => ({\n      ...prevState,\n      value: newValue,\n    }))\n  }\n\n  const handleClick = () => {\n    setState(initialState)\n    onAddressClick(state.value)\n  }\n\n  // When we have a valid address fetch the data\n  useEffect(() => {\n    const isValidAddress = isAddress(value) !== false\n\n    const validAddressHandler = async () => {\n      try {\n        setState((prevState) => ({ ...prevState, isFetching: true }))\n        const hasResults = await onValidAddress(value)\n\n        setState((prevState) => ({\n          ...prevState,\n          isFetching: false,\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\n        }))\n      } catch {\n        setState((prevState) => ({ ...prevState, isFetching: false }))\n      }\n    }\n\n    if (isValidAddress) {\n      validAddressHandler()\n    } else {\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\n    }\n  }, [value, onValidAddress, setState])\n\n  return (\n    <Box position=\"relative\" {...props}>\n      <Input\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\n        value={state.value}\n        onChange={handleChange}\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\n      />\n      {isFetching && (\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\n          <CircleLoader />\n        </Box>\n      )}\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\n        {resultFound === ResultStatus.FOUND ? (\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\n        ) : (\n          <Text px=\"16px\" fontWeight=\"bold\">\n            {t('No results found.')}\n          </Text>\n        )}\n      </SubMenu>\n    </Box>\n  )\n}\n\nexport default AddressInputSelect\n","import React from 'react'\nimport { Box, BoxProps, Grid, GridProps, Skeleton } from '@pancakeswap/uikit'\nimport times from 'lodash/times'\n\ninterface GridPlaceholderProps extends GridProps {\n  numItems?: number\n}\n\nexport const GridPlaceholderItem: React.FC<BoxProps> = (props) => (\n  <Box {...props}>\n    <Skeleton height=\"252px\" mb=\"8px\" />\n    <Skeleton width=\"30%\" mb=\"4px\" />\n    <Skeleton width=\"45%\" mb=\"16px\" />\n    <Skeleton />\n  </Box>\n)\n\nconst GridPlaceholder: React.FC<GridPlaceholderProps> = ({ numItems = 12, ...props }) => (\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\n    {times(numItems).map((itemKey) => (\n      <GridPlaceholderItem key={itemKey} />\n    ))}\n  </Grid>\n)\n\nexport default GridPlaceholder\n","import React from 'react'\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\nimport useTheme from 'hooks/useTheme'\n\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\n  const { theme } = useTheme()\n  const background = theme.isDark\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\n  return <PageHeader background={background} {...props} />\n}\n\nexport default MarketPageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\n\nexport interface StatBoxItemProps extends BoxProps {\n  title: string\n  stat: string\n}\n\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\n  <Box {...props}>\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\n      {title}\n    </Text>\n    {stat === null ? (\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\n    ) : (\n      <Text fontWeight=\"600\" textAlign=\"center\">\n        {stat}\n      </Text>\n    )}\n  </Box>\n)\n\nconst StatBox = styled(Flex)`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.invertedContrast};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  justify-content: space-around;\n  padding: 8px;\n  width: 100%;\n`\n\nexport default StatBox\n","import styled from 'styled-components'\n\ninterface AvatarImageProps {\n  src: string\n  borderColor?: string\n  alt?: string\n}\n\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\n  alt,\n}))<AvatarImageProps>`\n  background: url('${({ src }) => src}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default AvatarImage\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport AddressInputSelect from 'components/AddressInputSelect'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\n\nconst SearchBar: React.FC = (props) => {\n  const history = useHistory()\n\n  const handleAddressClick = (value: string) => {\n    history.push(`${nftsBaseUrl}/profile/${value}`)\n  }\n\n  return <AddressInputSelect onAddressClick={handleAddressClick} {...props} />\n}\n\nexport default SearchBar\n","import React, { ReactNode } from 'react'\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\n\ninterface MarketPageTitleProps extends GridProps {\n  title: string\n  description?: ReactNode\n}\n\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\n    <Box>\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\n        {title}\n      </Heading>\n      {description}\n    </Box>\n    <Box>{children}</Box>\n  </Grid>\n)\n\nexport default MarketPageTitle\n","import { SubMenuItems } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseSubMenu = styled(SubMenuItems)`\n  background-color: transparent;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nexport default BaseSubMenu\n","import styled from 'styled-components'\n\ninterface StyledBannerImageProps {\n  src: string\n  alt?: string\n}\n\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\n  alt,\n}))<StyledBannerImageProps>`\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\n  background-image: url('${({ src }) => src}');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 100%;\n  border-radius: 32px;\n  height: 123px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 192px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    height: 256px;\n  }\n`\n\nexport default StyledBannerImage\n","import React, { ReactNode } from 'react'\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\nimport BannerImage from './BannerImage'\n\ninterface BannerHeaderProps extends FlexProps {\n  bannerImage: string\n  bannerAlt?: string\n  avatar?: ReactNode\n}\n\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\n  return (\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\n      <Box position=\"relative\" pb=\"56px\">\n        <BannerImage src={bannerImage} alt={bannerAlt} />\n        <Box position=\"absolute\" bottom={0} left={-4}>\n          <Flex alignItems=\"flex-end\">\n            {avatar}\n            {children}\n          </Flex>\n        </Box>\n      </Box>\n    </Flex>\n  )\n}\n\nexport default BannerHeader\n","import styled from 'styled-components'\n\nexport const PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`\n\nexport const Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n","import { useState, useEffect } from 'react'\nimport {\n  getAllPancakeBunniesLowestPrice,\n  getAllPancakeBunniesRecentUpdatedAt,\n  getNftsFromCollectionApi,\n} from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\n\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\n\n  useEffect(() => {\n    const fetchPancakeBunnies = async () => {\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      const bunnyIds = Object.keys(data)\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\n        return {\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\n          tokenId: data[bunnyId].name,\n          name: data[bunnyId].name,\n          description: data[bunnyId].description,\n          collectionAddress: pancakeBunniesAddress,\n          collectionName: data[bunnyId].collection.name,\n          image: data[bunnyId].image,\n          attributes: [\n            {\n              traitType: 'bunnyId',\n              value: bunnyId,\n              displayType: null,\n            },\n          ],\n          meta: {\n            currentAskPrice: lowestPrices[bunnyId],\n            updatedAt: latestUpdates[bunnyId],\n          },\n        }\n      })\n      setAllPancakeBunnyNfts(allBunnies)\n    }\n    if (isPBCollection && !allPancakeBunnyNfts) {\n      fetchPancakeBunnies()\n    }\n  }, [isPBCollection, allPancakeBunnyNfts])\n\n  return allPancakeBunnyNfts\n}\n\nexport default useAllPancakeBunnyNfts\n","import React from 'react'\nimport { Box, ChevronLeftIcon, Flex } from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport SearchBar from '../components/SearchBar'\n\nconst BackLink = styled(RouterLink)`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.primary};\n  display: inline-flex;\n  font-weight: 600;\n`\n\nconst TopBar: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n      <BackLink to={nftsBaseUrl}>\n        <ChevronLeftIcon color=\"primary\" width=\"24px\" />\n        {t('All Collections')}\n      </BackLink>\n      <Box>\n        <SearchBar />\n      </Box>\n    </Flex>\n  )\n}\n\nexport default TopBar\n","import React, { useEffect, useState } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { getLowestPriceInCollection } from 'state/nftMarket/helpers'\nimport { StatBoxItem, StatBoxItemProps } from '../components/StatBox'\n\ninterface LowestPriceStatBoxItemProps extends Omit<StatBoxItemProps, 'title' | 'stat'> {\n  collectionAddress: string\n}\n\nconst LowestPriceStatBoxItem: React.FC<LowestPriceStatBoxItemProps> = ({ collectionAddress, ...props }) => {\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n  const { t } = useTranslation()\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      const lowestCollectionPrice = await getLowestPriceInCollection(collectionAddress)\n      setLowestPrice(lowestCollectionPrice)\n    }\n\n    fetchLowestPrice()\n  }, [collectionAddress, setLowestPrice])\n\n  const formattedLowestPrice =\n    lowestPrice === null\n      ? null\n      : lowestPrice.toLocaleString(undefined, {\n          minimumFractionDigits: 3,\n          maximumFractionDigits: 3,\n        })\n\n  return <StatBoxItem title={t('Lowest (%symbol%)', { symbol: 'BNB' })} stat={formattedLowestPrice} {...props} />\n}\n\nexport default LowestPriceStatBoxItem\n","import React from 'react'\nimport { useLocation, useParams } from 'react-router'\nimport { Text } from '@pancakeswap/uikit'\nimport { Collection } from 'state/nftMarket/types'\nimport { formatNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport Container from 'components/Layout/Container'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport MarketPageTitle from '../components/MarketPageTitle'\nimport StatBox, { StatBoxItem } from '../components/StatBox'\nimport BannerHeader from '../components/BannerHeader'\nimport AvatarImage from '../components/BannerHeader/AvatarImage'\nimport BaseSubMenu from '../components/BaseSubMenu'\nimport { nftsBaseUrl } from '../constants'\nimport TopBar from './TopBar'\nimport LowestPriceStatBoxItem from './LowestPriceStatBoxItem'\n\ninterface HeaderProps {\n  collection: Collection\n}\n\nconst DEFAULT_TABS = '#items'\n\nconst Header: React.FC<HeaderProps> = ({ collection }) => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const { totalSupply, numberTokensListed, totalVolumeBNB, banner, avatar } = collection\n  const { t } = useTranslation()\n  const { pathname, hash } = useLocation()\n\n  const volume = parseFloat(totalVolumeBNB).toLocaleString(undefined, {\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 3,\n  })\n\n  const itemsConfig = [\n    {\n      label: t('Items'),\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#items`,\n    },\n    {\n      label: t('Traits'),\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#traits`,\n    },\n  ]\n\n  return (\n    <>\n      <MarketPageHeader>\n        <TopBar />\n        <BannerHeader bannerImage={banner.large} avatar={<AvatarImage src={avatar} />} />\n        <MarketPageTitle\n          title={collection.name}\n          description={collection.description ? <Text color=\"textSubtle\">{t(collection.description)}</Text> : null}\n        >\n          <StatBox>\n            <StatBoxItem title={t('Items')} stat={formatNumber(Number(totalSupply), 0, 0)} />\n            <StatBoxItem title={t('Items listed')} stat={formatNumber(Number(numberTokensListed), 0, 0)} />\n            <LowestPriceStatBoxItem collectionAddress={collection.address} />\n            <StatBoxItem title={t('Vol. (%symbol%)', { symbol: 'BNB' })} stat={volume} />\n          </StatBox>\n        </MarketPageTitle>\n      </MarketPageHeader>\n      <Container>\n        <BaseSubMenu items={itemsConfig} activeItem={`${pathname}${hash || DEFAULT_TABS}`} mt=\"24px\" mb=\"8px\" />\n      </Container>\n    </>\n  )\n}\n\nexport default Header\n"],"sourceRoot":""}